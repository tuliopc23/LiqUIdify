#!/bin/bash
# LiqUIdify Configuration Cleanup Script
# Removes redundant config files to maintain single source of truth

set -e

echo "ðŸ§¹ LiqUIdify Configuration Cleanup"
echo "=================================="

# Remove redundant Vite configs (keep only main vite.config.ts)
echo "ðŸ“„ Removing redundant Vite configurations..."
rm -f vite.config.modular.ts
rm -f vite.config.optimized.ts
rm -f vite.config.lite.ts
echo "  âœ… Kept: vite.config.ts (unified config)"

# Remove old ESLint configs
echo "ðŸ“„ Removing ESLint configurations..."
rm -f .eslintrc.js
rm -f .eslintrc.json
rm -f .eslintrc.yml
rm -f .eslintrc.yaml
rm -f eslint.config.js
rm -f eslint.config.mjs
rm -f eslint.config.ts
echo "  âœ… ESLint configs removed (using OXC)"

# Remove old Rollup configs
echo "ðŸ“„ Removing Rollup configurations..."
rm -f rollup.config.js
rm -f rollup.config.ts
rm -f rollup.config.mjs
echo "  âœ… Rollup configs removed (using Rolldown-Vite)"

# Remove Webpack configs
echo "ðŸ“„ Removing Webpack configurations..."
rm -f webpack.config.js
rm -f webpack.config.ts
rm -f webpack.config.dev.js
rm -f webpack.config.prod.js
echo "  âœ… Webpack configs removed"

# Remove Babel configs
echo "ðŸ“„ Removing Babel configurations..."
rm -f .babelrc
rm -f .babelrc.js
rm -f .babelrc.json
rm -f babel.config.js
rm -f babel.config.json
echo "  âœ… Babel configs removed (using OXC)"

# Remove Jest configs
echo "ðŸ“„ Removing Jest configurations..."
rm -f jest.config.js
rm -f jest.config.ts
rm -f jest.config.json
echo "  âœ… Jest configs removed (using Vitest)"

# Remove Prettier configs (keep in package.json)
echo "ðŸ“„ Removing redundant Prettier configurations..."
rm -f .prettierrc
rm -f .prettierrc.js
rm -f .prettierrc.json
rm -f .prettierrc.yml
rm -f .prettierrc.yaml
rm -f prettier.config.js
echo "  âœ… Prettier configs removed (configured in package.json)"

# Remove old TypeScript configs
echo "ðŸ“„ Removing redundant TypeScript configurations..."
rm -f tsconfig.build.json
rm -f tsconfig.dev.json
rm -f tsconfig.prod.json
rm -f tsconfig.lib.json
echo "  âœ… Extra TS configs removed (kept main tsconfig.json)"

# Remove Node version files
echo "ðŸ“„ Removing Node version files..."
rm -f .nvmrc
rm -f .node-version
echo "  âœ… Node version files removed (using Bun)"

# Remove old dependency files
echo "ðŸ“„ Removing old dependency files..."
rm -f package-lock.json
rm -f yarn.lock
rm -f pnpm-lock.yaml
echo "  âœ… Old lock files removed (using bun.lockb)"

# Remove old CI configs
echo "ðŸ“„ Removing redundant CI configurations..."
rm -f .travis.yml
rm -f .circleci/config.yml
rm -f azure-pipelines.yml
rm -f buildkite.yml
echo "  âœ… Old CI configs removed (using GitHub Actions)"

# Remove IDE configs
echo "ðŸ“„ Removing IDE-specific configurations..."
rm -f .vscode/launch.json
rm -f .vscode/tasks.json
rm -rf .idea/
echo "  âœ… IDE configs removed"

# Create unified config summary
echo "ðŸ“‹ Creating configuration summary..."
cat > CONFIG_SUMMARY.md << 'EOF'
# LiqUIdify Unified Configuration

## Active Configuration Files

### Core Build System
- `vite.config.ts` - Unified build configuration (Rolldown-Vite)
- `tsconfig.json` - TypeScript configuration
- `oxc.config.json` - Linting and transformation (OXC)

### Styling
- `tailwind.config.ts` - Tailwind CSS v4 configuration
- `postcss.config.js` - PostCSS processing

### Package Management
- `package.json` - Dependencies and scripts
- `bun.lockb` - Bun lock file

### Development Tools
- `.oxlintrc.json` - OXC linter rules
- `oxc.resolver.config.json` - OXC module resolution

### CI/CD
- `.github/workflows/` - GitHub Actions

## Removed Configurations

The following redundant configuration files have been removed:

### Build Tools
- Multiple Vite configs (modular, optimized, lite)
- Rollup configurations
- Webpack configurations
- Babel configurations

### Linting
- ESLint configurations (replaced by OXC)
- Multiple Prettier configs

### Testing
- Jest configurations (using Vitest)

### Package Managers
- npm, yarn, pnpm lock files (using Bun)

### IDE/Editor
- VSCode launch/tasks
- IntelliJ IDEA configs

## Benefits

âœ… **Single Source of Truth** - Each tool has one configuration
âœ… **Reduced Maintenance** - Fewer files to update
âœ… **Faster Builds** - No conflicting tools
âœ… **Cleaner Repository** - Less clutter
âœ… **Better Performance** - Optimized tool chain

## Build Commands

```bash
# Main build (unified)
bun run build

# Development
bun run dev

# Linting
bun run lint

# Type checking
bun run type-check

# Full quality check
bun run qa:full
```

## Architecture

```
Bun (Package Manager)
â”œâ”€â”€ OXC (Linting + Transformation)
â”œâ”€â”€ Rolldown-Vite (Building)
â”œâ”€â”€ TypeScript (Type Checking)
â”œâ”€â”€ PostCSS (CSS Processing)
â””â”€â”€ Tailwind v4 (Styling)
```

Generated by: cleanup-configs.sh
Date: $(date)
EOF

echo "âœ… Configuration cleanup complete!"
echo ""
echo "ðŸ“Š Unified configuration summary:"
echo "  - 1 build config (vite.config.ts)"
echo "  - 1 linting config (oxc.config.json + .oxlintrc.json)"
echo "  - 1 TypeScript config (tsconfig.json)"
echo "  - 1 styling config (tailwind.config.ts + postcss.config.js)"
echo "  - 1 package config (package.json)"
echo ""
echo "ðŸ“‹ Configuration summary saved to: CONFIG_SUMMARY.md"
echo ""
echo "ðŸŽ¯ Next steps:"
echo "  1. Run 'bun run build' to test unified build"
echo "  2. Run 'bun run lint' to test unified linting"
echo "  3. Run 'bun run type-check' to verify TypeScript"
