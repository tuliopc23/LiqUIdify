name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20.x"
  BUN_VERSION: "latest"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Check formatting
        run: bun run format

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type checking
        run: bun run type-check

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ["18.x", "20.x", "21.x"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests
        run: bun test

      - name: Run integration tests
        run: bun test:integration

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build components
        run: bun run build:lib

      - name: Run accessibility tests
        run: bun run test:a11y

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: reports/a11y/

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build:lib

      - name: Build Storybook
        run: bun run build:storybook

      - name: Build documentation
        run: bun run docs:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            apps/storybook/storybook-static/
            apps/docs/.vitepress/dist/

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build:lib

      - name: Analyze bundle size
        run: bun run analyze:bundle

      - name: Check bundle size limits
        run: |
          CORE_SIZE=$(stat -c%s dist/bundles/core.js 2>/dev/null || stat -f%z dist/bundles/core.js)
          FULL_SIZE=$(stat -c%s dist/index.js 2>/dev/null || stat -f%z dist/index.js)

          if [ $CORE_SIZE -gt 30720 ]; then
            echo "Core bundle exceeds 30KB limit: $CORE_SIZE bytes"
            exit 1
          fi

          if [ $FULL_SIZE -gt 61440 ]; then
            echo "Full bundle exceeds 60KB limit: $FULL_SIZE bytes"
            exit 1
          fi

          echo "Bundle sizes within limits:"
          echo "  Core: $CORE_SIZE bytes"
          echo "  Full: $FULL_SIZE bytes"

      - name: Upload bundle report
        uses: actions/upload-artifact@v4
        with:
          name: bundle-report
          path: reports/bundle/

  storybook-tests:
    name: Storybook Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: Build Storybook
        run: bun run build:storybook

      - name: Run Storybook tests
        run: |
          bunx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "bunx http-server apps/storybook/storybook-static --port 6006 --silent" \
            "bunx wait-on tcp:6006 && bun run test:storybook"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  quality-gate:
    name: Quality Gate
    needs:
      [
        lint,
        type-check,
        test,
        accessibility,
        build,
        bundle-analysis,
        storybook-tests,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.type-check.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.accessibility.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.bundle-analysis.result }}" != "success" || \
                "${{ needs.storybook-tests.result }}" != "success" ]]; then
            echo "One or more quality checks failed"
            exit 1
          fi
          echo "All quality checks passed!"

  preview-deploy:
    name: Preview Deployment
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy Storybook to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/storybook/storybook-static
          alias-domains: pr-{{PR_NUMBER}}.liquidify-storybook.vercel.app

      - name: Comment PR with preview links
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview Deployment Ready!**

              - ðŸ“š Storybook: https://pr-${{ github.event.pull_request.number }}.liquidify-storybook.vercel.app
              - ðŸ“Š Bundle Report: See artifacts in the [Actions tab](${{ github.event.pull_request.html_url }}/checks)
              - â™¿ Accessibility Report: See artifacts in the [Actions tab](${{ github.event.pull_request.html_url }}/checks)
              `
            })
