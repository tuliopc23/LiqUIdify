name: Build Configuration Validation

on:
  push:
    branches: [main, develop]
    paths:
      - "package.json"
      - "vite.config.mts"
      - "tsconfig*.json"
      - "apps/storybook/.storybook/main.ts"
      - "apps/docs/.vitepress/config.ts"
      - "libs/components/src/bundles/**"
      - ".github/workflows/build-validation.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "package.json"
      - "vite.config.mts"
      - "tsconfig*.json"
      - "apps/storybook/.storybook/main.ts"
      - "apps/docs/.vitepress/config.ts"
      - "libs/components/src/bundles/**"
      - ".github/workflows/build-validation.yml"

jobs:
  validate-config:
    runs-on: ubuntu-latest
    name: Validate Build Configuration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist
            .vitepress/cache
            apps/storybook/storybook-static
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run configuration validation
        run: bun run validate:build-config

      - name: TypeScript type checking
        run: bun run type-check

      - name: Build library
        run: bun run build:lib
        continue-on-error: false

      - name: Build Storybook
        run: bun run build:storybook
        continue-on-error: false

      - name: Build documentation
        run: bun run docs:build
        continue-on-error: true # TODO: Remove after resolving documentation strategy (tracked in ARCHITECTURE_DECISION.md)

      - name: Validate bundle outputs
        run: |
          echo "Checking if build outputs exist..."
          if [ -d dist/libs/components ]; then
            ls -la dist/libs/components/
          else
            echo "‚ùå Directory dist/libs/components is not yet created"
            exit 1
          fi

          # Check if main entry points exist
          test -f dist/libs/components/index.mjs || (echo "‚ùå Main ESM bundle missing" && exit 1)
          test -f dist/libs/components/index.cjs || (echo "‚ùå Main CJS bundle missing" && exit 1)
          test -f dist/libs/components/index.d.ts || (echo "‚ùå Main types missing" && exit 1)

          # Check if CSS is generated
          test -f dist/libs/components/liquidui.css || (echo "‚ùå CSS bundle missing" && exit 1)

          echo "‚úÖ All required bundle outputs exist"

      - name: Bundle size analysis
        run: |
          echo "Analyzing bundle sizes..."
          du -sh dist/libs/components/* | sort -hr

          # Check if bundles are reasonable size (< 500KB each)
          for file in dist/libs/components/*.mjs; do
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
            if [ $size -gt 512000 ]; then
              echo "‚ö†Ô∏è  Warning: $(basename $file) is larger than 500KB ($size bytes)"
            fi
          done

      - name: Dependency validation
        run: |
          echo "Validating dependencies..."

          # Check for peer dependency issues
          echo "Checking peer dependencies..."
          if bun install --dry-run 2>&1 | grep -i "peer"; then
            echo "‚ùå Peer dependency issues detected"
            exit 1
          else
            echo "‚úÖ No peer dependency issues"
          fi

          # Check for security vulnerabilities
          echo "Running security audit..."
          if ! bun audit --audit-level moderate; then
            echo "‚ùå Security vulnerabilities detected"
            exit 1
          else
            echo "‚úÖ Security audit passed"
          fi

      - name: Export validation
        run: |
          echo "Validating package.json exports..."

          # Create a simple export validation script inline
          cat > validate-exports.js << 'EOF'
          import { readFileSync, existsSync } from 'fs';
          import { resolve } from 'path';

          const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
          const exports = packageJson.exports;
          let hasErrors = false;

          console.log('üîç Validating package.json exports...');

          Object.entries(exports).forEach(([exportName, exportConfig]) => {
            if (typeof exportConfig === 'string') {
              // Simple string export (like CSS files)
              const filePath = exportConfig.replace('./', '');
              if (!existsSync(filePath)) {
                console.error(`‚ùå Export "${exportName}" points to missing file: ${filePath}`);
                hasErrors = true;
              }
            } else if (typeof exportConfig === 'object') {
              // Object export with types, import, require
              ['types', 'import', 'require'].forEach(key => {
                if (exportConfig[key]) {
                  const filePath = exportConfig[key].replace('./', '');
                  if (!existsSync(filePath)) {
                    console.error(`‚ùå Export "${exportName}.${key}" points to missing file: ${filePath}`);
                    hasErrors = true;
                  }
                }
              });
            }
          });

          if (hasErrors) {
            console.log('üí• Export validation failed!');
            process.exit(1);
          } else {
            console.log('‚úÖ All exports point to existing files');
          }
          EOF

          node validate-exports.js

      - name: Archive build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            reports/
            .vitepress/cache/
          retention-days: 7

      - name: Summary
        if: always()
        run: |
          echo "## Build Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ All build validation checks passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Configuration consistency: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- TypeScript compilation: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Library build: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Storybook build: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Bundle validation: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Build validation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for specific failures." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any configuration mismatches" >> $GITHUB_STEP_SUMMARY
          echo "- Fix TypeScript errors if any" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all bundle entries have corresponding exports" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture Decision**: Choose documentation strategy (see ARCHITECTURE_DECISION.md)" >> $GITHUB_STEP_SUMMARY

  validate-examples:
    runs-on: ubuntu-latest
    name: Validate Example Projects
    needs: validate-config
    if: success()
    outputs:
      nextjs-exists: ${{ steps.check-directories.outputs.nextjs-exists }}
      vite-exists: ${{ steps.check-directories.outputs.vite-exists }}

    strategy:
      matrix:
        example: [nextjs-example, vite-example]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check example directories
        id: check-directories
        run: |
          echo "Checking for example directories..."

          # Check for nextjs-example directory
          if [ -d "examples/nextjs-example" ]; then
            echo "‚úÖ examples/nextjs-example directory exists"
            echo "nextjs-exists=true" >> $GITHUB_OUTPUT
            echo "NEXTJS_EXISTS=true" >> $GITHUB_ENV
          else
            echo "‚ùå examples/nextjs-example directory not found"
            echo "nextjs-exists=false" >> $GITHUB_OUTPUT
            echo "NEXTJS_EXISTS=false" >> $GITHUB_ENV
          fi

          # Check for vite-example directory
          if [ -d "examples/vite-example" ]; then
            echo "‚úÖ examples/vite-example directory exists"
            echo "vite-exists=true" >> $GITHUB_OUTPUT
            echo "VITE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "‚ùå examples/vite-example directory not found"
            echo "vite-exists=false" >> $GITHUB_OUTPUT
            echo "VITE_EXISTS=false" >> $GITHUB_ENV
          fi

          # Store results for matrix strategy
          if [ "${{ matrix.example }}" = "nextjs-example" ] && [ "$NEXTJS_EXISTS" = "false" ]; then
            echo "‚ö†Ô∏è  Skipping nextjs-example as directory does not exist"
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          elif [ "${{ matrix.example }}" = "vite-example" ] && [ "$VITE_EXISTS" = "false" ]; then
            echo "‚ö†Ô∏è  Skipping vite-example as directory does not exist"
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Setup Bun
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install root dependencies
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: bun install --frozen-lockfile

      - name: Build library first
        if: ${{ env.SKIP_BUILD != 'true' }}
        run: bun run build:lib

      - name: Install example dependencies
        if: ${{ env.SKIP_BUILD != 'true' }}
        working-directory: examples/${{ matrix.example }}
        run: bun install --frozen-lockfile

      - name: Build example
        if: ${{ env.SKIP_BUILD != 'true' }}
        working-directory: examples/${{ matrix.example }}
        run: bun run build

      - name: Test example build output
        if: ${{ env.SKIP_BUILD != 'true' }}
        working-directory: examples/${{ matrix.example }}
        run: |
          # Check if build artifacts exist
          if [ -d "dist" ] || [ -d ".next" ] || [ -d "build" ]; then
            echo "‚úÖ ${{ matrix.example }} built successfully"
          else
            echo "‚ùå ${{ matrix.example }} build output not found"
            exit 1
          fi

      - name: Skip example build
        if: ${{ env.SKIP_BUILD == 'true' }}
        run: |
          echo "‚ö†Ô∏è  Skipping build for ${{ matrix.example }} - directory does not exist"
          echo "This is expected if the example has not been created yet."
