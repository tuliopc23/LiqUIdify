name: Performance Monitoring

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: '0 3 * * *'

jobs:
  performance-benchmarks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        browser: [chrome, firefox]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies with Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          source ~/.bashrc
          bun install

      - name: Build production bundle
        run: |
          source ~/.bashrc
          bun run build

      - name: Run S-Tier Performance Validation
        run: |
          source ~/.bashrc
          bun run test:performance
        env:
          NODE_ENV: production

      - name: Upload S-Tier validation reports
        uses: actions/upload-artifact@v4
        with:
          name: s-tier-validation-reports-node${{ matrix.node-version }}
          path: |
            dist/s-tier-validation-report.json
            dist/bundle-size-report.json
          retention-days: 30

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read S-tier validation results
            const reportPath = 'dist/s-tier-validation-report.json';
            if (!fs.existsSync(reportPath)) {
              console.log('No S-tier validation report found');
              return;
            }

            const results = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

            // Generate performance comment
            const comment = `## üöÄ S-Tier Performance Validation - Node ${{ matrix.node-version }}

            ### Overall Score: ${results.score}/100 ${results.passed ? '‚úÖ' : '‚ùå'}

            | Category | Score | Status | Details |
            |----------|-------|--------|---------|
            | Bundle Size | ${results.summary.bundleSize.score.toFixed(1)}/100 | ${results.summary.bundleSize.status === 'passed' ? '‚úÖ' : '‚ùå'} | ${results.checks.find(c => c.type === 'bundle-size')?.details?.total?.gzipSize ? `${(results.checks.find(c => c.type === 'bundle-size').details.total.gzipSize / 1024).toFixed(2)}KB` : 'N/A'} |
            | Render Performance | ${results.summary.renderPerformance.score.toFixed(1)}/100 | ${results.summary.renderPerformance.status === 'passed' ? '‚úÖ' : '‚ùå'} | ${results.checks.find(c => c.type === 'render-performance')?.details?.averageFPS?.toFixed(1) || 'N/A'}fps |
            | Memory Efficiency | ${results.summary.memoryEfficiency.score.toFixed(1)}/100 | ${results.summary.memoryEfficiency.status === 'passed' ? '‚úÖ' : '‚ùå'} | Controlled |

            ### S-Tier Requirements ‚úÖ
            - **Render time**: 55fps+ (Target met: ${results.checks.find(c => c.type === 'render-performance')?.details?.averageFPS > 55 ? '‚úÖ' : '‚ùå'})
            - **Bundle size**: <30kb total (Current: ${results.checks.find(c => c.type === 'bundle-size')?.details?.total ? `${(results.checks.find(c => c.type === 'bundle-size').details.total.gzipSize / 1024).toFixed(2)}KB ‚úÖ` : 'N/A'})
            - **Performance score**: >85 (Current: ${results.score}/100 ${results.score >= 85 ? '‚úÖ' : '‚ùå'})

            ${results.recommendations && results.recommendations.length > 0 ? `
            ### üìã Recommendations:
            ${results.recommendations.map(rec => `- **${rec.type}**: ${rec.suggestion}`).join('\n')}
            ` : ''}

            ${results.summary.overallCompliance.status === 'passed'
              ? 'üéâ **S-Tier compliance achieved!** All performance standards met.'
              : '‚ö†Ô∏è **S-Tier standards not fully met.** Please review recommendations above.'}

            [View detailed validation report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  bundle-size-performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies with Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          source ~/.bashrc
          bun install

      - name: Build and validate S-tier performance
        run: |
          source ~/.bashrc
          bun run build
          bun run bundle:budget:check

      - name: Run S-Tier bundle validation
        id: bundle-validation
        run: |
          source ~/.bashrc
          # Extract results from our S-tier validator
          node -e "
            const results = require('./dist/s-tier-validation-report.json');
            const bundleCheck = results.checks.find(c => c.type === 'bundle-size');
            
            if (!bundleCheck || bundleCheck.status !== 'passed') {
              console.log('‚ùå Bundle size validation failed');
              process.exit(1);
            }
            
            const total = bundleCheck.details.total;
            console.log(\`‚úÖ Bundle size validation passed: \${(total.gzipSize/1024).toFixed(2)}KB / 30KB\`);
            
            // Set outputs for GitHub Actions
            const fs = require('fs');
            const outputFile = process.env.GITHUB_OUTPUT;
            if (outputFile) {
              fs.appendFileSync(outputFile, \`bundle_size_kb=\${Math.round(total.gzipSize/1024)}\n\`);
              fs.appendFileSync(outputFile, \`validation_passed=true\n\`);
            }
          "

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            dist/s-tier-validation-report.json
            dist/bundle-size-report.json
          retention-days: 30

  memory-leak-detection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for testing
        run: npm run build

      - name: Setup Chrome with memory flags
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Run comprehensive memory leak detection
        run: |
          # Run with garbage collection exposed for accurate memory measurement
          npm run perf:memory-leak:comprehensive -- \
            --cycles=20 \
            --components=all \
            --timeout=300000 \
            --gc-exposed
        env:
          NODE_OPTIONS: "--expose-gc --max-old-space-size=4096"

      - name: Analyze memory growth patterns
        run: |
          node scripts/analyze-memory-patterns.js performance-reports/memory-leak-results.json

      - name: Check memory leak thresholds
        run: |
          # Fail if any component has memory leak > 1MB
          node -e "
            const results = require('./performance-reports/memory-leak-results.json');
            const failures = results.components.filter(c => c.leakRate > 1024 * 1024);
            if (failures.length > 0) {
              console.log('‚ùå Memory leak detected in:', failures.map(f => f.name).join(', '));
              process.exit(1);
            }
            console.log('‚úÖ No significant memory leaks detected');
          "

      - name: Upload memory analysis
        uses: actions/upload-artifact@v4
        with:
          name: memory-leak-analysis
          path: |
            performance-reports/memory-*.json
            performance-reports/memory-patterns.html
          retention-days: 30

  performance-regression-detection:
    runs-on: ubuntu-latest
    needs: [performance-benchmarks]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout main branch for comparison
        run: |
          git fetch origin main
          git checkout main
          npm ci
          npm run build:production
          npm run perf:benchmark -- --ci --output=main-baseline.json

      - name: Checkout PR branch
        run: |
          git checkout ${{ github.head_ref }}
          npm ci
          npm run build:production
          npm run perf:benchmark -- --ci --output=pr-results.json

      - name: Compare performance metrics
        id: compare
        run: |
          node scripts/compare-performance.js main-baseline.json pr-results.json > performance-comparison.md

      - name: Check for performance regressions
        run: |
          # Check if any component has >10% performance regression
          node -e "
            const fs = require('fs');
            const comparison = JSON.parse(fs.readFileSync('performance-comparison.json'));

            const regressions = comparison.regressions.filter(r => r.degradation > 10);
            if (regressions.length > 0) {
              console.log('‚ùå Performance regressions detected:');
              regressions.forEach(r => {
                console.log(\`  \${r.component}: \${r.metric} degraded by \${r.degradation}%\`);
              });
              process.exit(1);
            }
            console.log('‚úÖ No significant performance regressions');
          "

      - name: Comment PR with regression analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('performance-comparison.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comparison
            });

  real-world-performance-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build:production

      - name: Setup Playwright for real-world testing
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Run real-world performance scenarios
        run: |
          npm run perf:real-world -- \
            --scenarios=mobile-3g,mobile-4g,desktop,tablet \
            --users=1,5,10 \
            --duration=60 \
            --output=real-world-results.json

      - name: Validate Core Web Vitals
        run: |
          node scripts/validate-core-web-vitals.js real-world-results.json

      - name: Test with slow devices simulation
        run: |
          npm run perf:slow-devices -- \
            --cpu-throttling=4 \
            --memory-limit=512mb \
            --network=slow-3g

      - name: Generate performance score
        id: score
        run: |
          SCORE=$(node scripts/calculate-performance-score.js real-world-results.json)
          echo "performance_score=$SCORE" >> $GITHUB_OUTPUT

          if [ $SCORE -lt 85 ]; then
            echo "‚ùå Performance score $SCORE below S-tier threshold (85)"
            exit 1
          fi

          echo "‚úÖ Performance score: $SCORE (S-tier achieved)"

      - name: Upload real-world test results
        uses: actions/upload-artifact@v4
        with:
          name: real-world-performance
          path: |
            real-world-results.json
            performance-score-report.html
            core-web-vitals-report.json
          retention-days: 30

  performance-monitoring-summary:
    runs-on: ubuntu-latest
    needs: [performance-benchmarks, bundle-size-performance, memory-leak-detection, real-world-performance-validation]
    if: always()
    steps:
      - name: Download all performance artifacts
        uses: actions/download-artifact@v4
        with:
          path: performance-artifacts

      - name: Generate comprehensive performance report
        run: |
          node scripts/generate-performance-summary.js performance-artifacts/ > PERFORMANCE_SUMMARY.md

      - name: Upload performance summary
        uses: actions/upload-artifact@v4
        with:
          name: performance-summary
          path: PERFORMANCE_SUMMARY.md
          retention-days: 90

      - name: Update performance badge
        if: github.ref == 'refs/heads/main'
        run: |
          # Update performance badge in README
          node scripts/update-performance-badge.js

      - name: Send performance alert if needed
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Performance Monitoring Alert - S-Tier Standards Not Met',
              body: `## Performance Monitoring Alert

              **Date**: ${new Date().toISOString()}
              **Commit**: ${context.sha}
              **Build**: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              ‚ö†Ô∏è The automated performance monitoring detected that one or more performance targets have not been met.

              ### Performance Requirements (S-Tier):
              - Render time: 55fps
              - Bundle size: <30kb total
              - Performance score: >85

              ### Required Actions:
              1. Review the detailed performance reports in the workflow artifacts
              2. Identify and fix performance regressions
              3. Run local performance tests to verify fixes
              4. Ensure all S-tier performance targets are met

              ### Resources:
              - [Performance Optimization Guide](./docs/performance.md)
              - [Bundle Size Guidelines](./docs/bundle-optimization.md)
              - [Memory Leak Prevention](./docs/memory-management.md)

              This issue will be automatically closed when performance scores return to S-tier levels.`,
              labels: ['performance', 'priority-high', 's-tier', 'automated']
            };

            github.rest.issues.create(issue);
