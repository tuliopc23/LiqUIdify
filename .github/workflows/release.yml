name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

env:
  NODE_VERSION: '20.x'
  BUN_VERSION: 'latest'

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Check if pre-release
        id: check_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]] || [[ "$VERSION" =~ -(alpha|beta|rc|pre) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run quality checks
        run: |
          bun run lint
          bun run type-check
          bun test
          bun run test:integration
          bun run test:a11y

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Run security audit
        run: |
          bun audit
          bunx snyk test || true
      
      - name: Check licenses
        run: bunx license-checker --production --summary

  build-and-publish:
    name: Build and Publish
    needs: [validate-version, quality-checks, security-audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Update version
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          npm version $VERSION --no-git-tag-version
          echo "Updated package.json to version $VERSION"
      
      - name: Build library
        run: bun run build:lib
      
      - name: Run pre-publish checks
        run: bun run prepublishOnly
      
      - name: Create NPM package
        run: npm pack
      
      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../liquidify-components-*.tgz
          node -e "const lib = require('@liquidify/components'); console.log('Package installed successfully');"
      
      - name: Publish to NPM
        run: |
          if [[ "${{ needs.validate-version.outputs.is_prerelease }}" == "true" ]]; then
            npm publish --access public --tag next
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: liquidify-components-*.tgz

  build-assets:
    name: Build Release Assets
    needs: [validate-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build all assets
        run: |
          bun run build:lib
          bun run build:storybook
          bun run docs:build
      
      - name: Create release archives
        run: |
          tar -czf liquidify-components-dist.tar.gz dist/
          tar -czf liquidify-storybook.tar.gz apps/storybook/storybook-static/
          tar -czf liquidify-docs.tar.gz apps/docs/.vitepress/dist/
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            liquidify-components-dist.tar.gz
            liquidify-storybook.tar.gz
            liquidify-docs.tar.gz

  create-release:
    name: Create GitHub Release
    needs: [validate-version, build-and-publish, build-assets]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download release assets
        uses: actions/download-artifact@v4
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -z "$PREV_TAG" ]]; then
            echo "No previous tag found, including all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" | head -20)
          else
            echo "Previous tag: $PREV_TAG"
            CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)")
          fi
          
          # Format changelog
          FORMATTED_CHANGELOG="## What's Changed

### üöÄ Features
$(echo "$CHANGELOG" | grep -E "^- (feat|feature):" || echo "No new features")

### üêõ Bug Fixes
$(echo "$CHANGELOG" | grep -E "^- (fix|bugfix):" || echo "No bug fixes")

### üìö Documentation
$(echo "$CHANGELOG" | grep -E "^- (docs|doc):" || echo "No documentation changes")

### üßπ Maintenance
$(echo "$CHANGELOG" | grep -E "^- (chore|build|ci|refactor|style|test):" || echo "No maintenance changes")

## Installation

\`\`\`bash
npm install @liquidify/components@$VERSION
\`\`\`

## Full Changelog
$CHANGELOG"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: v${{ needs.validate-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}
          files: |
            release-assets/liquidify-components-dist.tar.gz
            release-assets/liquidify-storybook.tar.gz
            release-assets/liquidify-docs.tar.gz
            npm-package/liquidify-components-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-storybook:
    name: Deploy Storybook
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
      
      - name: Extract Storybook
        run: tar -xzf liquidify-storybook.tar.gz
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STORYBOOK_PROJECT_ID }}
          working-directory: ./apps/storybook/storybook-static
          vercel-args: '--prod'

  deploy-docs:
    name: Deploy Documentation
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
      
      - name: Extract documentation
        run: tar -xzf liquidify-docs.tar.gz
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_DOCS_PROJECT_ID }}
          working-directory: ./apps/docs/.vitepress/dist
          vercel-args: '--prod'

  notify-release:
    name: Notify Release
    needs: [validate-version, create-release, deploy-storybook, deploy-docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord notification
        if: ${{ success() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: |
            üéâ **LiqUIdify v${{ needs.validate-version.outputs.version }} Released!**
            
            üì¶ NPM: https://www.npmjs.com/package/@liquidify/components
            üìö Storybook: https://storybook.liquidify.dev
            üìñ Documentation: https://docs.liquidify.dev
            üêô GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-version.outputs.version }}
            
            Install with: `npm install @liquidify/components@${{ needs.validate-version.outputs.version }}`
      
      - name: Send failure notification
        if: ${{ failure() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: |
            ‚ùå **Release Failed for v${{ needs.validate-version.outputs.version }}**
            
            Check the workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  update-changelog:
    name: Update CHANGELOG.md
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create new entry
          NEW_ENTRY="## [${VERSION}] - ${DATE}

See the [release notes](https://github.com/${{ github.repository }}/releases/tag/v${VERSION}) for details.

"
          
          # Insert after the header
          sed -i '/# Changelog/a\\n'"$NEW_ENTRY" CHANGELOG.md
      
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for v${{ needs.validate-version.outputs.version }}"
          git push