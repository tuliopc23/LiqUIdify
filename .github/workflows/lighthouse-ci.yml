name: Lighthouse CI - Accessibility Monitoring
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC for continuous monitoring
    - cron: '0 2 * * *'

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          [
            { name: 'Home', path: '/', component: 'Landing' },
            {
              name: 'Components',
              path: '/components',
              component: 'ComponentShowcase',
            },
            {
              name: 'Playground',
              path: '/playground',
              component: 'Interactive',
            },
            { name: 'Forms', path: '/forms', component: 'FormComponents' },
            {
              name: 'Navigation',
              path: '/navigation',
              component: 'NavigationComponents',
            },
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Build Storybook for testing
        run: npm run build-storybook

      - name: Install Lighthouse CI and dependencies
        run: |
          npm install -g @lhci/cli@0.13.x
          npm install -g http-server

      - name: Start test server
        run: |
          http-server ./storybook-static -p 3000 --silent &
          sleep 10
          curl -f http://localhost:3000 || exit 1

      - name: Run Lighthouse CI - ${{ matrix.page.name }}
        run: |
          lhci autorun --config=lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          PAGE_PATH: ${{ matrix.page.path }}
          PAGE_NAME: ${{ matrix.page.name }}

      - name: Parse Lighthouse results
        id: lighthouse-results
        run: |
          # Parse the manifest.json to extract scores
          if [ -f ".lighthouseci/manifest.json" ]; then
            MANIFEST=$(cat .lighthouseci/manifest.json)
            ACCESSIBILITY_SCORE=$(echo $MANIFEST | jq -r '.[0].summary.accessibility')
            PERFORMANCE_SCORE=$(echo $MANIFEST | jq -r '.[0].summary.performance')
            BEST_PRACTICES_SCORE=$(echo $MANIFEST | jq -r '.[0].summary["best-practices"]')
            SEO_SCORE=$(echo $MANIFEST | jq -r '.[0].summary.seo')

            # Convert to percentage
            ACCESSIBILITY_PCT=$(echo "$ACCESSIBILITY_SCORE * 100" | bc -l | cut -d'.' -f1)
            PERFORMANCE_PCT=$(echo "$PERFORMANCE_SCORE * 100" | bc -l | cut -d'.' -f1)
            BEST_PRACTICES_PCT=$(echo "$BEST_PRACTICES_SCORE * 100" | bc -l | cut -d'.' -f1)
            SEO_PCT=$(echo "$SEO_SCORE * 100" | bc -l | cut -d'.' -f1)

            echo "accessibility_score=$ACCESSIBILITY_PCT" >> $GITHUB_OUTPUT
            echo "performance_score=$PERFORMANCE_PCT" >> $GITHUB_OUTPUT
            echo "best_practices_score=$BEST_PRACTICES_PCT" >> $GITHUB_OUTPUT
            echo "seo_score=$SEO_PCT" >> $GITHUB_OUTPUT

            # Check if accessibility meets S-tier requirement (95%+)
            if [ $ACCESSIBILITY_PCT -ge 95 ]; then
              echo "accessibility_status=✅ PASSED" >> $GITHUB_OUTPUT
            else
              echo "accessibility_status=❌ FAILED" >> $GITHUB_OUTPUT
            fi

            # Generate detailed accessibility report
            echo "## 🌟 S-Tier Accessibility Analysis - ${{ matrix.page.name }}" > accessibility-report.md
            echo "" >> accessibility-report.md
            echo "| Metric | Score | Status |" >> accessibility-report.md
            echo "|--------|-------|--------|" >> accessibility-report.md
            echo "| Accessibility | ${ACCESSIBILITY_PCT}% | $([ $ACCESSIBILITY_PCT -ge 95 ] && echo '✅ S-tier' || echo '❌ Below target') |" >> accessibility-report.md
            echo "| Performance | ${PERFORMANCE_PCT}% | $([ $PERFORMANCE_PCT -ge 90 ] && echo '✅ Excellent' || echo '⚠️ Needs improvement') |" >> accessibility-report.md
            echo "| Best Practices | ${BEST_PRACTICES_PCT}% | $([ $BEST_PRACTICES_PCT -ge 90 ] && echo '✅ Excellent' || echo '⚠️ Needs improvement') |" >> accessibility-report.md
            echo "| SEO | ${SEO_PCT}% | $([ $SEO_PCT -ge 90 ] && echo '✅ Excellent' || echo '⚠️ Needs improvement') |" >> accessibility-report.md
            echo "" >> accessibility-report.md

            if [ $ACCESSIBILITY_PCT -ge 95 ]; then
              echo "🎉 **S-Tier Status**: Accessibility target achieved!" >> accessibility-report.md
            else
              echo "⚠️ **Action Required**: Accessibility score below 95% S-tier target" >> accessibility-report.md
              echo "" >> accessibility-report.md
              echo "### Accessibility Issues to Address:" >> accessibility-report.md

              # Extract specific accessibility violations from the JSON report
              if [ -f ".lighthouseci/lhr-*.json" ]; then
                LATEST_REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)
                cat $LATEST_REPORT | jq -r '.audits | to_entries[] | select(.value.score != null and .value.score < 1 and (.key | contains("accessibility") or .key | contains("aria") or .key | contains("color") or .key | contains("focus"))) | "- **\(.key)**: \(.value.title) (Score: \(.value.score))"' >> accessibility-report.md || true
              fi
            fi
          else
            echo "❌ Lighthouse report not found" >> accessibility-report.md
          fi

      - name: Extract accessibility violations
        if: steps.lighthouse-results.outputs.accessibility_score < 95
        run: |
          # Create detailed accessibility violation report
          echo "## 🔍 Detailed Accessibility Analysis" > violations-${{ matrix.page.name }}.md
          echo "" >> violations-${{ matrix.page.name }}.md

          if [ -f ".lighthouseci/lhr-*.json" ]; then
            LATEST_REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)

            # Extract color contrast issues
            echo "### Color Contrast Issues" >> violations-${{ matrix.page.name }}.md
            cat $LATEST_REPORT | jq -r '.audits["color-contrast"] | if .details and .details.items then .details.items[] | "- Element: `\(.node.snippet // .node.selector)` - Contrast ratio: \(.contrastRatio)" else "No color contrast issues found" end' >> violations-${{ matrix.page.name }}.md || echo "No color contrast data available" >> violations-${{ matrix.page.name }}.md
            echo "" >> violations-${{ matrix.page.name }}.md

            # Extract ARIA issues
            echo "### ARIA Issues" >> violations-${{ matrix.page.name }}.md
            cat $LATEST_REPORT | jq -r '.audits | to_entries[] | select(.key | contains("aria")) | select(.value.score != null and .value.score < 1) | "- **\(.key)**: \(.value.title)"' >> violations-${{ matrix.page.name }}.md || echo "No ARIA issues found" >> violations-${{ matrix.page.name }}.md
            echo "" >> violations-${{ matrix.page.name }}.md

            # Extract keyboard navigation issues
            echo "### Keyboard Navigation Issues" >> violations-${{ matrix.page.name }}.md
            cat $LATEST_REPORT | jq -r '.audits | to_entries[] | select(.key | contains("focus") or .key | contains("tabindex")) | select(.value.score != null and .value.score < 1) | "- **\(.key)**: \(.value.title)"' >> violations-${{ matrix.page.name }}.md || echo "No keyboard navigation issues found" >> violations-${{ matrix.page.name }}.md
          fi

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ matrix.page.name }}
          path: |
            .lighthouseci/
            accessibility-report.md
            violations-${{ matrix.page.name }}.md
          retention-days: 30

      - name: Store accessibility metrics
        run: |
          # Store metrics for trend analysis
          mkdir -p .accessibility-metrics
          echo "{ \"date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"page\": \"${{ matrix.page.name }}\", \"accessibility\": ${{ steps.lighthouse-results.outputs.accessibility_score }}, \"performance\": ${{ steps.lighthouse-results.outputs.performance_score }}, \"commit\": \"${{ github.sha }}\" }" > .accessibility-metrics/${{ matrix.page.name }}-$(date +%Y%m%d-%H%M%S).json

      - name: Upload accessibility metrics
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-metrics-${{ matrix.page.name }}
          path: .accessibility-metrics/
          retention-days: 90

  accessibility-summary:
    needs: lighthouse
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all accessibility reports
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-reports-*
          merge-multiple: true

      - name: Download all accessibility metrics
        uses: actions/download-artifact@v4
        with:
          pattern: accessibility-metrics-*
          merge-multiple: true

      - name: Generate comprehensive accessibility report
        run: |
          echo "# 🌟 LiqUIdify S-Tier Accessibility Report" > comprehensive-accessibility-report.md
          echo "" >> comprehensive-accessibility-report.md
          echo "**Generated**: $(date -u)" >> comprehensive-accessibility-report.md
          echo "**Commit**: ${{ github.sha }}" >> comprehensive-accessibility-report.md
          echo "**Target**: 95%+ Accessibility Score (S-Tier)" >> comprehensive-accessibility-report.md
          echo "" >> comprehensive-accessibility-report.md

          # Combine all individual reports
          for report in accessibility-report.md; do
            if [ -f "$report" ]; then
              cat "$report" >> comprehensive-accessibility-report.md
              echo "" >> comprehensive-accessibility-report.md
            fi
          done

          # Add trend analysis if metrics exist
          if [ -d ".accessibility-metrics" ] && [ "$(ls -A .accessibility-metrics)" ]; then
            echo "## 📈 Accessibility Trends" >> comprehensive-accessibility-report.md
            echo "" >> comprehensive-accessibility-report.md
            echo "| Page | Current Score | Trend |" >> comprehensive-accessibility-report.md
            echo "|------|---------------|-------|" >> comprehensive-accessibility-report.md

            for page in Home Components Playground Forms Navigation; do
              LATEST_SCORE=$(find .accessibility-metrics -name "${page}-*.json" | sort | tail -1 | xargs cat 2>/dev/null | jq -r '.accessibility' || echo "N/A")
              if [ "$LATEST_SCORE" != "N/A" ]; then
                if [ "$LATEST_SCORE" -ge 95 ]; then
                  TREND="✅ S-tier"
                elif [ "$LATEST_SCORE" -ge 90 ]; then
                  TREND="⚠️ Close to target"
                else
                  TREND="❌ Needs improvement"
                fi
                echo "| $page | ${LATEST_SCORE}% | $TREND |" >> comprehensive-accessibility-report.md
              fi
            done
          fi

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-accessibility-report
          path: comprehensive-accessibility-report.md
          retention-days: 90

      - name: Comment PR with accessibility results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '';

            try {
              const report = fs.readFileSync('comprehensive-accessibility-report.md', 'utf8');
              comment = report;
            } catch (error) {
              comment = `## 🌟 Accessibility Monitoring

              ⚠️ Unable to generate comprehensive report. Please check individual page reports in the workflow artifacts.

              **S-Tier Target**: 95%+ Accessibility Score

              [View detailed results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if accessibility targets not met
        run: |
          # Check if any page failed the 95% accessibility target
          FAILED_PAGES=""
          for report in accessibility-report.md; do
            if [ -f "$report" ] && grep -q "❌ FAILED" "$report"; then
              PAGE=$(echo "$report" | sed 's/accessibility-report-\(.*\)\.md/\1/')
              FAILED_PAGES="$FAILED_PAGES $PAGE"
            fi
          done

          if [ -n "$FAILED_PAGES" ]; then
            echo "❌ Accessibility targets not met for pages:$FAILED_PAGES"
            echo "S-Tier requirement: 95%+ accessibility score"
            exit 1
          else
            echo "✅ All pages meet S-Tier accessibility requirements!"
          fi

  accessibility-monitoring:
    needs: accessibility-summary
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Only run on scheduled builds for monitoring
    steps:
      - name: Send accessibility alert
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Accessibility Monitoring Alert - S-Tier Standards Not Met',
              body: `## Automated Accessibility Monitoring Alert

              **Date**: ${new Date().toISOString()}
              **Build**: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              ⚠️ The scheduled accessibility monitoring detected that one or more pages have fallen below the 95% S-tier accessibility target.

              ### Required Actions:
              1. Review the detailed accessibility report in the workflow artifacts
              2. Address the identified accessibility violations
              3. Test fixes with screen readers and keyboard navigation
              4. Ensure all components maintain WCAG 2.1 AA compliance

              ### Resources:
              - [Accessibility Guidelines](./docs/accessibility.md)
              - [WCAG 2.1 Quick Reference](https://www.w3.org/WAI/WCAG21/quickref/)
              - [Testing with Screen Readers](./docs/testing-accessibility.md)

              This issue will be automatically closed when accessibility scores return to S-tier levels.`,
              labels: ['accessibility', 'priority-high', 's-tier', 'automated']
            };

            github.rest.issues.create(issue);
