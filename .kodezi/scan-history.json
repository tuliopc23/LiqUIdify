[
  {
    "id": "1754528165963",
    "timestamp": "2025-08-07T00:56:05.963Z",
    "title": "Scan of .",
    "projectPath": ".",
    "issueCount": 1799,
    "issues": [
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts",
        "line": 22,
        "column": 9,
        "message": "Synchronous glob.sync() can block the build process. Consider using async glob() for better performance",
        "description": "Synchronous glob.sync() can block the build process. Consider using async glob() for better performance This implementation could impact application performance.",
        "suggestion": "Use async glob() instead of glob.sync() to avoid blocking the build process",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts",
        "line": 10,
        "column": 5,
        "message": "Using rolldown: true which is experimental and may cause build issues",
        "description": "Using rolldown: true which is experimental and may cause build issues This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Consider removing rolldown: true unless specifically needed, as it's experimental",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Consider removing rolldown: true unless specifically needed, as it's experimental",
          "content": ""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts",
        "line": 11,
        "column": 5,
        "message": "Using oxc minifier which is experimental and may not be stable",
        "description": "Using oxc minifier which is experimental and may not be stable This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Consider using 'terser' or 'esbuild' for more stable minification",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    minify: 'esbuild',",
          "description": "Consider using 'terser' or 'esbuild' for more stable minification",
          "content": "    minify: 'esbuild',"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vite.config.ts",
        "line": 38,
        "column": 11,
        "message": "Potential runtime error: fileURLToPath with import.meta.url may not work correctly with relative paths in this context",
        "description": "Potential runtime error: fileURLToPath with import.meta.url may not work correctly with relative paths in this context This will likely cause errors during execution.",
        "suggestion": "Use path.resolve() with __dirname equivalent or adjust the path construction",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          path.resolve('libs/components', file)",
          "description": "Use path.resolve() with __dirname equivalent or adjust the path construction",
          "content": "          path.resolve('libs/components', file)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json",
        "line": 9,
        "column": 20,
        "message": "Invalid runtime 'vercel@edge' for functions, should be 'edge'",
        "description": "Invalid runtime 'vercel@edge' for functions, should be 'edge' This will likely cause errors during execution.",
        "suggestion": "Change runtime from 'vercel@edge' to 'edge'",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "\"edge\"",
          "description": "Change runtime from 'vercel@edge' to 'edge'",
          "content": "\"edge\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json",
        "line": 68,
        "column": 19,
        "message": "Content-Security-Policy is too restrictive and only covers frame-ancestors, missing other important directives",
        "description": "Content-Security-Policy is too restrictive and only covers frame-ancestors, missing other important directives This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add comprehensive CSP directives including default-src, script-src, style-src, etc.",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "\"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'\"",
          "description": "Add comprehensive CSP directives including default-src, script-src, style-src, etc.",
          "content": "\"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json-architecture-2",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json",
        "line": 4,
        "column": 3,
        "message": "Redundant build configuration - buildCommand and outputDirectory are specified both at root level and in builds config",
        "description": "Redundant build configuration - buildCommand and outputDirectory are specified both at root level and in builds config This code works but could be improved for better maintainability.",
        "suggestion": "Remove redundant root-level buildCommand and outputDirectory since they're specified in builds config",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json-architecture-3",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json",
        "line": 3,
        "column": 3,
        "message": "Redundant installCommand specified both at root level and in builds config",
        "description": "Redundant installCommand specified both at root level and in builds config This code works but could be improved for better maintainability.",
        "suggestion": "Remove redundant root-level installCommand since it's specified in builds config",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json-architecture-4",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/vercel.json",
        "line": 126,
        "column": 5,
        "message": "Useless rewrite rule that maps source to the same destination",
        "description": "Useless rewrite rule that maps source to the same destination This code works but could be improved for better maintainability.",
        "suggestion": "Remove the redundant rewrite rule as it doesn't change the path",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.json-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.json",
        "line": 1,
        "column": 1,
        "message": "JSON file should be formatted with proper indentation and line breaks for better readability",
        "description": "JSON file should be formatted with proper indentation and line breaks for better readability This violates code style conventions and may reduce readability.",
        "suggestion": "Format the JSON with proper indentation and line breaks",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"allowImportingTsExtensions\": false,\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"baseUrl\": \".\",\n    \"esModuleInterop\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react-jsx\",\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"paths\": {\n      \"@/*\": [\"libs/components/src/*\"],\n      \"@/components/*\": [\"libs/components/src/components/*\"],\n      \"@/core/*\": [\"libs/components/src/core/*\"],\n      \"@/hooks/*\": [\"libs/components/src/hooks/*\"],\n      \"@/types/*\": [\"libs/components/src/types/*\"],\n      \"@liquidify/components\": [\"libs/components/src/index.ts\"]\n    },\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"strictBindCallApply\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"strictPropertyInitialization\": false,\n    \"target\": \"ESNext\"\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"tmp\",\n    \"dist\",\n    \"examples/**/*\",\n    \"apps/docs/**/*\",\n    \"**/*.stories.*\",\n    \"**/*.test.*\",\n    \"**/*.spec.*\"\n  ]\n}",
          "description": "Format the JSON with proper indentation and line breaks",
          "content": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"allowImportingTsExtensions\": false,\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"baseUrl\": \".\",\n    \"esModuleInterop\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react-jsx\",\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"paths\": {\n      \"@/*\": [\"libs/components/src/*\"],\n      \"@/components/*\": [\"libs/components/src/components/*\"],\n      \"@/core/*\": [\"libs/components/src/core/*\"],\n      \"@/hooks/*\": [\"libs/components/src/hooks/*\"],\n      \"@/types/*\": [\"libs/components/src/types/*\"],\n      \"@liquidify/components\": [\"libs/components/src/index.ts\"]\n    },\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"strictBindCallApply\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"strictPropertyInitialization\": false,\n    \"target\": \"ESNext\"\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"tmp\",\n    \"dist\",\n    \"examples/**/*\",\n    \"apps/docs/**/*\",\n    \"**/*.stories.*\",\n    \"**/*.test.*\",\n    \"**/*.spec.*\"\n  ]\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.json-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.json",
        "line": 1,
        "column": 1,
        "message": "Consider adding 'declaration' and 'declarationMap' options for better development experience in a component library",
        "description": "Consider adding 'declaration' and 'declarationMap' options for better development experience in a component library This implementation could impact application performance.",
        "suggestion": "Add 'declaration': true and 'declarationMap': true to generate type declaration files",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "declaration",
          "description": "Add 'declaration': true and 'declarationMap': true to generate type declaration files",
          "content": "declaration"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.build.json-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.build.json",
        "line": 5,
        "column": 9,
        "message": "Conflicting TypeScript compiler options: 'emitDeclarationOnly' and 'noEmit' cannot both be true",
        "description": "Conflicting TypeScript compiler options: 'emitDeclarationOnly' and 'noEmit' cannot both be true This will likely cause errors during execution.",
        "suggestion": "Remove 'noEmit: true' since 'emitDeclarationOnly: true' already controls emission",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        \"emitDeclarationOnly\": true,",
          "description": "Remove 'noEmit: true' since 'emitDeclarationOnly: true' already controls emission",
          "content": "        \"emitDeclarationOnly\": true,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.base.json-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.base.json",
        "line": 1,
        "column": 1,
        "message": "JSON configuration file lacks proper formatting and readability",
        "description": "JSON configuration file lacks proper formatting and readability This violates code style conventions and may reduce readability.",
        "suggestion": "Format JSON with proper indentation and line breaks for better readability",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ESNext\"\n  }\n}",
          "description": "Format JSON with proper indentation and line breaks for better readability",
          "content": "{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ESNext\"\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.base.json-architecture-1",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tsconfig.base.json",
        "line": 1,
        "column": 21,
        "message": "Missing 'isolatedModules' option which is recommended for TypeScript projects using bundlers",
        "description": "Missing 'isolatedModules' option which is recommended for TypeScript projects using bundlers This code works but could be improved for better maintainability.",
        "suggestion": "Add 'isolatedModules': true to compilerOptions for better compatibility with bundlers",
        "rule": "architecture",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ESNext\"\n  }\n}",
          "description": "Add 'isolatedModules': true to compilerOptions for better compatibility with bundlers",
          "content": "{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ESNext\"\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 139,
        "column": 25,
        "message": "Multi-line string in boxShadow should use array format for better readability",
        "description": "Multi-line string in boxShadow should use array format for better readability This violates code style conventions and may reduce readability.",
        "suggestion": "Use array format or single-line string for CSS shadow values",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "\"inset -10px -8px 0px -11px rgba(255, 255, 255, 1), inset 0px -9px 0px -8px rgba(255, 255, 255, 1)\"",
          "description": "Use array format or single-line string for CSS shadow values",
          "content": "\"inset -10px -8px 0px -11px rgba(255, 255, 255, 1), inset 0px -9px 0px -8px rgba(255, 255, 255, 1)\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 255,
        "column": 9,
        "message": "Excessive use of pseudo-element ::after with complex filters may impact performance",
        "description": "Excessive use of pseudo-element ::after with complex filters may impact performance This implementation could impact application performance.",
        "suggestion": "Consider using CSS custom properties or reducing filter complexity",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-architecture-2",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 258,
        "column": 25,
        "message": "Hardcoded color values in CSS utilities reduce theme flexibility",
        "description": "Hardcoded color values in CSS utilities reduce theme flexibility This code works but could be improved for better maintainability.",
        "suggestion": "Use theme colors instead of hardcoded rgba values",
        "rule": "architecture",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "background: theme(\"colors.liquid.bg\")",
          "description": "Use theme colors instead of hardcoded rgba values",
          "content": "background: theme(\"colors.liquid.bg\")"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 334,
        "column": 9,
        "message": "User interaction pseudo-classes missing focus-visible states for keyboard navigation",
        "description": "User interaction pseudo-classes missing focus-visible states for keyboard navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add focus-visible styles for better keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "\n        \".liquid-glass-interactive:focus-visible\": {\n          outline: `2px solid ${theme(\"colors.liquid.accent\")}`,\n          outlineOffset: \"2px\",\n        },",
          "description": "Add focus-visible styles for better keyboard accessibility",
          "content": "\n        \".liquid-glass-interactive:focus-visible\": {\n          outline: `2px solid ${theme(\"colors.liquid.accent\")}`,\n          outlineOffset: \"2px\",\n        },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 363,
        "column": 11,
        "message": "Inconsistent use of @apply directive mixing with regular CSS properties",
        "description": "Inconsistent use of @apply directive mixing with regular CSS properties This violates code style conventions and may reduce readability.",
        "suggestion": "Either use @apply consistently or regular CSS properties, avoid mixing",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 261,
        "column": 23,
        "message": "Complex box-shadow calculations in theme function calls may impact build performance",
        "description": "Complex box-shadow calculations in theme function calls may impact build performance This implementation could impact application performance.",
        "suggestion": "Pre-calculate shadow values or use CSS custom properties",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.ts",
        "line": 236,
        "column": 9,
        "message": "Missing high contrast mode considerations for glass effects",
        "description": "Missing high contrast mode considerations for glass effects This code works but could be improved for better maintainability.",
        "suggestion": "Add @media (prefers-contrast: high) queries to provide fallback styles",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js",
        "line": 49,
        "column": 9,
        "message": "Duplicate class definition for '.glass-liquid' - the second definition will override the first one completely",
        "description": "Duplicate class definition for '.glass-liquid' - the second definition will override the first one completely This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Merge the two .glass-liquid definitions or rename one of them to avoid conflicts",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        \".glass-liquid\": {\n          \"@apply relative overflow-hidden glass\": {},\n          \"&::before\": {\n            content: '\"\"',\n            \"@apply absolute inset-0 z-1 bg-gradient-to-br from-white/20 to-transparent rounded-inherit\":\n              {},\n          },\n          \"&::after\": {\n            content: '\"\"',\n            \"@apply absolute inset-0 z-2 bg-gradient-to-tl from-white/10 to-transparent rounded-inherit\":\n              {},\n          },\n        },",
          "description": "Merge the two .glass-liquid definitions or rename one of them to avoid conflicts",
          "content": "        \".glass-liquid\": {\n          \"@apply relative overflow-hidden glass\": {},\n          \"&::before\": {\n            content: '\"\"',\n            \"@apply absolute inset-0 z-1 bg-gradient-to-br from-white/20 to-transparent rounded-inherit\":\n              {},\n          },\n          \"&::after\": {\n            content: '\"\"',\n            \"@apply absolute inset-0 z-2 bg-gradient-to-tl from-white/10 to-transparent rounded-inherit\":\n              {},\n          },\n        },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js",
        "line": 26,
        "column": 68,
        "message": "Inconsistent custom property naming - 'saturate-120' and 'brightness-115' use non-standard Tailwind utilities that may not exist",
        "description": "Inconsistent custom property naming - 'saturate-120' and 'brightness-115' use non-standard Tailwind utilities that may not exist This violates code style conventions and may reduce readability.",
        "suggestion": "Use standard Tailwind utilities like 'saturate-150' and 'brightness-110' or define custom utilities in the theme",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js",
        "line": 27,
        "column": 68,
        "message": "Non-standard Tailwind utility 'rounded-inherit' may not exist in default Tailwind configuration",
        "description": "Non-standard Tailwind utility 'rounded-inherit' may not exist in default Tailwind configuration This violates code style conventions and may reduce readability.",
        "suggestion": "Define 'rounded-inherit' in the theme configuration or use a standard border radius utility",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js",
        "line": 26,
        "column": 107,
        "message": "Non-standard z-index values (z-0, z-1, z-2, z-3) may not exist in default Tailwind configuration",
        "description": "Non-standard z-index values (z-0, z-1, z-2, z-3) may not exist in default Tailwind configuration This violates code style conventions and may reduce readability.",
        "suggestion": "Use standard Tailwind z-index utilities (z-0, z-10, z-20, z-30) or define custom z-index values in theme",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tailwind.config.js",
        "line": 24,
        "column": 149,
        "message": "Non-standard duration value 'duration-400' may not exist in default Tailwind configuration",
        "description": "Non-standard duration value 'duration-400' may not exist in default Tailwind configuration This violates code style conventions and may reduce readability.",
        "suggestion": "Use standard Tailwind duration values like 'duration-300' or 'duration-500', or define custom duration in theme",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "duration-300",
          "description": "Use standard Tailwind duration values like 'duration-300' or 'duration-500', or define custom duration in theme",
          "content": "duration-300"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/package.json-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/package.json",
        "line": 116,
        "column": 3,
        "message": "React and react-dom should be in dependencies for SSR compatibility, not just peerDependencies",
        "description": "React and react-dom should be in dependencies for SSR compatibility, not just peerDependencies This implementation could impact application performance.",
        "suggestion": "Move React dependencies to dependencies section or add them there as well for better SSR support",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/package.json-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/package.json",
        "line": 125,
        "column": 3,
        "message": "Pinning exact versions in resolutions can prevent security updates",
        "description": "Pinning exact versions in resolutions can prevent security updates This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Use version ranges (e.g., '^8.12.0') instead of exact versions to allow security patches",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  \"resolutions\": {\n    \"ajv\": \"^8.12.0\",\n    \"ajv-draft-04\": \"^1.0.0\"\n  },",
          "description": "Use version ranges (e.g., '^8.12.0') instead of exact versions to allow security patches",
          "content": "  \"resolutions\": {\n    \"ajv\": \"^8.12.0\",\n    \"ajv-draft-04\": \"^1.0.0\"\n  },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/package.json-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/package.json",
        "line": 1,
        "column": 1,
        "message": "Missing 'preferUnplugged' field for better performance in Yarn PnP environments",
        "description": "Missing 'preferUnplugged' field for better performance in Yarn PnP environments This implementation could impact application performance.",
        "suggestion": "Add 'preferUnplugged: false' to improve performance in Yarn PnP setups",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "  \"preferUnplugged\": false,",
          "description": "Add 'preferUnplugged: false' to improve performance in Yarn PnP setups",
          "content": "  \"preferUnplugged\": false,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/package.json-structure-3",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/package.json",
        "line": 1,
        "column": 1,
        "message": "Missing 'publishConfig' for npm publishing configuration",
        "description": "Missing 'publishConfig' for npm publishing configuration This code works but could be improved for better maintainability.",
        "suggestion": "Add publishConfig to ensure proper npm registry settings",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "  \"publishConfig\": {\n    \"access\": \"public\"\n  },",
          "description": "Add publishConfig to ensure proper npm registry settings",
          "content": "  \"publishConfig\": {\n    \"access\": \"public\"\n  },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/package.json-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/package.json",
        "line": 47,
        "column": 3,
        "message": "Large number of individual component exports may impact tree-shaking efficiency",
        "description": "Large number of individual component exports may impact tree-shaking efficiency This implementation could impact application performance.",
        "suggestion": "Consider grouping related components into category exports to reduce bundle size",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 135,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Core Bundle\" icon=\"circle\" aria-label=\"Core bundle information\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Core Bundle\" icon=\"circle\" aria-label=\"Core bundle information\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 141,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Forms Bundle\" icon=\"square\" aria-label=\"Forms bundle information\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Forms Bundle\" icon=\"square\" aria-label=\"Forms bundle information\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 147,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Navigation Bundle\" icon=\"compass\" aria-label=\"Navigation bundle information\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Navigation Bundle\" icon=\"compass\" aria-label=\"Navigation bundle information\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 153,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Full Bundle\" icon=\"grid-3x3\" aria-label=\"Full bundle information\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Full Bundle\" icon=\"grid-3x3\" aria-label=\"Full bundle information\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 185,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Browse Components\" icon=\"grid-3x3\" href=\"/components/button\" aria-label=\"Browse components documentation\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Browse Components\" icon=\"grid-3x3\" href=\"/components/button\" aria-label=\"Browse components documentation\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 189,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Theming Guide\" icon=\"palette\" href=\"/theming\" aria-label=\"Theming customization guide\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Theming Guide\" icon=\"palette\" href=\"/theming\" aria-label=\"Theming customization guide\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 196,
        "column": 3,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card\n  title=\"Accessibility\"\n  icon=\"universal-access\"\n  href=\"/guides/accessibility\"\n  aria-label=\"Accessibility features guide\"\n>",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card\n  title=\"Accessibility\"\n  icon=\"universal-access\"\n  href=\"/guides/accessibility\"\n  aria-label=\"Accessibility features guide\"\n>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 201,
        "column": 25,
        "message": "Missing alt text or aria-label for icon elements in Card components",
        "description": "Missing alt text or aria-label for icon elements in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon props for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Examples\" icon=\"code\" href=\"https://storybook.liquidify.dev\" aria-label=\"Interactive component examples\">",
          "description": "Add descriptive aria-label attributes to icon props for screen readers",
          "content": "<Card title=\"Examples\" icon=\"code\" href=\"https://storybook.liquidify.dev\" aria-label=\"Interactive component examples\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/quickstart.mdx",
        "line": 201,
        "column": 44,
        "message": "External link to storybook.liquidify.dev should include rel=\"noopener noreferrer\" for security and performance",
        "description": "External link to storybook.liquidify.dev should include rel=\"noopener noreferrer\" for security and performance This implementation could impact application performance.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links for security and performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"Examples\" icon=\"code\" href=\"https://storybook.liquidify.dev\" rel=\"noopener noreferrer\" aria-label=\"Interactive component examples\">",
          "description": "Add rel=\"noopener noreferrer\" to external links for security and performance",
          "content": "<Card title=\"Examples\" icon=\"code\" href=\"https://storybook.liquidify.dev\" rel=\"noopener noreferrer\" aria-label=\"Interactive component examples\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx",
        "line": 72,
        "column": 1,
        "message": "Missing alt text or aria-label for icons in Card components",
        "description": "Missing alt text or aria-label for icons in Card components This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon elements for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx",
        "line": 99,
        "column": 1,
        "message": "Missing alt text or aria-label for icons in component statistics section",
        "description": "Missing alt text or aria-label for icons in component statistics section This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon elements for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx",
        "line": 160,
        "column": 1,
        "message": "Missing alt text or aria-label for icons in next steps section",
        "description": "Missing alt text or aria-label for icons in next steps section This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive aria-label attributes to icon elements for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/introduction.mdx",
        "line": 122,
        "column": 3,
        "message": "Inconsistent spacing in Accordion content formatting",
        "description": "Inconsistent spacing in Accordion content formatting This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent formatting for list items within Accordion components",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Accordion title=\"Core Components\">\n  - **GlassButton**: Primary, secondary, ghost, and destructive variants\n  - **GlassCard**: Elevated, flat, and interactive cards with compound components\n  - **GlassInput**: Text inputs with validation and error states\n  - **GlassModal**: Accessible modals with focus trap and backdrop\n</Accordion>\n\n<Accordion title=\"Form Components\">\n  - **GlassCheckbox**: Single and group checkboxes with indeterminate states\n  - **GlassRadioGroup**: Radio button groups with custom styling\n  - **GlassSelect**: Dropdown selects with search and multi-select\n  - **GlassTextarea**: Resizable text areas with character counting\n  - **GlassFileUpload**: Drag-and-drop file uploads with progress\n</Accordion>\n\n<Accordion title=\"Layout & Navigation\">\n  - **GlassAccordion**: Collapsible content sections\n  - **GlassBreadcrumbs**: Navigation breadcrumbs with separators\n  - **GlassTabs**: Horizontal and vertical tab navigation\n  - **GlassNavbar**: Responsive navigation with mobile support\n  - **GlassSidebar**: Collapsible sidebar navigation\n</Accordion>\n\n<Accordion title=\"Feedback & Data\">\n  - **GlassAlert**: Success, warning, error, and info alerts\n  - **GlassToast**: Non-blocking notifications with auto-dismiss\n  - **GlassProgress**: Linear and circular progress indicators\n  - **GlassTable**: Sortable, filterable data tables\n  - **GlassSkeleton**: Loading placeholders with animation\n</Accordion>",
          "description": "Use consistent formatting for list items within Accordion components",
          "content": "<Accordion title=\"Core Components\">\n  - **GlassButton**: Primary, secondary, ghost, and destructive variants\n  - **GlassCard**: Elevated, flat, and interactive cards with compound components\n  - **GlassInput**: Text inputs with validation and error states\n  - **GlassModal**: Accessible modals with focus trap and backdrop\n</Accordion>\n\n<Accordion title=\"Form Components\">\n  - **GlassCheckbox**: Single and group checkboxes with indeterminate states\n  - **GlassRadioGroup**: Radio button groups with custom styling\n  - **GlassSelect**: Dropdown selects with search and multi-select\n  - **GlassTextarea**: Resizable text areas with character counting\n  - **GlassFileUpload**: Drag-and-drop file uploads with progress\n</Accordion>\n\n<Accordion title=\"Layout & Navigation\">\n  - **GlassAccordion**: Collapsible content sections\n  - **GlassBreadcrumbs**: Navigation breadcrumbs with separators\n  - **GlassTabs**: Horizontal and vertical tab navigation\n  - **GlassNavbar**: Responsive navigation with mobile support\n  - **GlassSidebar**: Collapsible sidebar navigation\n</Accordion>\n\n<Accordion title=\"Feedback & Data\">\n  - **GlassAlert**: Success, warning, error, and info alerts\n  - **GlassToast**: Non-blocking notifications with auto-dismiss\n  - **GlassProgress**: Linear and circular progress indicators\n  - **GlassTable**: Sortable, filterable data tables\n  - **GlassSkeleton**: Loading placeholders with animation\n</Accordion>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json",
        "line": 121,
        "column": 23,
        "message": "Google Analytics measurement ID appears to be a placeholder value",
        "description": "Google Analytics measurement ID appears to be a placeholder value This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace placeholder GA4 measurement ID with actual tracking ID or remove analytics configuration",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json",
        "line": 132,
        "column": 16,
        "message": "Intercom app ID appears to be a placeholder value",
        "description": "Intercom app ID appears to be a placeholder value This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace placeholder Intercom app ID with actual app ID or remove integration",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json",
        "line": 19,
        "column": 11,
        "message": "Topbar CTA button links to Mintlify dashboard instead of LiqUIdify dashboard",
        "description": "Topbar CTA button links to Mintlify dashboard instead of LiqUIdify dashboard This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Update URL to point to LiqUIdify dashboard instead of Mintlify's",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    \"url\": \"https://dashboard.liquidify.dev\"",
          "description": "Update URL to point to LiqUIdify dashboard instead of Mintlify's",
          "content": "    \"url\": \"https://dashboard.liquidify.dev\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json",
        "line": 36,
        "column": 13,
        "message": "Anchor link points to same domain creating circular reference",
        "description": "Anchor link points to same domain creating circular reference This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove documentation anchor as it creates circular reference, or point to specific documentation section",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/docs.json",
        "line": 40,
        "column": 13,
        "message": "Community anchor points to Discord but icon is set to Slack",
        "description": "Community anchor points to Discord but icon is set to Slack This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change icon from 'slack' to 'discord' to match the actual URL",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      \"icon\": \"discord\",",
          "description": "Change icon from 'slack' to 'discord' to match the actual URL",
          "content": "      \"icon\": \"discord\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 114,
        "column": 5,
        "message": "Button lacks proper accessibility labeling for screen readers",
        "description": "Button lacks proper accessibility labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attribute to describe the button's function",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label attribute to describe the button's function",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 156,
        "column": 11,
        "message": "Code blocks lack language specification for screen readers",
        "description": "Code blocks lack language specification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute to pre/code elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">",
          "description": "Add language attribute to pre/code elements",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 170,
        "column": 11,
        "message": "Installation code block lacks proper accessibility attributes",
        "description": "Installation code block lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add language and accessibility attributes to pre/code elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">",
          "description": "Add language and accessibility attributes to pre/code elements",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 12,
        "column": 5,
        "message": "External script loaded from CDN without integrity check",
        "description": "External script loaded from CDN without integrity check This implementation could impact application performance.",
        "suggestion": "Add integrity and crossorigin attributes for security and performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 118,
        "column": 5,
        "message": "Skip navigation link missing for keyboard users",
        "description": "Skip navigation link missing for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add skip navigation link as first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white p-2 rounded\" aria-label=\"Skip to main content\">Skip to main content</a>\n\n",
          "description": "Add skip navigation link as first focusable element",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white p-2 rounded\" aria-label=\"Skip to main content\">Skip to main content</a>\n\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tooltip.html",
        "line": 142,
        "column": 7,
        "message": "Main content area lacks proper landmark identification",
        "description": "Main content area lacks proper landmark identification This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute for skip navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute for skip navigation",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 2,
        "column": 1,
        "message": "Missing lang attribute on HTML element for non-English content",
        "description": "Missing lang attribute on HTML element for non-English content This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the lang attribute correctly reflects the document's primary language",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 112,
        "column": 5,
        "message": "Button uses emoji without proper text alternative",
        "description": "Button uses emoji without proper text alternative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader friendly text for the theme toggle button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or screen reader friendly text for the theme toggle button",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 127,
        "column": 11,
        "message": "Navigation links use emoji without proper semantic structure",
        "description": "Navigation links use emoji without proper semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-labels or use proper semantic HTML for navigation links with icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"index.html\" aria-label=\"Back to Overview\">← Back to Overview</a>\n          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-labels or use proper semantic HTML for navigation links with icons",
          "content": "          <a class=\"nav-link\" href=\"index.html\" aria-label=\"Back to Overview\">← Back to Overview</a>\n          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 129,
        "column": 11,
        "message": "External link without rel='noopener noreferrer'",
        "description": "External link without rel='noopener noreferrer' This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to external links with target='_blank' to prevent security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"Visit GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel='noopener noreferrer' to external links with target='_blank' to prevent security vulnerabilities",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"Visit GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 176,
        "column": 11,
        "message": "External link without rel='noopener noreferrer'",
        "description": "External link without rel='noopener noreferrer' This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to external links with target='_blank' to prevent security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel='noopener noreferrer' to external links with target='_blank' to prevent security vulnerabilities",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 139,
        "column": 11,
        "message": "Missing semantic heading structure - h3 appears without h2",
        "description": "Missing semantic heading structure - h3 appears without h2 This code works but could be improved for better maintainability.",
        "suggestion": "Use proper heading hierarchy (h2, then h3, etc.) for better screen reader navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <h2 class=\"text-lg font-semibold mb-4 text-primary\">\n            Component Preview\n          </h2>",
          "description": "Use proper heading hierarchy (h2, then h3, etc.) for better screen reader navigation",
          "content": "          <h2 class=\"text-lg font-semibold mb-4 text-primary\">\n            Component Preview\n          </h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 152,
        "column": 11,
        "message": "Code blocks should have proper language identification for screen readers",
        "description": "Code blocks should have proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add lang attribute or aria-label to code blocks to help screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"code\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">import &#123; GlassToast } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassToast&gt;\n      Example content\n    &lt;/GlassToast&gt;\n  );\n}</code></pre>",
          "description": "Add lang attribute or aria-label to code blocks to help screen readers",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"code\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">import &#123; GlassToast } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassToast&gt;\n      Example content\n    &lt;/GlassToast&gt;\n  );\n}</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 166,
        "column": 11,
        "message": "Code blocks should have proper language identification for screen readers",
        "description": "Code blocks should have proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add lang attribute or aria-label to code blocks to help screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"code\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add lang attribute or aria-label to code blocks to help screen readers",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"code\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 112,
        "column": 38,
        "message": "Inline JavaScript in HTML reduces cacheability and violates CSP",
        "description": "Inline JavaScript in HTML reduces cacheability and violates CSP This implementation could impact application performance.",
        "suggestion": "Move inline JavaScript to external file or use event listeners",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/toast.html",
        "line": 17,
        "column": 5,
        "message": "Large inline CSS should be moved to external stylesheet for better caching",
        "description": "Large inline CSS should be moved to external stylesheet for better caching This implementation could impact application performance.",
        "suggestion": "Move CSS to external file to improve caching and reduce HTML size",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 92,
        "column": 5,
        "message": "Button element lacks semantic text content for screen readers",
        "description": "Button element lacks semantic text content for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or descriptive text for the theme toggle button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or descriptive text for the theme toggle button",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 58,
        "column": 7,
        "message": "Missing focus outline styles for interactive elements",
        "description": "Missing focus outline styles for interactive elements This code works but could be improved for better maintainability.",
        "suggestion": "Add focus styles for keyboard navigation accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      .theme-toggle {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(255, 255, 255, 0.1);\n        backdrop-filter: blur(20px);\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        border-radius: 8px;\n        padding: 0.5rem 1rem;\n        color: var(--glass-text-primary);\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .theme-toggle:hover {\n        background: rgba(255, 255, 255, 0.2);\n      }\n\n      .theme-toggle:focus {\n        outline: 2px solid #007acc;\n        outline-offset: 2px;\n      }",
          "description": "Add focus styles for keyboard navigation accessibility",
          "content": "      .theme-toggle {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(255, 255, 255, 0.1);\n        backdrop-filter: blur(20px);\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        border-radius: 8px;\n        padding: 0.5rem 1rem;\n        color: var(--glass-text-primary);\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .theme-toggle:hover {\n        background: rgba(255, 255, 255, 0.2);\n      }\n\n      .theme-toggle:focus {\n        outline: 2px solid #007acc;\n        outline-offset: 2px;\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 78,
        "column": 7,
        "message": "Navigation links lack focus styles for keyboard accessibility",
        "description": "Navigation links lack focus styles for keyboard accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add focus styles for navigation links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      .nav-link {\n        color: var(--glass-text-primary);\n        text-decoration: none;\n        padding: 0.5rem 1rem;\n        border-radius: 8px;\n        transition: all 0.2s ease;\n        display: inline-block;\n        margin: 0.25rem;\n      }\n\n      .nav-link:hover {\n        background: rgba(255, 255, 255, 0.1);\n      }\n\n      .nav-link:focus {\n        outline: 2px solid #007acc;\n        outline-offset: 2px;\n        background: rgba(255, 255, 255, 0.1);\n      }",
          "description": "Add focus styles for navigation links",
          "content": "      .nav-link {\n        color: var(--glass-text-primary);\n        text-decoration: none;\n        padding: 0.5rem 1rem;\n        border-radius: 8px;\n        transition: all 0.2s ease;\n        display: inline-block;\n        margin: 0.25rem;\n      }\n\n      .nav-link:hover {\n        background: rgba(255, 255, 255, 0.1);\n      }\n\n      .nav-link:focus {\n        outline: 2px solid #007acc;\n        outline-offset: 2px;\n        background: rgba(255, 255, 255, 0.1);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 14,
        "column": 5,
        "message": "External Tailwind CSS loaded from CDN may impact performance",
        "description": "External Tailwind CSS loaded from CDN may impact performance This implementation could impact application performance.",
        "suggestion": "Consider using a local build or purged version of Tailwind CSS for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 145,
        "column": 11,
        "message": "Heading hierarchy may be skipped (h1 to h3 without h2)",
        "description": "Heading hierarchy may be skipped (h1 to h3 without h2) This code works but could be improved for better maintainability.",
        "suggestion": "Consider using proper heading hierarchy or change h3 to h2",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <h2 class=\"text-lg font-semibold mb-4 text-primary\">\n            Component Preview\n          </h2>",
          "description": "Consider using proper heading hierarchy or change h3 to h2",
          "content": "          <h2 class=\"text-lg font-semibold mb-4 text-primary\">\n            Component Preview\n          </h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 178,
        "column": 11,
        "message": "Footer links should have proper focus states",
        "description": "Footer links should have proper focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add focus styles for footer links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300 focus:outline-2 focus:outline-blue-400 focus:outline-offset-2\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add focus styles for footer links",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300 focus:outline-2 focus:outline-blue-400 focus:outline-offset-2\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html-security-6",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/textarea.html",
        "line": 125,
        "column": 11,
        "message": "External link without rel='noopener noreferrer' security attributes",
        "description": "External link without rel='noopener noreferrer' security attributes This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to external links for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel='noopener noreferrer' to external links for security",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 130,
        "column": 5,
        "message": "Theme toggle button lacks proper ARIA labels and semantic meaning",
        "description": "Theme toggle button lacks proper ARIA labels and semantic meaning This will likely cause errors during execution.",
        "suggestion": "Add aria-label, role, and aria-pressed attributes for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\" aria-pressed=\"false\" id=\"theme-toggle\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label, role, and aria-pressed attributes for screen reader accessibility",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\" aria-pressed=\"false\" id=\"theme-toggle\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 145,
        "column": 7,
        "message": "Navigation links lack proper ARIA landmarks and roles",
        "description": "Navigation links lack proper ARIA landmarks and roles This code works but could be improved for better maintainability.",
        "suggestion": "Add role='navigation' and aria-label to improve screen reader navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <nav class=\"navigation\" role=\"navigation\" aria-label=\"Component navigation\">\n        <div class=\"text-center\">\n          <a class=\"nav-link\" href=\"index.html\">← Back to Overview</a>\n          <a class=\"nav-link\" href=\"storybook.html\">📖 Storybook</a>\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >\n        </div>\n      </nav>",
          "description": "Add role='navigation' and aria-label to improve screen reader navigation",
          "content": "      <nav class=\"navigation\" role=\"navigation\" aria-label=\"Component navigation\">\n        <div class=\"text-center\">\n          <a class=\"nav-link\" href=\"index.html\">← Back to Overview</a>\n          <a class=\"nav-link\" href=\"storybook.html\">📖 Storybook</a>\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >\n        </div>\n      </nav>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-security-2",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 151,
        "column": 11,
        "message": "External link missing rel='noopener noreferrer' attribute",
        "description": "External link missing rel='noopener noreferrer' attribute This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to prevent potential security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel='noopener noreferrer' to prevent potential security vulnerabilities",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 202,
        "column": 11,
        "message": "External link in footer missing rel='noopener noreferrer' attribute",
        "description": "External link in footer missing rel='noopener noreferrer' attribute This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to prevent potential security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel='noopener noreferrer' to prevent potential security vulnerabilities",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 174,
        "column": 11,
        "message": "Code blocks lack proper language identification for screen readers",
        "description": "Code blocks lack proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute to code element for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"javascript\">import &#123; GlassTabs } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassTabs&gt;\n      Example content\n    &lt;/GlassTabs&gt;\n  );\n}</code></pre>",
          "description": "Add language attribute to code element for better accessibility",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"javascript\">import &#123; GlassTabs } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassTabs&gt;\n      Example content\n    &lt;/GlassTabs&gt;\n  );\n}</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 189,
        "column": 11,
        "message": "Installation code block lacks proper language identification",
        "description": "Installation code block lacks proper language identification This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute to code element for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add language attribute to code element for better accessibility",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 27,
        "column": 7,
        "message": "Missing efficient theme transition CSS for better performance",
        "description": "Missing efficient theme transition CSS for better performance This implementation could impact application performance.",
        "suggestion": "Add CSS transitions and will-change properties for smoother theme switching",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      :root {\n        --glass-bg-canvas: #ffffff;\n        --glass-text-primary: #1a1a1a;\n        --glass-text-secondary: #666666;\n        --glass-border-primary: rgba(255, 255, 255, 0.2);\n        --glass-shadow-primary: rgba(0, 0, 0, 0.1);\n        transition: color 0.3s ease, background-color 0.3s ease;\n        will-change: color, background-color;\n      }",
          "description": "Add CSS transitions and will-change properties for smoother theme switching",
          "content": "      :root {\n        --glass-bg-canvas: #ffffff;\n        --glass-text-primary: #1a1a1a;\n        --glass-text-secondary: #666666;\n        --glass-border-primary: rgba(255, 255, 255, 0.2);\n        --glass-shadow-primary: rgba(0, 0, 0, 0.1);\n        transition: color 0.3s ease, background-color 0.3s ease;\n        will-change: color, background-color;\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/tabs.html",
        "line": 213,
        "column": 7,
        "message": "Theme toggle button doesn't update aria-pressed attribute",
        "description": "Theme toggle button doesn't update aria-pressed attribute This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Update aria-pressed attribute when theme changes for proper accessibility state",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      function toggleTheme() {\n        const html = document.documentElement;\n        const themeToggle = document.getElementById('theme-toggle');\n        const currentTheme = html.getAttribute(\"data-theme\");\n        const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        html.setAttribute(\"data-theme\", newTheme);\n        localStorage.setItem(\"theme\", newTheme);\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', newTheme === 'dark');\n        }\n      }",
          "description": "Update aria-pressed attribute when theme changes for proper accessibility state",
          "content": "      function toggleTheme() {\n        const html = document.documentElement;\n        const themeToggle = document.getElementById('theme-toggle');\n        const currentTheme = html.getAttribute(\"data-theme\");\n        const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        html.setAttribute(\"data-theme\", newTheme);\n        localStorage.setItem(\"theme\", newTheme);\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', newTheme === 'dark');\n        }\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 103,
        "column": 5,
        "message": "Button using emoji without accessible text for screen readers",
        "description": "Button using emoji without accessible text for screen readers This will likely cause errors during execution.",
        "suggestion": "Add aria-label attribute to provide accessible text for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label attribute to provide accessible text for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 121,
        "column": 11,
        "message": "Links with emojis should have accessible text",
        "description": "Links with emojis should have accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to clarify the purpose of the link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label to clarify the purpose of the link",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 122,
        "column": 11,
        "message": "Links with emojis should have accessible text",
        "description": "Links with emojis should have accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to clarify the purpose of the link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label to clarify the purpose of the link",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 122,
        "column": 11,
        "message": "External link without rel attribute poses security risk",
        "description": "External link without rel attribute poses security risk This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>",
          "description": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 166,
        "column": 11,
        "message": "External link without rel attribute poses security risk",
        "description": "External link without rel attribute poses security risk This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 166,
        "column": 11,
        "message": "External link should indicate it opens in a new tab",
        "description": "External link should indicate it opens in a new tab This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader text to indicate external link behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add aria-label or screen reader text to indicate external link behavior",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 12,
        "column": 5,
        "message": "Loading Tailwind CSS from CDN impacts performance",
        "description": "Loading Tailwind CSS from CDN impacts performance This implementation could impact application performance.",
        "suggestion": "Consider hosting Tailwind CSS locally or using a build process to include only used styles",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/switch.html",
        "line": 100,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add a skip navigation link as the first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>",
          "description": "Add a skip navigation link as the first focusable element",
          "content": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 118,
        "column": 5,
        "message": "Button uses only emoji for text content without accessible label",
        "description": "Button uses only emoji for text content without accessible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attribute to provide accessible text for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label attribute to provide accessible text for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 135,
        "column": 11,
        "message": "Missing alt text for decorative content in navigation links",
        "description": "Missing alt text for decorative content in navigation links This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or remove decorative emojis for better screen reader experience",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label or remove decorative emojis for better screen reader experience",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 136,
        "column": 11,
        "message": "Missing alt text for decorative content in navigation links",
        "description": "Missing alt text for decorative content in navigation links This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for better screen reader experience",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label for better screen reader experience",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 138,
        "column": 13,
        "message": "External link without rel=\"noopener noreferrer\" when using target=\"_blank\"",
        "description": "External link without rel=\"noopener noreferrer\" when using target=\"_blank\" This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            target=\"_blank\"\n            rel=\"noopener noreferrer\"",
          "description": "Add rel=\"noopener noreferrer\" to prevent potential security vulnerabilities",
          "content": "            target=\"_blank\"\n            rel=\"noopener noreferrer\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 157,
        "column": 11,
        "message": "Code blocks should have proper language identification for screen readers",
        "description": "Code blocks should have proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute or aria-label to code blocks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"JavaScript code example\"\n          ><code>import &#123; GlassSlider } from '@tuliocunha23/liquidui';",
          "description": "Add language attribute or aria-label to code blocks",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"JavaScript code example\"\n          ><code>import &#123; GlassSlider } from '@tuliocunha23/liquidui';"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 171,
        "column": 11,
        "message": "Code blocks should have proper language identification for screen readers",
        "description": "Code blocks should have proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute or aria-label to code blocks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"NPM installation command\"\n          ><code>npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add language attribute or aria-label to code blocks",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"NPM installation command\"\n          ><code>npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 17,
        "column": 5,
        "message": "Loading Tailwind CSS from CDN may impact performance",
        "description": "Loading Tailwind CSS from CDN may impact performance This implementation could impact application performance.",
        "suggestion": "Consider self-hosting Tailwind CSS or using a local build for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 195,
        "column": 7,
        "message": "Missing error handling in theme toggle function",
        "description": "Missing error handling in theme toggle function This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential localStorage errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      function toggleTheme() {\n        try {\n          const html = document.documentElement;\n          const currentTheme = html.getAttribute(\"data-theme\");\n          const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n          html.setAttribute(\"data-theme\", newTheme);\n          localStorage.setItem(\"theme\", newTheme);\n        } catch (error) {\n          console.warn('Failed to save theme preference:', error);\n        }\n      }",
          "description": "Add try-catch block to handle potential localStorage errors",
          "content": "      function toggleTheme() {\n        try {\n          const html = document.documentElement;\n          const currentTheme = html.getAttribute(\"data-theme\");\n          const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n          html.setAttribute(\"data-theme\", newTheme);\n          localStorage.setItem(\"theme\", newTheme);\n        } catch (error) {\n          console.warn('Failed to save theme preference:', error);\n        }\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html-error-handling-8",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/slider.html",
        "line": 203,
        "column": 7,
        "message": "Missing error handling when accessing localStorage",
        "description": "Missing error handling when accessing localStorage This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential localStorage access errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Load saved theme\n      try {\n        const savedTheme = localStorage.getItem(\"theme\") || \"light\";\n        document.documentElement.setAttribute(\"data-theme\", savedTheme);\n      } catch (error) {\n        console.warn('Failed to load saved theme:', error);\n        document.documentElement.setAttribute(\"data-theme\", \"light\");\n      }",
          "description": "Add try-catch block to handle potential localStorage access errors",
          "content": "      // Load saved theme\n      try {\n        const savedTheme = localStorage.getItem(\"theme\") || \"light\";\n        document.documentElement.setAttribute(\"data-theme\", savedTheme);\n      } catch (error) {\n        console.warn('Failed to load saved theme:', error);\n        document.documentElement.setAttribute(\"data-theme\", \"light\");\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 2,
        "column": 27,
        "message": "Missing lang attribute context - page is about 'select' components but generic lang='en' may not be appropriate for all users",
        "description": "Missing lang attribute context - page is about 'select' components but generic lang='en' may not be appropriate for all users This will likely cause errors during execution.",
        "suggestion": "Consider adding language selection or ensuring content is properly localized",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 13,
        "column": 5,
        "message": "Loading external CDN script without integrity check",
        "description": "Loading external CDN script without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-...\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes for security",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-...\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 98,
        "column": 5,
        "message": "Theme toggle button lacks proper ARIA attributes and accessible text",
        "description": "Theme toggle button lacks proper ARIA attributes and accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label, role, and aria-pressed attributes for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\" aria-pressed=\"false\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label, role, and aria-pressed attributes for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\" aria-pressed=\"false\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 118,
        "column": 11,
        "message": "External link missing rel='noopener noreferrer' security attribute",
        "description": "External link missing rel='noopener noreferrer' security attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add rel='noopener noreferrer' to external links for security",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel='noopener noreferrer' to external links for security",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 161,
        "column": 11,
        "message": "External link missing rel='noopener noreferrer' security attribute",
        "description": "External link missing rel='noopener noreferrer' security attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add rel='noopener noreferrer' to external links for security",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel='noopener noreferrer' to external links for security",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 138,
        "column": 11,
        "message": "Code blocks lack proper semantic markup and language identification",
        "description": "Code blocks lack proper semantic markup and language identification This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute to code element for better accessibility and syntax highlighting",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">import {{ \"{\" }} GlassSelect } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() {{ \"{\" }}\n                return (\n    &lt;GlassSelect&gt;\n      Example content\n    &lt;/GlassSelect&gt;\n  );\n}</code></pre>",
          "description": "Add language attribute to code element for better accessibility and syntax highlighting",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"JavaScript code example\"\n          ><code lang=\"javascript\">import {{ \"{\" }} GlassSelect } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() {{ \"{\" }}\n                return (\n    &lt;GlassSelect&gt;\n      Example content\n    &lt;/GlassSelect&gt;\n  );\n}</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 152,
        "column": 11,
        "message": "Installation code block lacks proper semantic markup",
        "description": "Installation code block lacks proper semantic markup This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute and proper ARIA labels",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add language attribute and proper ARIA labels",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 18,
        "column": 5,
        "message": "Inline styles could be moved to external stylesheet for better caching",
        "description": "Inline styles could be moved to external stylesheet for better caching This implementation could impact application performance.",
        "suggestion": "Consider moving large style blocks to external CSS files for better performance and maintainability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 97,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add a skip navigation link as the first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded\">Skip to main content</a>\n",
          "description": "Add a skip navigation link as the first focusable element",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded\">Skip to main content</a>\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/select.html",
        "line": 125,
        "column": 7,
        "message": "Main content area should have proper landmark identification",
        "description": "Main content area should have proper landmark identification This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute for skip navigation and proper ARIA labeling",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\" aria-label=\"Select component documentation\">",
          "description": "Add id attribute for skip navigation and proper ARIA labeling",
          "content": "      <main class=\"component-section\" id=\"main-content\" aria-label=\"Select component documentation\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 12,
        "column": 5,
        "message": "Loading external scripts from CDN without integrity check creates security risk",
        "description": "Loading external scripts from CDN without integrity check creates security risk This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes to prevent tampering",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-xxx\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes to prevent tampering",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-xxx\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 102,
        "column": 5,
        "message": "Button lacks accessible text content - emoji alone is not sufficient",
        "description": "Button lacks accessible text content - emoji alone is not sufficient This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or text description for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or text description for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 126,
        "column": 11,
        "message": "Links opening in new tab should indicate this to users",
        "description": "Links opening in new tab should indicate this to users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label or visual indicator for external links",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 175,
        "column": 11,
        "message": "Link opening in new tab should indicate this to users",
        "description": "Link opening in new tab should indicate this to users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add aria-label or visual indicator for external links",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 134,
        "column": 7,
        "message": "Page lacks main landmark structure",
        "description": "Page lacks main landmark structure This code works but could be improved for better maintainability.",
        "suggestion": "Main content should be wrapped in proper semantic structure",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 190,
        "column": 7,
        "message": "Multiple DOM queries in script could be optimized",
        "description": "Multiple DOM queries in script could be optimized This implementation could impact application performance.",
        "suggestion": "Cache DOM queries and use more efficient selectors",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/progress.html",
        "line": 115,
        "column": 13,
        "message": "Hardcoded color values should use CSS custom properties for consistency",
        "description": "Hardcoded color values should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Use CSS custom properties defined in :root for maintainable theming",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            class=\"inline-block bg-blue-500 text-white px-3 py-1 rounded-full text-sm\"",
          "description": "Use CSS custom properties defined in :root for maintainable theming",
          "content": "            class=\"inline-block bg-blue-500 text-white px-3 py-1 rounded-full text-sm\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 93,
        "column": 5,
        "message": "Missing alt attribute for emoji icon in button",
        "description": "Missing alt attribute for emoji icon in button This will likely cause errors during execution.",
        "suggestion": "Add proper aria-label or replace emoji with accessible text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle theme between light and dark mode\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add proper aria-label or replace emoji with accessible text",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle theme between light and dark mode\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 13,
        "column": 5,
        "message": "Using external CDN for Tailwind CSS without integrity check",
        "description": "Using external CDN for Tailwind CSS without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes to the script tag",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 104,
        "column": 11,
        "message": "Links with emoji icons should have proper aria labels",
        "description": "Links with emoji icons should have proper aria labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the link's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label to describe the link's purpose",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 105,
        "column": 11,
        "message": "Links with emoji icons should have proper aria labels",
        "description": "Links with emoji icons should have proper aria labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the link's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label to describe the link's purpose",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 105,
        "column": 11,
        "message": "External link without rel=\"noopener noreferrer\"",
        "description": "External link without rel=\"noopener noreferrer\" This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel=\"noopener noreferrer\" to external links for security",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"Visit GitHub repository\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-security-5",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 150,
        "column": 11,
        "message": "External link without rel=\"noopener noreferrer\"",
        "description": "External link without rel=\"noopener noreferrer\" This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel=\"noopener noreferrer\" to external links for security",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-accessibility-6",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 150,
        "column": 11,
        "message": "Missing target=\"_blank\" should be accompanied by proper security attributes",
        "description": "Missing target=\"_blank\" should be accompanied by proper security attributes This will likely cause errors during execution.",
        "suggestion": "Add target=\"_blank\" and rel=\"noopener noreferrer\" for external links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View live demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add target=\"_blank\" and rel=\"noopener noreferrer\" for external links",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View live demo (opens in new tab)\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 93,
        "column": 35,
        "message": "Inline event handlers should be replaced with addEventListener for better performance",
        "description": "Inline event handlers should be replaced with addEventListener for better performance This implementation could impact application performance.",
        "suggestion": "Move onclick handler to JavaScript section using addEventListener",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" id=\"themeToggle\" aria-label=\"Toggle theme between light and dark mode\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Move onclick handler to JavaScript section using addEventListener",
          "content": "    <button class=\"theme-toggle\" id=\"themeToggle\" aria-label=\"Toggle theme between light and dark mode\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 2,
        "column": 1,
        "message": "HTML lang attribute should be more specific",
        "description": "HTML lang attribute should be more specific This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific language code if targeting specific region",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/popover.html",
        "line": 1,
        "column": 1,
        "message": "Missing preconnect hints for external resources",
        "description": "Missing preconnect hints for external resources This implementation could impact application performance.",
        "suggestion": "Add preconnect hints for external CDN resources to improve loading performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<!doctype html>\n<html data-theme=\"light\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\" />\n    <link rel=\"preconnect\" href=\"https://cdn.tailwindcss.com\" crossorigin=\"anonymous\" />",
          "description": "Add preconnect hints for external CDN resources to improve loading performance",
          "content": "<!doctype html>\n<html data-theme=\"light\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\" />\n    <link rel=\"preconnect\" href=\"https://cdn.tailwindcss.com\" crossorigin=\"anonymous\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 107,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This will likely cause errors during execution.",
        "suggestion": "Add a skip navigation link as the first focusable element to allow keyboard users to bypass navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-3 py-2 rounded z-50\">Skip to main content</a>\n",
          "description": "Add a skip navigation link as the first focusable element to allow keyboard users to bypass navigation",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-3 py-2 rounded z-50\">Skip to main content</a>\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 107,
        "column": 5,
        "message": "Theme toggle button lacks proper accessibility attributes",
        "description": "Theme toggle button lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label, aria-pressed, and role attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" aria-pressed=\"false\" role=\"button\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label, aria-pressed, and role attributes for better screen reader support",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" aria-pressed=\"false\" role=\"button\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 139,
        "column": 7,
        "message": "Main content area lacks proper landmark identification",
        "description": "Main content area lacks proper landmark identification This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation link target",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute to main element for skip navigation link target",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 14,
        "column": 5,
        "message": "External CDN resource loaded without integrity check",
        "description": "External CDN resource loaded without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes to prevent tampering with external resources",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-T4Cv5bvKZOu2YOiNEiHO8nTGe8G9IcOJTkgJLWk0I4d2bJTpjPWfGfY+7uQ6X1yV\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes to prevent tampering with external resources",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-T4Cv5bvKZOu2YOiNEiHO8nTGe8G9IcOJTkgJLWk0I4d2bJTpjPWfGfY+7uQ6X1yV\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 6,
        "column": 3,
        "message": "Missing preconnect hints for external resources",
        "description": "Missing preconnect hints for external resources This implementation could impact application performance.",
        "suggestion": "Add preconnect link hints to establish early connections to external domains",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <link rel=\"preconnect\" href=\"https://cdn.tailwindcss.com\">\n",
          "description": "Add preconnect link hints to establish early connections to external domains",
          "content": "    <link rel=\"preconnect\" href=\"https://cdn.tailwindcss.com\">\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 153,
        "column": 11,
        "message": "Code blocks lack proper language identification for screen readers",
        "description": "Code blocks lack proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add lang attribute to code elements to help screen readers pronounce content correctly",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          ><code lang=\"javascript\">import &#123; GlassModal } from '@tuliocunha23/liquidui';",
          "description": "Add lang attribute to code elements to help screen readers pronounce content correctly",
          "content": "          ><code lang=\"javascript\">import &#123; GlassModal } from '@tuliocunha23/liquidui';"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 166,
        "column": 11,
        "message": "Code blocks lack proper language identification for screen readers",
        "description": "Code blocks lack proper language identification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add lang attribute to code elements to help screen readers pronounce content correctly",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add lang attribute to code elements to help screen readers pronounce content correctly",
          "content": "          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 18,
        "column": 5,
        "message": "Inline styles in head could be moved to external CSS file for better caching",
        "description": "Inline styles in head could be moved to external CSS file for better caching This implementation could impact application performance.",
        "suggestion": "Consider moving large style blocks to external CSS files to improve caching and reduce HTML size",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/modal.html",
        "line": 184,
        "column": 7,
        "message": "Inconsistent indentation in JavaScript code",
        "description": "Inconsistent indentation in JavaScript code This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent 2-space indentation throughout JavaScript code",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      function toggleTheme() {\n        const html = document.documentElement;\n        const currentTheme = html.getAttribute(\"data-theme\");\n        const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        html.setAttribute(\"data-theme\", newTheme);\n        localStorage.setItem(\"theme\", newTheme);\n        \n        // Update aria-pressed state\n        const themeToggle = document.querySelector('.theme-toggle');\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', newTheme === 'dark');\n        }\n      }\n\n      // Load saved theme\n      const savedTheme = localStorage.getItem(\"theme\") || \"light\";\n      document.documentElement.setAttribute(\"data-theme\", savedTheme);\n      \n      // Set initial aria-pressed state\n      window.addEventListener('DOMContentLoaded', () => {\n        const themeToggle = document.querySelector('.theme-toggle');\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', savedTheme === 'dark');\n        }\n      });",
          "description": "Use consistent 2-space indentation throughout JavaScript code",
          "content": "      function toggleTheme() {\n        const html = document.documentElement;\n        const currentTheme = html.getAttribute(\"data-theme\");\n        const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        html.setAttribute(\"data-theme\", newTheme);\n        localStorage.setItem(\"theme\", newTheme);\n        \n        // Update aria-pressed state\n        const themeToggle = document.querySelector('.theme-toggle');\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', newTheme === 'dark');\n        }\n      }\n\n      // Load saved theme\n      const savedTheme = localStorage.getItem(\"theme\") || \"light\";\n      document.documentElement.setAttribute(\"data-theme\", savedTheme);\n      \n      // Set initial aria-pressed state\n      window.addEventListener('DOMContentLoaded', () => {\n        const themeToggle = document.querySelector('.theme-toggle');\n        if (themeToggle) {\n          themeToggle.setAttribute('aria-pressed', savedTheme === 'dark');\n        }\n      });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 12,
        "column": 5,
        "message": "Using CDN script without integrity check allows potential code injection",
        "description": "Using CDN script without integrity check allows potential code injection This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes to the script tag",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes to the script tag",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 111,
        "column": 5,
        "message": "Button uses emoji without proper accessible text",
        "description": "Button uses emoji without proper accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader text for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or screen reader text for better accessibility",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 126,
        "column": 11,
        "message": "Navigation links use emojis without proper accessible text",
        "description": "Navigation links use emojis without proper accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label for screen readers",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 127,
        "column": 11,
        "message": "GitHub link uses emoji without proper accessible text",
        "description": "GitHub link uses emoji without proper accessible text This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label for screen readers",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 16,
        "column": 5,
        "message": "Inline styles should be moved to external CSS for better caching",
        "description": "Inline styles should be moved to external CSS for better caching This implementation could impact application performance.",
        "suggestion": "Move inline styles to external CSS file",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-accessibility-5",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 1,
        "column": 1,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This will likely cause errors during execution.",
        "suggestion": "Add skip navigation link after opening body tag",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>",
          "description": "Add skip navigation link after opening body tag",
          "content": "  <body>\n    <a href=\"#main\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 134,
        "column": 7,
        "message": "Main content area should use semantic main element with id",
        "description": "Main content area should use semantic main element with id This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main id=\"main\" class=\"component-section\">",
          "description": "Add id attribute to main element for skip navigation",
          "content": "      <main id=\"main\" class=\"component-section\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/loading.html",
        "line": 118,
        "column": 11,
        "message": "Hardcoded colors should use CSS custom properties for consistency",
        "description": "Hardcoded colors should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Replace hardcoded colors with CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 95,
        "column": 5,
        "message": "Button uses emoji without accessible text alternative",
        "description": "Button uses emoji without accessible text alternative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader text for the emoji in the button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or screen reader text for the emoji in the button",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 115,
        "column": 10,
        "message": "Links with emojis should have accessible text or aria-labels",
        "description": "Links with emojis should have accessible text or aria-labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to clarify the link purpose beyond just the emoji",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"Open Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label to clarify the link purpose beyond just the emoji",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"Open Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 116,
        "column": 10,
        "message": "Links with emojis should have accessible text or aria-labels",
        "description": "Links with emojis should have accessible text or aria-labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to clarify the link purpose beyond just the emoji",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Open GitHub repository\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label to clarify the link purpose beyond just the emoji",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Open GitHub repository\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 116,
        "column": 10,
        "message": "External link opens in new tab without rel=\"noopener noreferrer\"",
        "description": "External link opens in new tab without rel=\"noopener noreferrer\" This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\" to prevent potential security issues",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>",
          "description": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\" to prevent potential security issues",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 163,
        "column": 10,
        "message": "External link opens in new tab without rel=\"noopener noreferrer\"",
        "description": "External link opens in new tab without rel=\"noopener noreferrer\" This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\" to prevent potential security issues",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\" to prevent potential security issues",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 134,
        "column": 10,
        "message": "Code blocks should have language specification for screen readers",
        "description": "Code blocks should have language specification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role and language information to code blocks for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Code example\"\n          ><code lang=\"javascript\">import &#123; GlassInput } from '@tuliocunha23/liquidui';",
          "description": "Add role and language information to code blocks for better accessibility",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Code example\"\n          ><code lang=\"javascript\">import &#123; GlassInput } from '@tuliocunha23/liquidui';"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/input.html",
        "line": 146,
        "column": 10,
        "message": "Code blocks should have language specification for screen readers",
        "description": "Code blocks should have language specification for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role and language information to code blocks for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add role and language information to code blocks for better accessibility",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"region\"\n            aria-label=\"Installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 11,
        "column": 5,
        "message": "Loading external script from CDN without integrity check",
        "description": "Loading external script from CDN without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes for security",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 59,
        "column": 9,
        "message": "Links used as buttons should have role=\"button\" or be actual button elements",
        "description": "Links used as buttons should have role=\"button\" or be actual button elements This code works but could be improved for better maintainability.",
        "suggestion": "Add role=\"button\" to links that act as buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <a\n          href=\"https://github.com/tuliopc23/LiqUIdify\"\n          role=\"button\"\n          class=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition\"\n        >\n          View on GitHub\n        </a>",
          "description": "Add role=\"button\" to links that act as buttons",
          "content": "        <a\n          href=\"https://github.com/tuliopc23/LiqUIdify\"\n          role=\"button\"\n          class=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition\"\n        >\n          View on GitHub\n        </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 65,
        "column": 9,
        "message": "Links used as buttons should have role=\"button\" or be actual button elements",
        "description": "Links used as buttons should have role=\"button\" or be actual button elements This code works but could be improved for better maintainability.",
        "suggestion": "Add role=\"button\" to links that act as buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <a\n          href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          role=\"button\"\n          class=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition\"\n        >\n          Live Demo\n        </a>",
          "description": "Add role=\"button\" to links that act as buttons",
          "content": "        <a\n          href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          role=\"button\"\n          class=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition\"\n        >\n          Live Demo\n        </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 65,
        "column": 9,
        "message": "Missing alt text or aria-label for link context",
        "description": "Missing alt text or aria-label for link context This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide context for external link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <a\n          href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          aria-label=\"Open live demo in new tab\"\n          class=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition\"\n        >\n          Live Demo\n        </a>",
          "description": "Add aria-label to provide context for external link",
          "content": "        <a\n          href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n          aria-label=\"Open live demo in new tab\"\n          class=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition\"\n        >\n          Live Demo\n        </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 12,
        "column": 5,
        "message": "Missing preload hint for critical CSS resource",
        "description": "Missing preload hint for critical CSS resource This implementation could impact application performance.",
        "suggestion": "Add preload link for critical CSS to improve performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <link rel=\"preload\" href=\"dist/liquidui.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n    <noscript><link rel=\"stylesheet\" href=\"dist/liquidui.css\"></noscript>",
          "description": "Add preload link for critical CSS to improve performance",
          "content": "    <link rel=\"preload\" href=\"dist/liquidui.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n    <noscript><link rel=\"stylesheet\" href=\"dist/liquidui.css\"></noscript>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 79,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add skip navigation link at the beginning of the body",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>",
          "description": "Add skip navigation link at the beginning of the body",
          "content": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 74,
        "column": 5,
        "message": "Main content area should be wrapped in <main> element",
        "description": "Main content area should be wrapped in <main> element This code works but could be improved for better maintainability.",
        "suggestion": "Wrap the component grid in a main element with appropriate id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <main id=\"main-content\" class=\"component-grid\">",
          "description": "Wrap the component grid in a main element with appropriate id",
          "content": "    <main id=\"main-content\" class=\"component-grid\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/index.html",
        "line": 224,
        "column": 5,
        "message": "Main content area closing tag should be </main>",
        "description": "Main content area closing tag should be </main> This code works but could be improved for better maintainability.",
        "suggestion": "Close the main element properly",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    </main>",
          "description": "Close the main element properly",
          "content": "    </main>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 2,
        "column": 27,
        "message": "Missing lang attribute specification - generic 'en' should be more specific",
        "description": "Missing lang attribute specification - generic 'en' should be more specific This will likely cause errors during execution.",
        "suggestion": "Use more specific language code like 'en-US' or 'en-GB'",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "lang=\"en-US\"",
          "description": "Use more specific language code like 'en-US' or 'en-GB'",
          "content": "lang=\"en-US\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 97,
        "column": 5,
        "message": "Button uses emoji without proper accessibility label",
        "description": "Button uses emoji without proper accessibility label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the button's function for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label to describe the button's function for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 114,
        "column": 11,
        "message": "Navigation links use emoji without proper accessibility context",
        "description": "Navigation links use emoji without proper accessibility context This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or move emoji to separate span with aria-hidden",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label or move emoji to separate span with aria-hidden",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 115,
        "column": 11,
        "message": "Navigation links use emoji without proper accessibility context",
        "description": "Navigation links use emoji without proper accessibility context This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or move emoji to separate span with aria-hidden",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label or move emoji to separate span with aria-hidden",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 115,
        "column": 11,
        "message": "External link opens in new tab without rel='noopener noreferrer'",
        "description": "External link opens in new tab without rel='noopener noreferrer' This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to prevent potential security issues",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>",
          "description": "Add rel='noopener noreferrer' to prevent potential security issues",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 14,
        "column": 5,
        "message": "Loading external CDN script synchronously blocks page rendering",
        "description": "Loading external CDN script synchronously blocks page rendering This implementation could impact application performance.",
        "suggestion": "Add async or defer attribute to improve page load performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" defer></script>",
          "description": "Add async or defer attribute to improve page load performance",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" defer></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 111,
        "column": 7,
        "message": "Main navigation should be wrapped in nav element with proper semantics",
        "description": "Main navigation should be wrapped in nav element with proper semantics This code works but could be improved for better maintainability.",
        "suggestion": "Add role='navigation' and aria-label to improve navigation accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <nav class=\"navigation\" role=\"navigation\" aria-label=\"Main navigation\">",
          "description": "Add role='navigation' and aria-label to improve navigation accessibility",
          "content": "      <nav class=\"navigation\" role=\"navigation\" aria-label=\"Main navigation\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-7",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 124,
        "column": 7,
        "message": "Main content area lacks proper semantic structure",
        "description": "Main content area lacks proper semantic structure This will likely cause errors during execution.",
        "suggestion": "Add role='main' and aria-label to clearly identify main content area",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" role=\"main\" aria-label=\"Form examples content\">",
          "description": "Add role='main' and aria-label to clearly identify main content area",
          "content": "      <main class=\"component-section\" role=\"main\" aria-label=\"Form examples content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 136,
        "column": 26,
        "message": "Inconsistent spacing in template literal usage",
        "description": "Inconsistent spacing in template literal usage This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent spacing around template literal expressions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { GlassFormGlassExamples } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() {\n  return (\n    <GlassFormGlassExamples>\n      Example content\n    </GlassFormGlassExamples>\n  );\n}",
          "description": "Use consistent spacing around template literal expressions",
          "content": "import { GlassFormGlassExamples } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() {\n  return (\n    <GlassFormGlassExamples>\n      Example content\n    </GlassFormGlassExamples>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/form-examples.html",
        "line": 134,
        "column": 11,
        "message": "Code blocks lack proper labeling for screen readers",
        "description": "Code blocks lack proper labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the code content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"Usage example code\"\n          >",
          "description": "Add aria-label to describe the code content",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            aria-label=\"Usage example code\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 103,
        "column": 5,
        "message": "Button lacks accessible label - using emoji as button text is not screen reader friendly",
        "description": "Button lacks accessible label - using emoji as button text is not screen reader friendly This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or use text with visually hidden label for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or use text with visually hidden label for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 2,
        "column": 1,
        "message": "Missing language attribute specification for better screen reader support",
        "description": "Missing language attribute specification for better screen reader support This code works but could be improved for better maintainability.",
        "suggestion": "The lang attribute is present but could be more specific (e.g., en-US)",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<html data-theme=\"light\" lang=\"en-US\">",
          "description": "The lang attribute is present but could be more specific (e.g., en-US)",
          "content": "<html data-theme=\"light\" lang=\"en-US\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 124,
        "column": 11,
        "message": "Link opens in new tab without warning for screen readers",
        "description": "Link opens in new tab without warning for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or title to indicate link opens in new window",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label or title to indicate link opens in new window",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 173,
        "column": 11,
        "message": "Another link opens in new tab without warning for screen readers",
        "description": "Another link opens in new tab without warning for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or title to indicate link opens in new window",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >",
          "description": "Add aria-label or title to indicate link opens in new window",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            aria-label=\"View Live Demo (opens in new tab)\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 13,
        "column": 5,
        "message": "Using external CDN for Tailwind CSS without integrity check",
        "description": "Using external CDN for Tailwind CSS without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 13,
        "column": 5,
        "message": "Loading external CSS from CDN blocks rendering",
        "description": "Loading external CSS from CDN blocks rendering This implementation could impact application performance.",
        "suggestion": "Consider using a local copy or adding preload/prefetch for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 103,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add a skip navigation link as the first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>\n",
          "description": "Add a skip navigation link as the first focusable element",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dropdown.html",
        "line": 131,
        "column": 7,
        "message": "Main content area should have id for skip navigation",
        "description": "Main content area should have id for skip navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation target",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute to main element for skip navigation target",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 2,
        "column": 27,
        "message": "Missing lang attribute specificity - 'en' should be more specific like 'en-US'",
        "description": "Missing lang attribute specificity - 'en' should be more specific like 'en-US' This code works but could be improved for better maintainability.",
        "suggestion": "Use more specific language code like 'en-US' for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "lang=\"en-US\"",
          "description": "Use more specific language code like 'en-US' for better accessibility",
          "content": "lang=\"en-US\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 17,
        "column": 5,
        "message": "External CDN script loaded without integrity check",
        "description": "External CDN script loaded without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-...\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes for security",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-...\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 123,
        "column": 5,
        "message": "Button lacks accessible name when screen readers encounter emoji-only content",
        "description": "Button lacks accessible name when screen readers encounter emoji-only content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or use text alongside emoji for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or use text alongside emoji for better screen reader support",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 127,
        "column": 5,
        "message": "Missing skip link for keyboard navigation",
        "description": "Missing skip link for keyboard navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add a skip link to main content for better keyboard navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>\n    <div class=\"static-showcase\">",
          "description": "Add a skip link to main content for better keyboard navigation",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>\n    <div class=\"static-showcase\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 153,
        "column": 7,
        "message": "Main content area should have id for skip link target",
        "description": "Main content area should have id for skip link target This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip link navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main id=\"main-content\" class=\"component-section\">",
          "description": "Add id attribute to main element for skip link navigation",
          "content": "      <main id=\"main-content\" class=\"component-section\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 123,
        "column": 38,
        "message": "Inline event handler reduces performance and violates CSP",
        "description": "Inline event handler reduces performance and violates CSP This implementation could impact application performance.",
        "suggestion": "Use addEventListener instead of inline onclick for better performance and security",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" id=\"theme-toggle-btn\" aria-label=\"Toggle between light and dark theme\">",
          "description": "Use addEventListener instead of inline onclick for better performance and security",
          "content": "    <button class=\"theme-toggle\" id=\"theme-toggle-btn\" aria-label=\"Toggle between light and dark theme\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 163,
        "column": 40,
        "message": "Inconsistent naming convention - component uses 'GlassDataGlassTable' which is redundant",
        "description": "Inconsistent naming convention - component uses 'GlassDataGlassTable' which is redundant This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent naming like 'GlassDataTable' instead of 'GlassDataGlassTable'",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { GlassDataTable } from '@tuliocunha23/liquidui';",
          "description": "Use consistent naming like 'GlassDataTable' instead of 'GlassDataGlassTable'",
          "content": "import { GlassDataTable } from '@tuliocunha23/liquidui';"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 166,
        "column": 5,
        "message": "Inconsistent component name usage in example",
        "description": "Inconsistent component name usage in example This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent component naming throughout the example",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    &lt;GlassDataTable&gt;\n      Example content\n    &lt;/GlassDataTable&gt;",
          "description": "Use consistent component naming throughout the example",
          "content": "    &lt;GlassDataTable&gt;\n      Example content\n    &lt;/GlassDataTable&gt;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/data-table.html",
        "line": 143,
        "column": 11,
        "message": "Links opening in new tab should indicate this to users",
        "description": "Links opening in new tab should indicate this to users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label or visual indicator for external links",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 13,
        "column": 5,
        "message": "Using CDN for Tailwind CSS without integrity check - potential security risk",
        "description": "Using CDN for Tailwind CSS without integrity check - potential security risk This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes to external script tags",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-GENERATED_HASH\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes to external script tags",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-GENERATED_HASH\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 120,
        "column": 5,
        "message": "Button lacks accessible label - emoji is not descriptive for screen readers",
        "description": "Button lacks accessible label - emoji is not descriptive for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attribute for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label attribute for better accessibility",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-security-2",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 135,
        "column": 11,
        "message": "External link without proper security attributes",
        "description": "External link without proper security attributes This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to external links for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >",
          "description": "Add rel='noopener noreferrer' to external links for security",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 135,
        "column": 11,
        "message": "External link lacks accessible indication for screen readers",
        "description": "External link lacks accessible indication for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or sr-only text to indicate external link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label or sr-only text to indicate external link",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"GitHub repository (opens in new tab)\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 186,
        "column": 11,
        "message": "Another external link without proper security attributes",
        "description": "Another external link without proper security attributes This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel='noopener noreferrer' to external links for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel='noopener noreferrer' to external links for security",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 194,
        "column": 5,
        "message": "Inline JavaScript should be moved to external file for better caching and CSP compliance",
        "description": "Inline JavaScript should be moved to external file for better caching and CSP compliance This implementation could impact application performance.",
        "suggestion": "Move JavaScript to external file and reference it",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 1,
        "column": 1,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add skip navigation link as first interactive element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>\n",
          "description": "Add skip navigation link as first interactive element",
          "content": "    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 z-50\">Skip to main content</a>\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/dashboard.html",
        "line": 143,
        "column": 7,
        "message": "Main content area lacks proper landmark identification",
        "description": "Main content area lacks proper landmark identification This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute to main element for skip navigation",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 99,
        "column": 5,
        "message": "Button is missing accessible label - only contains emoji",
        "description": "Button is missing accessible label - only contains emoji This will likely cause errors during execution.",
        "suggestion": "Add aria-label or text content for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or text content for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 121,
        "column": 11,
        "message": "Links should have descriptive text instead of just emoji",
        "description": "Links should have descriptive text instead of just emoji This code works but could be improved for better maintainability.",
        "suggestion": "Replace emoji with descriptive text or add aria-label",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Replace emoji with descriptive text or add aria-label",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 122,
        "column": 11,
        "message": "Links should have descriptive text instead of just emoji",
        "description": "Links should have descriptive text instead of just emoji This code works but could be improved for better maintainability.",
        "suggestion": "Replace emoji with descriptive text or add aria-label",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>",
          "description": "Replace emoji with descriptive text or add aria-label",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 122,
        "column": 11,
        "message": "External link missing rel=\"noopener noreferrer\" for security",
        "description": "External link missing rel=\"noopener noreferrer\" for security This code works but could be improved for better maintainability.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>",
          "description": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"View project on GitHub\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 98,
        "column": 3,
        "message": "Main content should have skip navigation link for keyboard users",
        "description": "Main content should have skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add skip navigation link before main content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-3 py-2 rounded z-50\">Skip to main content</a>",
          "description": "Add skip navigation link before main content",
          "content": "  <body>\n    <a href=\"#main\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-3 py-2 rounded z-50\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 130,
        "column": 7,
        "message": "Main element should have id for skip navigation",
        "description": "Main element should have id for skip navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add id=\"main\" to main element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main id=\"main\" class=\"component-section\">",
          "description": "Add id=\"main\" to main element",
          "content": "      <main id=\"main\" class=\"component-section\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 108,
        "column": 11,
        "message": "Hardcoded color values should use CSS custom properties for consistency",
        "description": "Hardcoded color values should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Use CSS custom properties instead of hardcoded colors",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 13,
        "column": 5,
        "message": "External CDN dependency may cause performance issues",
        "description": "External CDN dependency may cause performance issues This implementation could impact application performance.",
        "suggestion": "Consider bundling Tailwind CSS locally for better performance and reliability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/checkbox.html",
        "line": 20,
        "column": 9,
        "message": "Color contrast may be insufficient with glass morphism effects",
        "description": "Color contrast may be insufficient with glass morphism effects This code works but could be improved for better maintainability.",
        "suggestion": "Ensure sufficient color contrast ratios meet WCAG guidelines",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 105,
        "column": 5,
        "message": "Button element lacks proper ARIA attributes and semantic meaning",
        "description": "Button element lacks proper ARIA attributes and semantic meaning This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and role attributes for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label and role attributes for better accessibility",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 106,
        "column": 7,
        "message": "Missing alt text for decorative emoji in button",
        "description": "Missing alt text for decorative emoji in button This code works but could be improved for better maintainability.",
        "suggestion": "Replace emoji with icon or add screen reader accessible text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <span aria-hidden=\"true\">🌓</span> Toggle Theme",
          "description": "Replace emoji with icon or add screen reader accessible text",
          "content": "      <span aria-hidden=\"true\">🌓</span> Toggle Theme"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 126,
        "column": 11,
        "message": "Missing alt text for decorative emojis in navigation links",
        "description": "Missing alt text for decorative emojis in navigation links This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden attribute to decorative emojis",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\"><span aria-hidden=\"true\">📖</span> Storybook</a>",
          "description": "Add aria-hidden attribute to decorative emojis",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\"><span aria-hidden=\"true\">📖</span> Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 127,
        "column": 11,
        "message": "Missing alt text for decorative emojis in navigation links",
        "description": "Missing alt text for decorative emojis in navigation links This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden attribute to decorative emojis",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            ><span aria-hidden=\"true\">🔗</span> GitHub</a\n          >",
          "description": "Add aria-hidden attribute to decorative emojis",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            ><span aria-hidden=\"true\">🔗</span> GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 142,
        "column": 13,
        "message": "Missing alt text for decorative emoji in content",
        "description": "Missing alt text for decorative emoji in content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden attribute to decorative emoji",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <p class=\"text-gray-600\">\n              <span aria-hidden=\"true\">📦</span> Static HTML preview for <strong>card</strong> component\n            </p>",
          "description": "Add aria-hidden attribute to decorative emoji",
          "content": "            <p class=\"text-gray-600\">\n              <span aria-hidden=\"true\">📦</span> Static HTML preview for <strong>card</strong> component\n            </p>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-security-5",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 127,
        "column": 11,
        "message": "External link without rel=\"noopener noreferrer\" may be vulnerable to window.opener attacks",
        "description": "External link without rel=\"noopener noreferrer\" may be vulnerable to window.opener attacks This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            ><span aria-hidden=\"true\">🔗</span> GitHub</a\n          >",
          "description": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            ><span aria-hidden=\"true\">🔗</span> GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-security-6",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 188,
        "column": 11,
        "message": "External link without rel=\"noopener noreferrer\" may be vulnerable to window.opener attacks",
        "description": "External link without rel=\"noopener noreferrer\" may be vulnerable to window.opener attacks This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel=\"noopener noreferrer\" to external links with target=\"_blank\"",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 16,
        "column": 5,
        "message": "Using CDN for Tailwind CSS in production may impact performance",
        "description": "Using CDN for Tailwind CSS in production may impact performance This implementation could impact application performance.",
        "suggestion": "Consider using a local build of Tailwind CSS for better performance and reliability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 104,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add a skip navigation link as the first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>",
          "description": "Add a skip navigation link as the first focusable element",
          "content": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/card.html",
        "line": 134,
        "column": 7,
        "message": "Main content area should have id for skip navigation",
        "description": "Main content area should have id for skip navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation target",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute to main element for skip navigation target",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 98,
        "column": 5,
        "message": "Button element lacks accessible text content - using only emoji",
        "description": "Button element lacks accessible text content - using only emoji This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or text content for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or text content for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 17,
        "column": 5,
        "message": "Using CDN for critical CSS framework without integrity check",
        "description": "Using CDN for critical CSS framework without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 96,
        "column": 3,
        "message": "Missing skip navigation link for keyboard users",
        "description": "Missing skip navigation link for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add skip navigation link as first focusable element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>",
          "description": "Add skip navigation link as first focusable element",
          "content": "  <body>\n    <a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 rounded\">Skip to main content</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 124,
        "column": 7,
        "message": "Main content area lacks proper landmark identification",
        "description": "Main content area lacks proper landmark identification This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to main element for skip navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <main class=\"component-section\" id=\"main-content\">",
          "description": "Add id attribute to main element for skip navigation",
          "content": "      <main class=\"component-section\" id=\"main-content\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 17,
        "column": 5,
        "message": "Missing resource hints for external CDN",
        "description": "Missing resource hints for external CDN This implementation could impact application performance.",
        "suggestion": "Add dns-prefetch or preconnect for better performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "    <link rel=\"dns-prefetch\" href=\"//cdn.tailwindcss.com\">\n",
          "description": "Add dns-prefetch or preconnect for better performance",
          "content": "    <link rel=\"dns-prefetch\" href=\"//cdn.tailwindcss.com\">\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 138,
        "column": 13,
        "message": "Hard-coded color values should use CSS custom properties for consistency",
        "description": "Hard-coded color values should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Replace hard-coded colors with CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/button.html",
        "line": 148,
        "column": 11,
        "message": "Code blocks lack proper language identification",
        "description": "Code blocks lack proper language identification This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute to code elements for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"javascript\">",
          "description": "Add language attribute to code elements for screen readers",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n          ><code lang=\"javascript\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 13,
        "column": 5,
        "message": "Loading external script from CDN without integrity check",
        "description": "Loading external script from CDN without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-[hash]\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes for security",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-[hash]\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 104,
        "column": 5,
        "message": "Button missing accessible label - emoji alone is not sufficient for screen readers",
        "description": "Button missing accessible label - emoji alone is not sufficient for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visible text for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label or visible text for screen readers",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 119,
        "column": 11,
        "message": "Links with emoji-only or non-descriptive text need better accessibility labels",
        "description": "Links with emoji-only or non-descriptive text need better accessibility labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>",
          "description": "Add aria-label for better screen reader support",
          "content": "          <a class=\"nav-link\" href=\"storybook.html\" aria-label=\"View Storybook documentation\">📖 Storybook</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 120,
        "column": 11,
        "message": "Links with emoji-only or non-descriptive text need better accessibility labels",
        "description": "Links with emoji-only or non-descriptive text need better accessibility labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>",
          "description": "Add aria-label for better screen reader support",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"View project on GitHub (opens in new tab)\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-accessibility-4",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 120,
        "column": 11,
        "message": "External link opens in new tab without security attributes",
        "description": "External link opens in new tab without security attributes This will likely cause errors during execution.",
        "suggestion": "Add rel=\"noopener noreferrer\" for security when using target=\"_blank\"",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>",
          "description": "Add rel=\"noopener noreferrer\" for security when using target=\"_blank\"",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-accessibility-5",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 168,
        "column": 11,
        "message": "External link opens in new tab without security attributes",
        "description": "External link opens in new tab without security attributes This will likely cause errors during execution.",
        "suggestion": "Add rel=\"noopener noreferrer\" for security when using target=\"_blank\"",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>",
          "description": "Add rel=\"noopener noreferrer\" for security when using target=\"_blank\"",
          "content": "          <a\n            class=\"text-blue-400 hover:text-blue-300\"\n            href=\"https://liquidify-fw9pi7oj6-tulio-pinheiro-cunha-s-projects.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Live Demo\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 114,
        "column": 11,
        "message": "Hardcoded colors in HTML should use CSS custom properties for consistency",
        "description": "Hardcoded colors in HTML should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Move inline styles to CSS classes using custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/badge.html",
        "line": 132,
        "column": 11,
        "message": "Hardcoded colors in HTML should use CSS custom properties for consistency",
        "description": "Hardcoded colors in HTML should use CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Move inline styles to CSS classes using custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 12,
        "column": 5,
        "message": "Loading external scripts from CDN without integrity check",
        "description": "Loading external scripts from CDN without integrity check This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add integrity and crossorigin attributes for security",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>",
          "description": "Add integrity and crossorigin attributes for security",
          "content": "    <script src=\"https://cdn.tailwindcss.com\" integrity=\"sha384-\" crossorigin=\"anonymous\"></script>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 109,
        "column": 5,
        "message": "Button element lacks proper accessibility attributes",
        "description": "Button element lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and role attributes for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\">\n      🌓 Toggle Theme\n    </button>",
          "description": "Add aria-label and role attributes for better accessibility",
          "content": "    <button class=\"theme-toggle\" onclick=\"toggleTheme()\" aria-label=\"Toggle between light and dark theme\" role=\"button\">\n      🌓 Toggle Theme\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 125,
        "column": 11,
        "message": "Navigation links lack proper accessibility attributes",
        "description": "Navigation links lack proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for back navigation link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a class=\"nav-link\" href=\"index.html\" aria-label=\"Go back to component overview\">← Back to Overview</a>",
          "description": "Add aria-label for back navigation link",
          "content": "          <a class=\"nav-link\" href=\"index.html\" aria-label=\"Go back to component overview\">← Back to Overview</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 127,
        "column": 11,
        "message": "External link lacks proper accessibility attributes",
        "description": "External link lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for external GitHub link",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Open GitHub repository in new tab\"\n            >🔗 GitHub</a\n          >",
          "description": "Add aria-label for external GitHub link",
          "content": "          <a\n            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            aria-label=\"Open GitHub repository in new tab\"\n            >🔗 GitHub</a\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 149,
        "column": 11,
        "message": "Code blocks lack proper semantic structure",
        "description": "Code blocks lack proper semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute and proper labeling for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"img\"\n            aria-label=\"Code example showing Avatar component usage\"\n          ><code lang=\"jsx\">import {{ \"{\" }} GlassAvatar } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassAvatar&gt;\n      Example content\n    &lt;/GlassAvatar&gt;\n  );\n}</code></pre>",
          "description": "Add language attribute and proper labeling for screen readers",
          "content": "          <pre\n            class=\"bg-gray-800 text-green-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"img\"\n            aria-label=\"Code example showing Avatar component usage\"\n          ><code lang=\"jsx\">import {{ \"{\" }} GlassAvatar } from '@tuliocunha23/liquidui';\n\nfunction MyComponent() &#123;\n  return (\n    &lt;GlassAvatar&gt;\n      Example content\n    &lt;/GlassAvatar&gt;\n  );\n}</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 164,
        "column": 11,
        "message": "Code block lacks proper semantic structure",
        "description": "Code block lacks proper semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Add language attribute and proper labeling for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"img\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>",
          "description": "Add language attribute and proper labeling for screen readers",
          "content": "          <pre\n            class=\"bg-gray-800 text-blue-400 p-4 rounded-lg overflow-x-auto\"\n            role=\"img\"\n            aria-label=\"NPM installation command\"\n          ><code lang=\"bash\">npm install @tuliocunha23/liquidui</code></pre>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 177,
        "column": 7,
        "message": "Inefficient CSS selector using attribute selector",
        "description": "Inefficient CSS selector using attribute selector This implementation could impact application performance.",
        "suggestion": "Consider using class-based selectors for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/static-export/avatar.html",
        "line": 128,
        "column": 13,
        "message": "Inconsistent indentation in HTML structure",
        "description": "Inconsistent indentation in HTML structure This violates code style conventions and may reduce readability.",
        "suggestion": "Maintain consistent indentation throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            >🔗 GitHub</a>",
          "description": "Maintain consistent indentation throughout the file",
          "content": "            class=\"nav-link\"\n            href=\"https://github.com/tuliopc23/LiqUIdify\"\n            target=\"_blank\"\n            >🔗 GitHub</a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 8,
        "column": 5,
        "message": "Network requests and page navigations lack proper error handling and retry mechanisms",
        "description": "Network requests and page navigations lack proper error handling and retry mechanisms This code works but could be improved for better maintainability.",
        "suggestion": "Add error handling and retry logic for page.goto() and other network operations",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  test.beforeEach(async ({ page }) => {\n    try {\n      await page.goto(TEST_APP_URL, { waitUntil: 'networkidle' });\n    } catch (error) {\n      console.error('Failed to navigate to test app:', error);\n      throw error;\n    }\n  });",
          "description": "Add error handling and retry logic for page.goto() and other network operations",
          "content": "  test.beforeEach(async ({ page }) => {\n    try {\n      await page.goto(TEST_APP_URL, { waitUntil: 'networkidle' });\n    } catch (error) {\n      console.error('Failed to navigate to test app:', error);\n      throw error;\n    }\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 161,
        "column": 55,
        "message": "Hard-coded timeout values and lack of configurable wait strategies",
        "description": "Hard-coded timeout values and lack of configurable wait strategies This implementation could impact application performance.",
        "suggestion": "Use configurable timeout constants and more specific wait conditions",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const TOAST_AUTO_DISMISS_TIMEOUT = 6000;\n\n// In the test:\nawait expect(errorToast).not.toBeVisible({ timeout: TOAST_AUTO_DISMISS_TIMEOUT });",
          "description": "Use configurable timeout constants and more specific wait conditions",
          "content": "const TOAST_AUTO_DISMISS_TIMEOUT = 6000;\n\n// In the test:\nawait expect(errorToast).not.toBeVisible({ timeout: TOAST_AUTO_DISMISS_TIMEOUT });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 197,
        "column": 32,
        "message": "Magic numbers used for expected counts without validation",
        "description": "Magic numbers used for expected counts without validation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Replace magic numbers with named constants or dynamic checks",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const EXPECTED_SEARCH_RESULTS = 5;\n      await expect(results).toHaveCount(EXPECTED_SEARCH_RESULTS);",
          "description": "Replace magic numbers with named constants or dynamic checks",
          "content": "      const EXPECTED_SEARCH_RESULTS = 5;\n      await expect(results).toHaveCount(EXPECTED_SEARCH_RESULTS);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 244,
        "column": 7,
        "message": "Assertions without proper error context or debugging information",
        "description": "Assertions without proper error context or debugging information This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive error messages and debugging context to assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      expect(visibleRows).toBeLessThan(10, `Expected filtered results to be less than 10, but got ${visibleRows}`);",
          "description": "Add descriptive error messages and debugging context to assertions",
          "content": "      expect(visibleRows).toBeLessThan(10, `Expected filtered results to be less than 10, but got ${visibleRows}`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 169,
        "column": 23,
        "message": "Inefficient element selection and repeated queries",
        "description": "Inefficient element selection and repeated queries This implementation could impact application performance.",
        "suggestion": "Cache frequently used selectors and use more efficient locator strategies",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const statusLocator = page.getByRole(\"status\");\n      const toasts = statusLocator;\n      await expect(toasts).toHaveCount(3);",
          "description": "Cache frequently used selectors and use more efficient locator strategies",
          "content": "      const statusLocator = page.getByRole(\"status\");\n      const toasts = statusLocator;\n      await expect(toasts).toHaveCount(3);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 368,
        "column": 5,
        "message": "Accessibility tests are incomplete and don't cover all WCAG guidelines",
        "description": "Accessibility tests are incomplete and don't cover all WCAG guidelines This code works but could be improved for better maintainability.",
        "suggestion": "Add comprehensive accessibility testing including color contrast, focus management, and ARIA compliance",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 4,
        "column": 37,
        "message": "Inconsistent string quote usage throughout the file",
        "description": "Inconsistent string quote usage throughout the file This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent double quotes throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const TEST_APP_URL = process.env.TEST_APP_URL || \"http://localhost:3000\";",
          "description": "Use consistent double quotes throughout the file",
          "content": "const TEST_APP_URL = process.env.TEST_APP_URL || \"http://localhost:3000\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 4,
        "column": 21,
        "message": "Missing validation for environment variables and configuration",
        "description": "Missing validation for environment variables and configuration This code works but could be improved for better maintainability.",
        "suggestion": "Add proper validation for TEST_APP_URL and other configuration values",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const TEST_APP_URL = process.env.TEST_APP_URL || \"http://localhost:3000\";\n\nif (!TEST_APP_URL) {\n  throw new Error(\"TEST_APP_URL must be defined\");\n}\n\ntry {\n  new URL(TEST_APP_URL);\n} catch (error) {\n  throw new Error(`Invalid TEST_APP_URL format: ${TEST_APP_URL}`);\n}",
          "description": "Add proper validation for TEST_APP_URL and other configuration values",
          "content": "const TEST_APP_URL = process.env.TEST_APP_URL || \"http://localhost:3000\";\n\nif (!TEST_APP_URL) {\n  throw new Error(\"TEST_APP_URL must be defined\");\n}\n\ntry {\n  new URL(TEST_APP_URL);\n} catch (error) {\n  throw new Error(`Invalid TEST_APP_URL format: ${TEST_APP_URL}`);\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 165,
        "column": 7,
        "message": "Potential race conditions in async operations without proper sequencing",
        "description": "Potential race conditions in async operations without proper sequencing This implementation could impact application performance.",
        "suggestion": "Add proper sequencing and wait conditions between rapid successive operations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      await page.getByRole(\"button\", { name: \"Show Success Toast\" }).click();\n      await page.waitForTimeout(100);\n      await page.getByRole(\"button\", { name: \"Show Info Toast\" }).click();\n      await page.waitForTimeout(100);\n      await page.getByRole(\"button\", { name: \"Show Warning Toast\" }).click();",
          "description": "Add proper sequencing and wait conditions between rapid successive operations",
          "content": "      await page.getByRole(\"button\", { name: \"Show Success Toast\" }).click();\n      await page.waitForTimeout(100);\n      await page.getByRole(\"button\", { name: \"Show Info Toast\" }).click();\n      await page.waitForTimeout(100);\n      await page.getByRole(\"button\", { name: \"Show Warning Toast\" }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts-bug-9",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/user-flows.spec.ts",
        "line": 205,
        "column": 34,
        "message": "Hardcoded URLs and paths that may break in different environments",
        "description": "Hardcoded URLs and paths that may break in different environments This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use relative paths or environment-specific URL construction",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      await expect(page).toHaveURL(new RegExp(`${TEST_APP_URL.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}/components/glass-button`));",
          "description": "Use relative paths or environment-specific URL construction",
          "content": "      await expect(page).toHaveURL(new RegExp(`${TEST_APP_URL.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}/components/glass-button`));"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-teardown.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-teardown.ts",
        "line": 3,
        "column": 1,
        "message": "Function lacks error handling and may fail silently during cleanup operations",
        "description": "Function lacks error handling and may fail silently during cleanup operations This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential errors during cleanup and ensure proper logging",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "async function globalTeardown(config: FullConfig) {\n  try {\n    console.log(\"🧹 Cleaning up after E2E tests\");\n\n    // Clean up any test data or resources\n    delete process.env.E2E_TEST;\n  } catch (error) {\n    console.error(\"❌ Error during global teardown:\", error);\n    throw error;\n  }\n}",
          "description": "Add try-catch block to handle potential errors during cleanup and ensure proper logging",
          "content": "async function globalTeardown(config: FullConfig) {\n  try {\n    console.log(\"🧹 Cleaning up after E2E tests\");\n\n    // Clean up any test data or resources\n    delete process.env.E2E_TEST;\n  } catch (error) {\n    console.error(\"❌ Error during global teardown:\", error);\n    throw error;\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-teardown.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-teardown.ts",
        "line": 3,
        "column": 1,
        "message": "Async function without await operations may not need to be async",
        "description": "Async function without await operations may not need to be async This implementation could impact application performance.",
        "suggestion": "Remove async keyword if no asynchronous operations are needed, or add proper async cleanup operations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function globalTeardown(config: FullConfig) {\n  console.log(\"🧹 Cleaning up after E2E tests\");\n\n  // Clean up any test data or resources\n  delete process.env.E2E_TEST;\n}",
          "description": "Remove async keyword if no asynchronous operations are needed, or add proper async cleanup operations",
          "content": "function globalTeardown(config: FullConfig) {\n  console.log(\"🧹 Cleaning up after E2E tests\");\n\n  // Clean up any test data or resources\n  delete process.env.E2E_TEST;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-setup.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-setup.ts",
        "line": 5,
        "column": 21,
        "message": "Potential null/undefined access to config.projects[0].use without checking if projects array has elements",
        "description": "Potential null/undefined access to config.projects[0].use without checking if projects array has elements This code works but could be improved for better maintainability.",
        "suggestion": "Add null/undefined checks before accessing array elements and nested properties",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  console.log(`   Base URL: ${config.projects[0]?.use?.baseURL || 'Not configured'}`);",
          "description": "Add null/undefined checks before accessing array elements and nested properties",
          "content": "  console.log(`   Base URL: ${config.projects[0]?.use?.baseURL || 'Not configured'}`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-setup.ts-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/global-setup.ts",
        "line": 3,
        "column": 1,
        "message": "No error handling for potential failures in global setup",
        "description": "No error handling for potential failures in global setup This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch blocks to handle potential errors during setup",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "async function globalSetup(config: FullConfig) {\n  try {\n    console.log(\"🎭 Starting Playwright E2E Tests\");\n    console.log(`   Running ${config.projects.length} projects`);\n    console.log(`   Base URL: ${config.projects[0]?.use?.baseURL || 'Not configured'}`);\n\n    // Set up any global test data or environment\n    process.env.E2E_TEST = \"true\";\n\n    // Return a teardown function\n    return async () => {\n      console.log(\"🏁 E2E Tests Complete\");\n    };\n  } catch (error) {\n    console.error(\"❌ Global setup failed:\", error);\n    throw error;\n  }\n}",
          "description": "Add try-catch blocks to handle potential errors during setup",
          "content": "async function globalSetup(config: FullConfig) {\n  try {\n    console.log(\"🎭 Starting Playwright E2E Tests\");\n    console.log(`   Running ${config.projects.length} projects`);\n    console.log(`   Base URL: ${config.projects[0]?.use?.baseURL || 'Not configured'}`);\n\n    // Set up any global test data or environment\n    process.env.E2E_TEST = \"true\";\n\n    // Return a teardown function\n    return async () => {\n      console.log(\"🏁 E2E Tests Complete\");\n    };\n  } catch (error) {\n    console.error(\"❌ Global setup failed:\", error);\n    throw error;\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 13,
        "column": 7,
        "message": "Empty catch block in beforeEach hook - error information is lost and may hide important issues",
        "description": "Empty catch block in beforeEach hook - error information is lost and may hide important issues This code works but could be improved for better maintainability.",
        "suggestion": "Log the error before skipping the test to aid debugging",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    } catch (error) {\n      console.warn('Failed to load documentation site:', error);\n      test.skip();\n    }",
          "description": "Log the error before skipping the test to aid debugging",
          "content": "    } catch (error) {\n      console.warn('Failed to load documentation site:', error);\n      test.skip();\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 32,
        "column": 5,
        "message": "Using deprecated click method with text selector - less reliable and slower than explicit locators",
        "description": "Using deprecated click method with text selector - less reliable and slower than explicit locators This implementation could impact application performance.",
        "suggestion": "Use explicit locators instead of text-based selectors",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.getByRole('link', { name: 'Getting Started' }).click();",
          "description": "Use explicit locators instead of text-based selectors",
          "content": "    await page.getByRole('link', { name: 'Getting Started' }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 36,
        "column": 5,
        "message": "Using deprecated click method with text selector",
        "description": "Using deprecated click method with text selector This implementation could impact application performance.",
        "suggestion": "Use explicit locators instead of text-based selectors",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.getByRole('link', { name: 'Components' }).click();",
          "description": "Use explicit locators instead of text-based selectors",
          "content": "    await page.getByRole('link', { name: 'Components' }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 40,
        "column": 5,
        "message": "Using deprecated click method with text selector",
        "description": "Using deprecated click method with text selector This implementation could impact application performance.",
        "suggestion": "Use explicit locators instead of text-based selectors",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.getByRole('link', { name: 'API Reference' }).click();",
          "description": "Use explicit locators instead of text-based selectors",
          "content": "    await page.getByRole('link', { name: 'API Reference' }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 48,
        "column": 5,
        "message": "Using deprecated click method with text selector",
        "description": "Using deprecated click method with text selector This implementation could impact application performance.",
        "suggestion": "Use explicit locators instead of text-based selectors",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.getByRole('link', { name: 'GlassButton' }).click();",
          "description": "Use explicit locators instead of text-based selectors",
          "content": "    await page.getByRole('link', { name: 'GlassButton' }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 237,
        "column": 5,
        "message": "Hard-coded performance threshold may not be appropriate for all environments",
        "description": "Hard-coded performance threshold may not be appropriate for all environments This implementation could impact application performance.",
        "suggestion": "Use environment-specific thresholds or make them configurable",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 129,
        "column": 5,
        "message": "Using deprecated click method with text selector",
        "description": "Using deprecated click method with text selector This implementation could impact application performance.",
        "suggestion": "Use explicit locators instead of text-based selectors",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.getByRole('button', { name: /components/i }).click();",
          "description": "Use explicit locators instead of text-based selectors",
          "content": "    await page.getByRole('button', { name: /components/i }).click();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 141,
        "column": 5,
        "message": "Missing error handling for viewport size changes",
        "description": "Missing error handling for viewport size changes This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block around viewport changes",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    try {\n      await page.setViewportSize({ width: 375, height: 667 });\n    } catch (error) {\n      console.warn('Failed to set viewport size:', error);\n      test.skip();\n    }",
          "description": "Add try-catch block around viewport changes",
          "content": "    try {\n      await page.setViewportSize({ width: 375, height: 667 });\n    } catch (error) {\n      console.warn('Failed to set viewport size:', error);\n      test.skip();\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-error-handling-8",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 220,
        "column": 5,
        "message": "Missing error handling for 404 page test - navigation might fail",
        "description": "Missing error handling for 404 page test - navigation might fail This code works but could be improved for better maintainability.",
        "suggestion": "Add error handling for expected 404 responses",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    try {\n      const response = await page.goto(\"/non-existent-page\");\n      expect(response?.status()).toBe(404);\n    } catch (error) {\n      // Expected for 404 pages in some frameworks\n      console.log('Navigation to 404 page failed as expected');\n    }",
          "description": "Add error handling for expected 404 responses",
          "content": "    try {\n      const response = await page.goto(\"/non-existent-page\");\n      expect(response?.status()).toBe(404);\n    } catch (error) {\n      // Expected for 404 pages in some frameworks\n      console.log('Navigation to 404 page failed as expected');\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/documentation-site.spec.ts",
        "line": 262,
        "column": 5,
        "message": "Missing assertion for focus visibility styles in keyboard navigation test",
        "description": "Missing assertion for focus visibility styles in keyboard navigation test This code works but could be improved for better maintainability.",
        "suggestion": "Verify that focused elements have visible focus indicators",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await page.keyboard.press(\"Tab\");\n    const focusedElement = page.locator(\":focus\");\n    await expect(focusedElement).toBeVisible();\n    // Verify focus indicator is visible\n    const focusedStyles = await focusedElement.evaluate(el => \n      getComputedStyle(el).getPropertyValue('outline')\n    );\n    expect(focusedStyles).not.toBe('none');",
          "description": "Verify that focused elements have visible focus indicators",
          "content": "    await page.keyboard.press(\"Tab\");\n    const focusedElement = page.locator(\":focus\");\n    await expect(focusedElement).toBeVisible();\n    // Verify focus indicator is visible\n    const focusedStyles = await focusedElement.evaluate(el => \n      getComputedStyle(el).getPropertyValue('outline')\n    );\n    expect(focusedStyles).not.toBe('none');"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 23,
        "column": 5,
        "message": "Using deprecated waitForTimeout() method which causes flaky tests",
        "description": "Using deprecated waitForTimeout() method which causes flaky tests This implementation could impact application performance.",
        "suggestion": "Use waitForLoadState() or explicit element waiting instead of arbitrary timeouts",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Wait for story to load\n    await expect(button).toBeVisible();",
          "description": "Use waitForLoadState() or explicit element waiting instead of arbitrary timeouts",
          "content": "    // Wait for story to load\n    await expect(button).toBeVisible();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 18,
        "column": 5,
        "message": "Missing error handling for navigation and element interactions",
        "description": "Missing error handling for navigation and element interactions This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch blocks around navigation and element interactions to handle failures gracefully",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 145,
        "column": 7,
        "message": "Using deprecated waitForTimeout() method which causes flaky tests",
        "description": "Using deprecated waitForTimeout() method which causes flaky tests This implementation could impact application performance.",
        "suggestion": "Use waitForLoadState() or explicit element waiting instead of arbitrary timeouts",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      await page.waitForLoadState('networkidle');",
          "description": "Use waitForLoadState() or explicit element waiting instead of arbitrary timeouts",
          "content": "      await page.waitForLoadState('networkidle');"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 32,
        "column": 33,
        "message": "Hardcoded magic numbers without explanation",
        "description": "Hardcoded magic numbers without explanation This violates code style conventions and may reduce readability.",
        "suggestion": "Extract magic numbers to named constants with clear purpose",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const EXPECTED_CARD_VARIANTS = 3; // default, elevated, inset\n    await expect(cards).toHaveCount(EXPECTED_CARD_VARIANTS);",
          "description": "Extract magic numbers to named constants with clear purpose",
          "content": "    const EXPECTED_CARD_VARIANTS = 3; // default, elevated, inset\n    await expect(cards).toHaveCount(EXPECTED_CARD_VARIANTS);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 173,
        "column": 5,
        "message": "Weak error handling with generic try-catch and test.skip()",
        "description": "Weak error handling with generic try-catch and test.skip() This code works but could be improved for better maintainability.",
        "suggestion": "Implement more specific error handling and logging for better debugging",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    } catch (error) {\n      console.log('Documentation server not available, skipping test:', error.message);\n      test.skip();\n    }",
          "description": "Implement more specific error handling and logging for better debugging",
          "content": "    } catch (error) {\n      console.log('Documentation server not available, skipping test:', error.message);\n      test.skip();\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 206,
        "column": 5,
        "message": "Hardcoded performance thresholds may not be appropriate for all environments",
        "description": "Hardcoded performance thresholds may not be appropriate for all environments This implementation could impact application performance.",
        "suggestion": "Make performance thresholds configurable based on environment or test configuration",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const DOM_LOAD_THRESHOLD = process.env.CI ? 2000 : 1000;\n    const COMPLETE_LOAD_THRESHOLD = process.env.CI ? 4000 : 2000;\n    \n    expect(metrics.domContentLoaded).toBeLessThan(DOM_LOAD_THRESHOLD);\n    expect(metrics.loadComplete).toBeLessThan(COMPLETE_LOAD_THRESHOLD);",
          "description": "Make performance thresholds configurable based on environment or test configuration",
          "content": "    const DOM_LOAD_THRESHOLD = process.env.CI ? 2000 : 1000;\n    const COMPLETE_LOAD_THRESHOLD = process.env.CI ? 4000 : 2000;\n    \n    expect(metrics.domContentLoaded).toBeLessThan(DOM_LOAD_THRESHOLD);\n    expect(metrics.loadComplete).toBeLessThan(COMPLETE_LOAD_THRESHOLD);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 74,
        "column": 5,
        "message": "Keyboard navigation test assumes specific tab order which may be fragile",
        "description": "Keyboard navigation test assumes specific tab order which may be fragile This code works but could be improved for better maintainability.",
        "suggestion": "Use more reliable selectors or focus management instead of assuming tab order",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts-structure-7",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/tests/e2e/component-showcase.spec.ts",
        "line": 1,
        "column": 1,
        "message": "Large test file with multiple responsibilities should be split",
        "description": "Large test file with multiple responsibilities should be split This code works but could be improved for better maintainability.",
        "suggestion": "Split into separate test files by functionality (accessibility, performance, visual regression, etc.)",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx",
        "line": 168,
        "column": 54,
        "message": "External links should include aria-label or screen reader indication that they open in a new tab/window",
        "description": "External links should include aria-label or screen reader indication that they open in a new tab/window This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links to inform screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAG/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">",
          "description": "Add aria-label or visual indicator for external links to inform screen reader users",
          "content": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAG/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx",
        "line": 172,
        "column": 54,
        "message": "External links should include aria-label or screen reader indication that they open in a new tab/window",
        "description": "External links should include aria-label or screen reader indication that they open in a new tab/window This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links to inform screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"ARIA Authoring Practices\" href=\"https://www.w3.org/WAI/ARIA/apg/\" aria-label=\"ARIA Authoring Practices (opens in new tab)\">",
          "description": "Add aria-label or visual indicator for external links to inform screen reader users",
          "content": "<Card title=\"ARIA Authoring Practices\" href=\"https://www.w3.org/WAI/ARIA/apg/\" aria-label=\"ARIA Authoring Practices (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx",
        "line": 176,
        "column": 38,
        "message": "External links should include aria-label or screen reader indication that they open in a new tab/window",
        "description": "External links should include aria-label or screen reader indication that they open in a new tab/window This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or visual indicator for external links to inform screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"WebAIM\" href=\"https://webaim.org/\" aria-label=\"WebAIM (opens in new tab)\">",
          "description": "Add aria-label or visual indicator for external links to inform screen reader users",
          "content": "<Card title=\"WebAIM\" href=\"https://webaim.org/\" aria-label=\"WebAIM (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/guides/accessibility.mdx",
        "line": 168,
        "column": 60,
        "message": "Broken URL in WCAG Guidelines link - contains typo 'WAG' instead of 'WAI'",
        "description": "Broken URL in WCAG Guidelines link - contains typo 'WAG' instead of 'WAI' This will likely cause errors during execution.",
        "suggestion": "Fix URL from 'https://www.w3.org/WAG/WCAG21/quickref/' to 'https://www.w3.org/WAI/WCAG21/quickref/'",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAI/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">",
          "description": "Fix URL from 'https://www.w3.org/WAG/WCAG21/quickref/' to 'https://www.w3.org/WAI/WCAG21/quickref/'",
          "content": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAI/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 262,
        "column": 17,
        "message": "Use of dangerouslySetInnerHTML creates XSS vulnerability without proper sanitization",
        "description": "Use of dangerouslySetInnerHTML creates XSS vulnerability without proper sanitization This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Sanitize HTML content or use a library like DOMPurify to prevent XSS attacks",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);",
          "description": "Sanitize HTML content or use a library like DOMPurify to prevent XSS attacks",
          "content": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 138,
        "column": 9,
        "message": "Missing htmlFor attribute on label element",
        "description": "Missing htmlFor attribute on label element This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to associate label with form control",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label htmlFor=\"subject\" className=\"text-sm font-medium mb-2 block\">",
          "description": "Add htmlFor attribute to associate label with form control",
          "content": "        <label htmlFor=\"subject\" className=\"text-sm font-medium mb-2 block\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 156,
        "column": 9,
        "message": "Missing htmlFor attribute on label element",
        "description": "Missing htmlFor attribute on label element This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to associate label with form control",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label htmlFor=\"message\" className=\"text-sm font-medium mb-2 block\">",
          "description": "Add htmlFor attribute to associate label with form control",
          "content": "        <label htmlFor=\"message\" className=\"text-sm font-medium mb-2 block\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 178,
        "column": 9,
        "message": "Missing htmlFor attribute on label element",
        "description": "Missing htmlFor attribute on label element This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to associate label with form control",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label htmlFor=\"feedback\" className=\"text-sm font-medium mb-2 block\">",
          "description": "Add htmlFor attribute to associate label with form control",
          "content": "        <label htmlFor=\"feedback\" className=\"text-sm font-medium mb-2 block\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 344,
        "column": 11,
        "message": "Missing htmlFor attribute on label element",
        "description": "Missing htmlFor attribute on label element This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to associate label with form control",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <label htmlFor=\"comment\" className=\"text-sm font-medium mb-2 block\">",
          "description": "Add htmlFor attribute to associate label with form control",
          "content": "          <label htmlFor=\"comment\" className=\"text-sm font-medium mb-2 block\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/textarea.mdx",
        "line": 199,
        "column": 5,
        "message": "Inefficient regex replacement in formatContent function",
        "description": "Inefficient regex replacement in formatContent function This implementation could impact application performance.",
        "suggestion": "Consider memoizing the formatContent function or using a more efficient parsing approach",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx",
        "line": 236,
        "column": 1,
        "message": "Missing screen reader description for keyboard navigation instructions",
        "description": "Missing screen reader description for keyboard navigation instructions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby or visually hidden text explaining keyboard shortcuts",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx",
        "line": 34,
        "column": 54,
        "message": "Examples with icons don't include alt text or aria-label for icon components",
        "description": "Examples with icons don't include alt text or aria-label for icon components This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to icon components or ensure they have descriptive text",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx",
        "line": 191,
        "column": 3,
        "message": "Missing memoization in controlled tabs example with async operations",
        "description": "Missing memoization in controlled tabs example with async operations This implementation could impact application performance.",
        "suggestion": "Wrap handleTabChange in useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleTabChange = useCallback(async (value: string) => {\n    setLoading(true);\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    setActiveTab(value);\n    setLoading(false);\n  }, []);",
          "description": "Wrap handleTabChange in useCallback to prevent unnecessary re-renders",
          "content": "  const handleTabChange = useCallback(async (value: string) => {\n    setLoading(true);\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    setActiveTab(value);\n    setLoading(false);\n  }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx",
        "line": 191,
        "column": 3,
        "message": "No error handling in async tab change operation",
        "description": "No error handling in async tab change operation This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential errors in tab loading",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleTabChange = async (value: string) => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      setActiveTab(value);\n    } catch (error) {\n      console.error('Failed to load tab content:', error);\n      // Handle error appropriately\n    } finally {\n      setLoading(false);\n    }\n  };",
          "description": "Add try-catch block to handle potential errors in tab loading",
          "content": "  const handleTabChange = async (value: string) => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      setActiveTab(value);\n    } catch (error) {\n      console.error('Failed to load tab content:', error);\n      // Handle error appropriately\n    } finally {\n      setLoading(false);\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/tabs.mdx",
        "line": 210,
        "column": 7,
        "message": "Missing aria-live region for dynamic loading states",
        "description": "Missing aria-live region for dynamic loading states This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' to announce loading state changes to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div className=\"flex items-center justify-center p-8\" aria-live=\"polite\" aria-label=\"Loading content\">\n          <GlassSpinner size=\"lg\" />\n        </div>",
          "description": "Add aria-live='polite' to announce loading state changes to screen readers",
          "content": "        <div className=\"flex items-center justify-center p-8\" aria-live=\"polite\" aria-label=\"Loading content\">\n          <GlassSpinner size=\"lg\" />\n        </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 147,
        "column": 38,
        "message": "Missing import statement for React hooks (useState, useEffect, useCallback) used in examples",
        "description": "Missing import statement for React hooks (useState, useEffect, useCallback) used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add import statement for React hooks at the top of example code blocks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction UserSelection() {",
          "description": "Add import statement for React hooks at the top of example code blocks",
          "content": "import React, { useState } from 'react';\n\nfunction UserSelection() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 186,
        "column": 38,
        "message": "Missing import statement for React hooks in CountrySelector example",
        "description": "Missing import statement for React hooks in CountrySelector example This code works but could be improved for better maintainability.",
        "suggestion": "Add import statement for React hooks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction CountrySelector() {",
          "description": "Add import statement for React hooks",
          "content": "import React, { useState } from 'react';\n\nfunction CountrySelector() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 215,
        "column": 24,
        "message": "Missing import statement for React hooks in FormExample",
        "description": "Missing import statement for React hooks in FormExample This code works but could be improved for better maintainability.",
        "suggestion": "Add import statement for React hooks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction FormExample() {",
          "description": "Add import statement for React hooks",
          "content": "import React, { useState } from 'react';\n\nfunction FormExample() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 328,
        "column": 24,
        "message": "Missing import statements for React hooks and utilities in AsyncSelect example",
        "description": "Missing import statements for React hooks and utilities in AsyncSelect example This code works but could be improved for better maintainability.",
        "suggestion": "Add import statements for React hooks, useCallback, useEffect, and debounce utility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash'; // or your preferred debounce implementation\n\nfunction AsyncSelect() {",
          "description": "Add import statements for React hooks, useCallback, useEffect, and debounce utility",
          "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash'; // or your preferred debounce implementation\n\nfunction AsyncSelect() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 160,
        "column": 11,
        "message": "Missing alt text for avatar images in examples could impact screen reader users",
        "description": "Missing alt text for avatar images in examples could impact screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Ensure GlassAvatar component includes proper alt text for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 346,
        "column": 34,
        "message": "Potential performance issue with debounce function recreation on every render",
        "description": "Potential performance issue with debounce function recreation on every render This implementation could impact application performance.",
        "suggestion": "Move debounce function outside component or use useMemo to prevent recreation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const debouncedSearch = useMemo(() => debounce(loadUsers, 300), []);",
          "description": "Move debounce function outside component or use useMemo to prevent recreation",
          "content": "  const debouncedSearch = useMemo(() => debounce(loadUsers, 300), []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-error-handling-6",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 338,
        "column": 7,
        "message": "Missing error state handling in AsyncSelect component",
        "description": "Missing error state handling in AsyncSelect component This code works but could be improved for better maintainability.",
        "suggestion": "Add error state to handle and display API failures to users",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");",
          "description": "Add error state to handle and display API failures to users",
          "content": "  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 356,
        "column": 7,
        "message": "onSearchChange prop is used but not documented in the Component API table",
        "description": "onSearchChange prop is used but not documented in the Component API table This code works but could be improved for better maintainability.",
        "suggestion": "Add onSearchChange prop to the Component API documentation table",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/select.mdx",
        "line": 357,
        "column": 7,
        "message": "loading prop is used but not documented in the Component API table",
        "description": "loading prop is used but not documented in the Component API table This code works but could be improved for better maintainability.",
        "suggestion": "Add loading prop to the Component API documentation table",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 23,
        "column": 7,
        "message": "Missing alt text for decorative icons in upload interface",
        "description": "Missing alt text for decorative icons in upload interface This code works but could be improved for better maintainability.",
        "suggestion": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <UploadIcon className=\"w-8 h-8 mx-auto mb-2\" aria-hidden=\"true\" />",
          "description": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
          "content": "      <UploadIcon className=\"w-8 h-8 mx-auto mb-2\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 50,
        "column": 9,
        "message": "Missing alt text for decorative icons in upload interface",
        "description": "Missing alt text for decorative icons in upload interface This code works but could be improved for better maintainability.",
        "suggestion": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <UploadCloudIcon className=\"w-12 h-12 mx-auto mb-4\" aria-hidden=\"true\" />",
          "description": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
          "content": "        <UploadCloudIcon className=\"w-12 h-12 mx-auto mb-4\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 64,
        "column": 9,
        "message": "Missing alt text for decorative icons in upload interface",
        "description": "Missing alt text for decorative icons in upload interface This code works but could be improved for better maintainability.",
        "suggestion": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <PlusIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />",
          "description": "Add alt=\"\" or aria-hidden=\"true\" to decorative icons to improve screen reader experience",
          "content": "        <PlusIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-security-3",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 156,
        "column": 15,
        "message": "File upload without proper server-side validation mentioned",
        "description": "File upload without proper server-side validation mentioned This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Ensure server-side validation is implemented to prevent malicious file uploads",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 167,
        "column": 11,
        "message": "Missing error handling for file upload progress tracking",
        "description": "Missing error handling for file upload progress tracking This code works but could be improved for better maintainability.",
        "suggestion": "Add proper error handling for progress tracking failures",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 217,
        "column": 13,
        "message": "Missing alt text for decorative icons",
        "description": "Missing alt text for decorative icons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden=\"true\" to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <ImageIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden=\"true\" to decorative icons",
          "content": "            <ImageIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 316,
        "column": 15,
        "message": "Missing alt text for decorative icons",
        "description": "Missing alt text for decorative icons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden=\"true\" to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <FileTextIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden=\"true\" to decorative icons",
          "content": "              <FileTextIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 381,
        "column": 15,
        "message": "Missing alt text for decorative icons",
        "description": "Missing alt text for decorative icons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden=\"true\" to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <CameraIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden=\"true\" to decorative icons",
          "content": "              <CameraIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 507,
        "column": 13,
        "message": "Missing alt text for decorative icons",
        "description": "Missing alt text for decorative icons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden=\"true\" to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <FolderIcon className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden=\"true\" to decorative icons",
          "content": "            <FolderIcon className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 526,
        "column": 23,
        "message": "Missing alt text for decorative icons",
        "description": "Missing alt text for decorative icons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden=\"true\" to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      <FileIcon className=\"w-6 h-6 text-muted-foreground\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden=\"true\" to decorative icons",
          "content": "                      <FileIcon className=\"w-6 h-6 text-muted-foreground\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-10",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 545,
        "column": 29,
        "message": "Missing alt text for status icons",
        "description": "Missing alt text for status icons This code works but could be improved for better maintainability.",
        "suggestion": "Add proper alt text or aria-label for status icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                            <CheckCircleIcon className=\"w-5 h-5 text-green-500\" aria-label=\"Upload completed\" />",
          "description": "Add proper alt text or aria-label for status icons",
          "content": "                            <CheckCircleIcon className=\"w-5 h-5 text-green-500\" aria-label=\"Upload completed\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-accessibility-11",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 549,
        "column": 29,
        "message": "Missing alt text for status icons",
        "description": "Missing alt text for status icons This code works but could be improved for better maintainability.",
        "suggestion": "Add proper alt text or aria-label for status icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                            <XCircleIcon className=\"w-5 h-5 text-red-500\" aria-label=\"Upload failed\" />",
          "description": "Add proper alt text or aria-label for status icons",
          "content": "                            <XCircleIcon className=\"w-5 h-5 text-red-500\" aria-label=\"Upload failed\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx-performance-12",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/file-upload.mdx",
        "line": 361,
        "column": 7,
        "message": "Potential memory leak with FileReader in component",
        "description": "Potential memory leak with FileReader in component This implementation could impact application performance.",
        "suggestion": "Add cleanup for FileReader to prevent memory leaks",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 15,
        "column": 1,
        "message": "Missing React import statement for JSX usage",
        "description": "Missing React import statement for JSX usage This code works but could be improved for better maintainability.",
        "suggestion": "Add React import statement at the top of code examples using JSX",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction ControlledExample() {",
          "description": "Add React import statement at the top of code examples using JSX",
          "content": "import React, { useState } from 'react';\n\nfunction ControlledExample() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 219,
        "column": 5,
        "message": "Interactive card should have proper ARIA role and keyboard support",
        "description": "Interactive card should have proper ARIA role and keyboard support This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button', tabIndex, and keyboard event handlers for proper accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassCard\n      className={cn(\n        \"cursor-pointer transition-all\",\n        checked && \"ring-2 ring-primary ring-opacity-50\",\n      )}\n      role=\"button\"\n      tabIndex={0}\n      onClick={() => onCheckedChange(!checked)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onCheckedChange(!checked);\n        }\n      }}\n      interactive\n    >",
          "description": "Add role='button', tabIndex, and keyboard event handlers for proper accessibility",
          "content": "    <GlassCard\n      className={cn(\n        \"cursor-pointer transition-all\",\n        checked && \"ring-2 ring-primary ring-opacity-50\",\n      )}\n      role=\"button\"\n      tabIndex={0}\n      onClick={() => onCheckedChange(!checked)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onCheckedChange(!checked);\n        }\n      }}\n      interactive\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 219,
        "column": 5,
        "message": "Missing aria-label or accessible name for checkbox card",
        "description": "Missing aria-label or accessible name for checkbox card This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby to provide accessible name for the interactive card",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassCard\n      className={cn(\n        \"cursor-pointer transition-all\",\n        checked && \"ring-2 ring-primary ring-opacity-50\",\n      )}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`Select ${title} plan for ${price}`}\n      onClick={() => onCheckedChange(!checked)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onCheckedChange(!checked);\n        }\n      }}\n      interactive\n    >",
          "description": "Add aria-label or aria-labelledby to provide accessible name for the interactive card",
          "content": "    <GlassCard\n      className={cn(\n        \"cursor-pointer transition-all\",\n        checked && \"ring-2 ring-primary ring-opacity-50\",\n      )}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`Select ${title} plan for ${price}`}\n      onClick={() => onCheckedChange(!checked)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onCheckedChange(!checked);\n        }\n      }}\n      interactive\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 218,
        "column": 23,
        "message": "Missing type definitions for component props",
        "description": "Missing type definitions for component props This will likely cause errors during execution.",
        "suggestion": "Add TypeScript interface or type definitions for component props",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "interface CheckboxCardProps {\n  checked: boolean;\n  onCheckedChange: (checked: boolean) => void;\n  title: string;\n  description: string;\n  price: string;\n}\n\nfunction CheckboxCard({ checked, onCheckedChange, title, description, price }: CheckboxCardProps) {",
          "description": "Add TypeScript interface or type definitions for component props",
          "content": "interface CheckboxCardProps {\n  checked: boolean;\n  onCheckedChange: (checked: boolean) => void;\n  title: string;\n  description: string;\n  price: string;\n}\n\nfunction CheckboxCard({ checked, onCheckedChange, title, description, price }: CheckboxCardProps) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 234,
        "column": 11,
        "message": "Nested interactive elements - checkbox inside clickable card",
        "description": "Nested interactive elements - checkbox inside clickable card This code works but could be improved for better maintainability.",
        "suggestion": "Consider removing the separate checkbox or making the card non-interactive to avoid nested interactive elements",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/checkbox.mdx",
        "line": 7,
        "column": 1,
        "message": "Inconsistent import statement formatting",
        "description": "Inconsistent import statement formatting This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent import statement formatting with named imports on separate lines if multiple imports are needed",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { GlassCheckbox } from \"@liquidify/components\";",
          "description": "Use consistent import statement formatting with named imports on separate lines if multiple imports are needed",
          "content": "import { GlassCheckbox } from \"@liquidify/components\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx",
        "line": 81,
        "column": 13,
        "message": "Missing React import for Fragment usage in dynamic breadcrumbs example",
        "description": "Missing React import for Fragment usage in dynamic breadcrumbs example This code works but could be improved for better maintainability.",
        "suggestion": "Add React import or use <> shorthand syntax for Fragment",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {",
          "description": "Add React import or use <> shorthand syntax for Fragment",
          "content": "import React from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx",
        "line": 87,
        "column": 15,
        "message": "Breadcrumb item with undefined href may not provide proper navigation semantics",
        "description": "Breadcrumb item with undefined href may not provide proper navigation semantics This code works but could be improved for better maintainability.",
        "suggestion": "Consider using a span or different element for current items without href",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/breadcrumbs.mdx",
        "line": 44,
        "column": 1,
        "message": "Missing asChild prop documentation in API table but used in examples",
        "description": "Missing asChild prop documentation in API table but used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add asChild prop to GlassBreadcrumbs.Item API documentation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop       | Type         | Default | Description            |\n| ---------- | ------------ | ------- | ---------------------- |\n| `href`     | `string`     | -       | Link URL               |\n| `onClick`  | `() => void` | -       | Click handler          |\n| `current`  | `boolean`    | `false` | Current page indicator |\n| `icon`     | `ReactNode`  | -       | Item icon              |\n| `disabled` | `boolean`    | `false` | Disable item           |\n| `asChild`  | `boolean`    | `false` | Render as child element |",
          "description": "Add asChild prop to GlassBreadcrumbs.Item API documentation",
          "content": "| Prop       | Type         | Default | Description            |\n| ---------- | ------------ | ------- | ---------------------- |\n| `href`     | `string`     | -       | Link URL               |\n| `onClick`  | `() => void` | -       | Click handler          |\n| `current`  | `boolean`    | `false` | Current page indicator |\n| `icon`     | `ReactNode`  | -       | Item icon              |\n| `disabled` | `boolean`    | `false` | Disable item           |\n| `asChild`  | `boolean`    | `false` | Render as child element |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 25,
        "column": 1,
        "message": "Missing ARIA attributes for dismissible banner functionality",
        "description": "Missing ARIA attributes for dismissible banner functionality This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live and aria-labelledby attributes for screen reader compatibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassBanner variant=\"warning\" dismissible aria-live=\"polite\" aria-labelledby=\"banner-title\">",
          "description": "Add aria-live and aria-labelledby attributes for screen reader compatibility",
          "content": "<GlassBanner variant=\"warning\" dismissible aria-live=\"polite\" aria-labelledby=\"banner-title\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 27,
        "column": 5,
        "message": "Banner title should have proper heading hierarchy and ID for accessibility",
        "description": "Banner title should have proper heading hierarchy and ID for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to title for proper ARIA labeling",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassBanner.Title id=\"banner-title\">Maintenance Scheduled</GlassBanner.Title>",
          "description": "Add id attribute to title for proper ARIA labeling",
          "content": "    <GlassBanner.Title id=\"banner-title\">Maintenance Scheduled</GlassBanner.Title>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 170,
        "column": 7,
        "message": "Missing keyboard event handlers for dismiss functionality",
        "description": "Missing keyboard event handlers for dismiss functionality This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler for Enter/Space key support on dismiss button",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 236,
        "column": 5,
        "message": "Cookie consent banner should have role='dialog' or role='banner' for proper semantics",
        "description": "Cookie consent banner should have role='dialog' or role='banner' for proper semantics This code works but could be improved for better maintainability.",
        "suggestion": "Add role='dialog' and aria-describedby attributes for proper semantics",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassBanner variant=\"info\" position=\"bottom\" fullWidth role=\"dialog\" aria-describedby=\"cookie-description\">",
          "description": "Add role='dialog' and aria-describedby attributes for proper semantics",
          "content": "    <GlassBanner variant=\"info\" position=\"bottom\" fullWidth role=\"dialog\" aria-describedby=\"cookie-description\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 134,
        "column": 37,
        "message": "useState hook should use lazy initialization for visibility state",
        "description": "useState hook should use lazy initialization for visibility state This implementation could impact application performance.",
        "suggestion": "Use lazy initialization to avoid unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const [isVisible, setIsVisible] = useState(() => true);",
          "description": "Use lazy initialization to avoid unnecessary re-renders",
          "content": "  const [isVisible, setIsVisible] = useState(() => true);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 137,
        "column": 12,
        "message": "Missing error boundary or error handling for banner state management",
        "description": "Missing error boundary or error handling for banner state management This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block or error boundary to handle state updates gracefully",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx-naming-6",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/banner.mdx",
        "line": 18,
        "column": 5,
        "message": "Inconsistent naming convention: 'GlassBanner' vs 'GlassButton'",
        "description": "Inconsistent naming convention: 'GlassBanner' vs 'GlassButton' This code works but could be improved for better maintainability.",
        "suggestion": "Consider consistent naming pattern across components",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx",
        "line": 16,
        "column": 1,
        "message": "Missing ARIA role attribute for accordion component documentation",
        "description": "Missing ARIA role attribute for accordion component documentation This code works but could be improved for better maintainability.",
        "suggestion": "Add role='tablist' or role='region' to the accordion root element in documentation examples",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassAccordion type=\"single\" collapsible defaultValue=\"item-1\" role=\"tablist\">",
          "description": "Add role='tablist' or role='region' to the accordion root element in documentation examples",
          "content": "<GlassAccordion type=\"single\" collapsible defaultValue=\"item-1\" role=\"tablist\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx",
        "line": 33,
        "column": 1,
        "message": "Missing ARIA role attribute for multiple accordion example",
        "description": "Missing ARIA role attribute for multiple accordion example This code works but could be improved for better maintainability.",
        "suggestion": "Add role='tablist' or role='region' to the multiple accordion example",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassAccordion type=\"multiple\" defaultValue={[\"item-1\", \"item-3\"]} role=\"tablist\">",
          "description": "Add role='tablist' or role='region' to the multiple accordion example",
          "content": "<GlassAccordion type=\"multiple\" defaultValue={[\"item-1\", \"item-3\"]} role=\"tablist\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx",
        "line": 81,
        "column": 1,
        "message": "Inconsistent prop documentation order in API tables",
        "description": "Inconsistent prop documentation order in API tables This code works but could be improved for better maintainability.",
        "suggestion": "Order props consistently (required props first, then optional props alphabetically)",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx",
        "line": 174,
        "column": 1,
        "message": "Missing error handling example for controlled accordion",
        "description": "Missing error handling example for controlled accordion This code works but could be improved for better maintainability.",
        "suggestion": "Add error boundary or try-catch for state management in controlled accordion example",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/mint-docs/components/accordion.mdx",
        "line": 217,
        "column": 1,
        "message": "Missing keyboard navigation details for complex interactions",
        "description": "Missing keyboard navigation details for complex interactions This code works but could be improved for better maintainability.",
        "suggestion": "Add more specific keyboard navigation instructions including Home/End key support and focus trapping",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- **Keyboard Navigation**: Arrow keys navigate between triggers, Space/Enter toggles, Home/End keys jump to first/last item\n- **ARIA Attributes**: Proper `aria-expanded`, `aria-controls`, `aria-labelledby`, and `role` attributes\n- **Focus Management**: Focus remains on the trigger when toggling, focus is trapped within accordion",
          "description": "Add more specific keyboard navigation instructions including Home/End key support and focus trapping",
          "content": "- **Keyboard Navigation**: Arrow keys navigate between triggers, Space/Enter toggles, Home/End keys jump to first/last item\n- **ARIA Attributes**: Proper `aria-expanded`, `aria-controls`, `aria-labelledby`, and `role` attributes\n- **Focus Management**: Focus remains on the trigger when toggling, focus is trapped within accordion"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.lib.json-convention-0",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.lib.json",
        "line": 14,
        "column": 7,
        "message": "Path mapping '@/*' is overly broad and may cause conflicts with other path mappings",
        "description": "Path mapping '@/*' is overly broad and may cause conflicts with other path mappings This code works but could be improved for better maintainability.",
        "suggestion": "Consider removing the broad '@/*' mapping since more specific mappings already exist for components, core, hooks, styles, tokens, and types",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.lib.json-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.lib.json",
        "line": 9,
        "column": 5,
        "message": "skipLibCheck is enabled which may hide type errors in dependencies",
        "description": "skipLibCheck is enabled which may hide type errors in dependencies This implementation could impact application performance.",
        "suggestion": "Consider setting skipLibCheck to false for better type safety, or ensure this is intentionally enabled for build performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.json-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/tsconfig.json",
        "line": 2,
        "column": 3,
        "message": "TypeScript configuration has empty files and include arrays, which may indicate incomplete setup",
        "description": "TypeScript configuration has empty files and include arrays, which may indicate incomplete setup This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding appropriate file patterns to include array or remove empty arrays if intentionally delegating to referenced tsconfig.lib.json",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/tsconfig.json-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/tsconfig.json",
        "line": 1,
        "column": 1,
        "message": "Missing 'exclude' property which is recommended for E2E test configurations to avoid compiling unnecessary files",
        "description": "Missing 'exclude' property which is recommended for E2E test configurations to avoid compiling unnecessary files This code works but could be improved for better maintainability.",
        "suggestion": "Add an 'exclude' property to exclude node_modules and other unnecessary directories",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"outDir\": \"../../dist/out-tsc\",\n    \"sourceMap\": false,\n    \"module\": \"commonjs\"\n  },\n  \"include\": [\n    \"**/*.ts\",\n    \"**/*.js\",\n    \"playwright.config.ts\",\n    \"src/**/*.spec.ts\",\n    \"src/**/*.spec.js\",\n    \"src/**/*.test.ts\",\n    \"src/**/*.test.js\",\n    \"src/**/*.d.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ]\n}",
          "description": "Add an 'exclude' property to exclude node_modules and other unnecessary directories",
          "content": "{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"outDir\": \"../../dist/out-tsc\",\n    \"sourceMap\": false,\n    \"module\": \"commonjs\"\n  },\n  \"include\": [\n    \"**/*.ts\",\n    \"**/*.js\",\n    \"playwright.config.ts\",\n    \"src/**/*.spec.ts\",\n    \"src/**/*.spec.js\",\n    \"src/**/*.test.ts\",\n    \"src/**/*.test.js\",\n    \"src/**/*.d.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ]\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/tsconfig.json-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/tsconfig.json",
        "line": 9,
        "column": 5,
        "message": "Overly broad file inclusion patterns '**/*.ts' and '**/*.js' may include unnecessary files and slow compilation",
        "description": "Overly broad file inclusion patterns '**/*.ts' and '**/*.js' may include unnecessary files and slow compilation This implementation could impact application performance.",
        "suggestion": "Use more specific patterns or add exclude rules to prevent compilation of unnecessary files",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/project.json-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/project.json",
        "line": 7,
        "column": 3,
        "message": "Invalid JSON comment syntax - comments are not allowed in JSON",
        "description": "Invalid JSON comment syntax - comments are not allowed in JSON This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the comment or convert to a valid JSON property if needed for documentation",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove the comment or convert to a valid JSON property if needed for documentation"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/project.json-architecture-1",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/project.json",
        "line": 8,
        "column": 13,
        "message": "Empty targets object provides no functionality for the e2e test project",
        "description": "Empty targets object provides no functionality for the e2e test project This code works but could be improved for better maintainability.",
        "suggestion": "Add e2e test targets such as 'e2e' target with cypress or playwright configuration",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-vitepress-backup/tsconfig.json-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-vitepress-backup/tsconfig.json",
        "line": 8,
        "column": 3,
        "message": "Empty include and files arrays make this TypeScript configuration ineffective for type checking",
        "description": "Empty include and files arrays make this TypeScript configuration ineffective for type checking This code works but could be improved for better maintainability.",
        "suggestion": "Add file patterns to include array or remove empty arrays if relying solely on project references",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-vitepress-backup/tsconfig.json-convention-1",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-vitepress-backup/tsconfig.json",
        "line": 3,
        "column": 5,
        "message": "Inconsistent configuration: jsx set to 'react-jsx' but esModuleInterop is disabled while allowSyntheticDefaultImports is enabled",
        "description": "Inconsistent configuration: jsx set to 'react-jsx' but esModuleInterop is disabled while allowSyntheticDefaultImports is enabled This code works but could be improved for better maintainability.",
        "suggestion": "Enable esModuleInterop when using allowSyntheticDefaultImports for consistent module resolution",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    \"esModuleInterop\": true,",
          "description": "Enable esModuleInterop when using allowSyntheticDefaultImports for consistent module resolution",
          "content": "    \"esModuleInterop\": true,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/tsconfig.json-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/tsconfig.json",
        "line": 15,
        "column": 7,
        "message": "Redundant path mapping: '@/*' is too broad and overlaps with more specific path mappings",
        "description": "Redundant path mapping: '@/*' is too broad and overlaps with more specific path mappings This code works but could be improved for better maintainability.",
        "suggestion": "Remove the broad '@/*' mapping since more specific mappings like '@/components/*', '@/core/*', etc. are already defined",
        "rule": "architecture",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    \"paths\": {\n      \"@liquidify/components\": [\"../../libs/components/src/index.ts\"],\n      \"@/components/*\": [\"../../libs/components/src/components/*\"],\n      \"@/core/*\": [\"../../libs/components/src/core/*\"],\n      \"@/hooks/*\": [\"../../libs/components/src/hooks/*\"],\n      \"@/styles/*\": [\"../../libs/components/src/styles/*\"],\n      \"@/tokens/*\": [\"../../libs/components/src/tokens/*\"],\n      \"@/types/*\": [\"../../libs/components/src/types/*\"]\n    }",
          "description": "Remove the broad '@/*' mapping since more specific mappings like '@/components/*', '@/core/*', etc. are already defined",
          "content": "    \"paths\": {\n      \"@liquidify/components\": [\"../../libs/components/src/index.ts\"],\n      \"@/components/*\": [\"../../libs/components/src/components/*\"],\n      \"@/core/*\": [\"../../libs/components/src/core/*\"],\n      \"@/hooks/*\": [\"../../libs/components/src/hooks/*\"],\n      \"@/styles/*\": [\"../../libs/components/src/styles/*\"],\n      \"@/tokens/*\": [\"../../libs/components/src/tokens/*\"],\n      \"@/types/*\": [\"../../libs/components/src/types/*\"]\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/tsconfig.json-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/tsconfig.json",
        "line": 27,
        "column": 5,
        "message": "Duplicate include path: '../../libs/components/src/**/*' already covers '../../libs/components/src/stories/**/*'",
        "description": "Duplicate include path: '../../libs/components/src/**/*' already covers '../../libs/components/src/stories/**/*' This code works but could be improved for better maintainability.",
        "suggestion": "Remove the redundant specific stories path since it's already included by the broader components src path",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  \"include\": [\n    \".storybook/**/*\",\n    \"../../libs/components/src/**/*\"\n  ]",
          "description": "Remove the redundant specific stories path since it's already included by the broader components src path",
          "content": "  \"include\": [\n    \".storybook/**/*\",\n    \"../../libs/components/src/**/*\"\n  ]"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/package.json-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/package.json",
        "line": 8,
        "column": 15,
        "message": "Missing 'serve' dependency for preview script",
        "description": "Missing 'serve' dependency for preview script This implementation could impact application performance.",
        "suggestion": "Add 'serve' as a devDependency since it's used in the preview script",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  \"devDependencies\": {\n    \"@storybook/react-vite\": \"^8.6.14\",\n    \"@storybook/addon-links\": \"^8.6.14\",\n    \"@storybook/addon-a11y\": \"^8.6.14\",\n    \"@storybook/addon-essentials\": \"^8.6.14\",\n    \"@storybook/builder-vite\": \"^8.6.14\",\n    \"storybook\": \"^8.6.14\",\n    \"@storybook/addon-docs\": \"^8.6.14\",\n    \"serve\": \"^14.2.1\"\n  }",
          "description": "Add 'serve' as a devDependency since it's used in the preview script",
          "content": "  \"devDependencies\": {\n    \"@storybook/react-vite\": \"^8.6.14\",\n    \"@storybook/addon-links\": \"^8.6.14\",\n    \"@storybook/addon-a11y\": \"^8.6.14\",\n    \"@storybook/addon-essentials\": \"^8.6.14\",\n    \"@storybook/builder-vite\": \"^8.6.14\",\n    \"storybook\": \"^8.6.14\",\n    \"@storybook/addon-docs\": \"^8.6.14\",\n    \"serve\": \"^14.2.1\"\n  }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/package.json-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/storybook/package.json",
        "line": 10,
        "column": 16,
        "message": "Scripts reference external .cjs files without ensuring their existence",
        "description": "Scripts reference external .cjs files without ensuring their existence This code works but could be improved for better maintainability.",
        "suggestion": "Verify that the referenced .cjs script files exist or add error handling",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 17,
        "column": 44,
        "message": "Missing alt text for decorative emoji icons in content",
        "description": "Missing alt text for decorative emoji icons in content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative emojis or provide descriptive text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <span className=\"text-white font-semibold\"><span aria-hidden=\"true\">⚡</span> 5 Minutes</span>",
          "description": "Add aria-hidden='true' to decorative emojis or provide descriptive text",
          "content": "        <span className=\"text-white font-semibold\"><span aria-hidden=\"true\">⚡</span> 5 Minutes</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 20,
        "column": 47,
        "message": "Missing alt text for decorative emoji icons in content",
        "description": "Missing alt text for decorative emoji icons in content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative emojis or provide descriptive text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <span className=\"text-white/80 font-medium\"><span aria-hidden=\"true\">🍎</span> Apple Design</span>",
          "description": "Add aria-hidden='true' to decorative emojis or provide descriptive text",
          "content": "        <span className=\"text-white/80 font-medium\"><span aria-hidden=\"true\">🍎</span> Apple Design</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 314,
        "column": 14,
        "message": "Emoji used as interactive content without proper accessibility labels",
        "description": "Emoji used as interactive content without proper accessibility labels This code works but could be improved for better maintainability.",
        "suggestion": "Provide descriptive aria-label for theme toggle button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      {theme === \"light\" ? (\n        <span aria-label=\"Switch to dark mode\">🌙</span>\n      ) : (\n        <span aria-label=\"Switch to light mode\">☀️</span>\n      )} Toggle Theme",
          "description": "Provide descriptive aria-label for theme toggle button",
          "content": "      {theme === \"light\" ? (\n        <span aria-label=\"Switch to dark mode\">🌙</span>\n      ) : (\n        <span aria-label=\"Switch to light mode\">☀️</span>\n      )} Toggle Theme"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-structure-3",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 310,
        "column": 5,
        "message": "Nested interactive elements - button content with interactive semantics",
        "description": "Nested interactive elements - button content with interactive semantics This code works but could be improved for better maintainability.",
        "suggestion": "Remove nested interactive elements and use proper button labeling",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassButton\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      variant=\"ghost\"\n      aria-label={theme === \"light\" ? \"Switch to dark mode\" : \"Switch to light mode\"}\n    >\n      <span aria-hidden=\"true\">{theme === \"light\" ? \"🌙\" : \"☀️\"}</span> Toggle Theme\n    </GlassButton>",
          "description": "Remove nested interactive elements and use proper button labeling",
          "content": "    <GlassButton\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      variant=\"ghost\"\n      aria-label={theme === \"light\" ? \"Switch to dark mode\" : \"Switch to light mode\"}\n    >\n      <span aria-hidden=\"true\">{theme === \"light\" ? \"🌙\" : \"☀️\"}</span> Toggle Theme\n    </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 308,
        "column": 1,
        "message": "Missing React.memo or useMemo for component that may re-render frequently",
        "description": "Missing React.memo or useMemo for component that may re-render frequently This implementation could impact application performance.",
        "suggestion": "Consider memoizing ThemeToggle component to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const ThemeToggle = React.memo(function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <GlassButton\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      variant=\"ghost\"\n      aria-label={theme === \"light\" ? \"Switch to dark mode\" : \"Switch to light mode\"}\n    >\n      <span aria-hidden=\"true\">{theme === \"light\" ? \"🌙\" : \"☀️\"}</span> Toggle Theme\n    </GlassButton>\n  );\n});",
          "description": "Consider memoizing ThemeToggle component to prevent unnecessary re-renders",
          "content": "const ThemeToggle = React.memo(function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <GlassButton\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      variant=\"ghost\"\n      aria-label={theme === \"light\" ? \"Switch to dark mode\" : \"Switch to light mode\"}\n    >\n      <span aria-hidden=\"true\">{theme === \"light\" ? \"🌙\" : \"☀️\"}</span> Toggle Theme\n    </GlassButton>\n  );\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/quickstart.mdx",
        "line": 203,
        "column": 5,
        "message": "Missing semantic heading structure in demo cards",
        "description": "Missing semantic heading structure in demo cards This code works but could be improved for better maintainability.",
        "suggestion": "Use proper heading levels (h3, h4) instead of generic text styling for card titles",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <h4 className=\"text-white font-semibold mb-2\">Feature 1</h4>",
          "description": "Use proper heading levels (h3, h4) instead of generic text styling for card titles",
          "content": "      <h4 className=\"text-white font-semibold mb-2\">Feature 1</h4>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 150,
        "column": 23,
        "message": "Placeholder analytics measurement ID should be replaced with actual value",
        "description": "Placeholder analytics measurement ID should be replaced with actual value This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace placeholder 'G-XXXXXXXXXX' with your actual Google Analytics 4 measurement ID",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 160,
        "column": 15,
        "message": "Placeholder Intercom app ID should be replaced with actual value",
        "description": "Placeholder Intercom app ID should be replaced with actual value This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace placeholder 'YOUR_INTERCOM_APP_ID' with your actual Intercom application ID",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 23,
        "column": 13,
        "message": "GitHub support URL references incorrect repository path",
        "description": "GitHub support URL references incorrect repository path This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Verify the GitHub repository path matches the actual project repository",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 3,
        "column": 11,
        "message": "Inconsistent branding - project name uses 'LiqUIdify' but URLs reference 'liquidify'",
        "description": "Inconsistent branding - project name uses 'LiqUIdify' but URLs reference 'liquidify' This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Ensure consistent branding between project name and domain references",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-convention-4",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 156,
        "column": 5,
        "message": "Redundant redirect configuration with placeholder paths",
        "description": "Redundant redirect configuration with placeholder paths This code works but could be improved for better maintainability.",
        "suggestion": "Remove placeholder redirect or replace with actual redirect paths",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove placeholder redirect or replace with actual redirect paths"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/mint.json",
        "line": 47,
        "column": 13,
        "message": "Community anchor links to Discord but URL shows '/discord' path instead of actual Discord invite",
        "description": "Community anchor links to Discord but URL shows '/discord' path instead of actual Discord invite This code works but could be improved for better maintainability.",
        "suggestion": "Use actual Discord invite URL or update icon/name to match the destination",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 42,
        "column": 7,
        "message": "Interactive elements using emoji icons may not be accessible to screen readers",
        "description": "Interactive elements using emoji icons may not be accessible to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or replace emoji with proper icons that have accessible text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <span role=\"img\" aria-label=\"Wave\">🌊</span>",
          "description": "Add aria-label or replace emoji with proper icons that have accessible text",
          "content": "        <span role=\"img\" aria-label=\"Wave\">🌊</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 52,
        "column": 7,
        "message": "Interactive elements using emoji icons may not be accessible to screen readers",
        "description": "Interactive elements using emoji icons may not be accessible to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or replace emoji with proper icons that have accessible text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <span role=\"img\" aria-label=\"Apple\">🍎</span>",
          "description": "Add aria-label or replace emoji with proper icons that have accessible text",
          "content": "        <span role=\"img\" aria-label=\"Apple\">🍎</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 62,
        "column": 7,
        "message": "Interactive elements using emoji icons may not be accessible to screen readers",
        "description": "Interactive elements using emoji icons may not be accessible to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or replace emoji with proper icons that have accessible text",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <span role=\"img\" aria-label=\"Lightning\">⚡</span>",
          "description": "Add aria-label or replace emoji with proper icons that have accessible text",
          "content": "        <span role=\"img\" aria-label=\"Lightning\">⚡</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 15,
        "column": 5,
        "message": "Heading hierarchy may be violated - h1 appears after another h1 without proper nesting",
        "description": "Heading hierarchy may be violated - h1 appears after another h1 without proper nesting This code works but could be improved for better maintainability.",
        "suggestion": "Consider using h2 or ensure proper heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <h2 className=\"text-5xl font-bold text-white mb-6 tracking-tight\">\n        Liquid Glass Morphism\n      </h2>",
          "description": "Consider using h2 or ensure proper heading hierarchy",
          "content": "      <h2 className=\"text-5xl font-bold text-white mb-6 tracking-tight\">\n        Liquid Glass Morphism\n      </h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 49,
        "column": 1,
        "message": "Inconsistent indentation in grid container",
        "description": "Inconsistent indentation in grid container This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent indentation (2 spaces) for all elements at the same level",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <LiquidGlassDemo variant=\"card\" size=\"md\">",
          "description": "Use consistent indentation (2 spaces) for all elements at the same level",
          "content": "  <LiquidGlassDemo variant=\"card\" size=\"md\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/introduction.mdx",
        "line": 14,
        "column": 1,
        "message": "Multiple LiquidGlassDemo components may cause performance issues if not properly memoized",
        "description": "Multiple LiquidGlassDemo components may cause performance issues if not properly memoized This implementation could impact application performance.",
        "suggestion": "Consider using React.memo() for LiquidGlassDemo components if they render frequently",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 19,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 22,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 38,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 64,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 66,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 72,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 73,
        "column": 1,
        "message": "Commented out exports create maintenance debt and unclear API surface",
        "description": "Commented out exports create maintenance debt and unclear API surface This violates code style conventions and may reduce readability.",
        "suggestion": "Remove commented exports or implement the missing components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts-architecture-7",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/index.ts",
        "line": 4,
        "column": 1,
        "message": "Side effect import of CSS in library entry point may cause bundling issues",
        "description": "Side effect import of CSS in library entry point may cause bundling issues This code works but could be improved for better maintainability.",
        "suggestion": "Consider exporting CSS separately or documenting the side effect import",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts",
        "line": 4,
        "column": 3,
        "message": "Missing error handling for page navigation and element interactions",
        "description": "Missing error handling for page navigation and element interactions This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch blocks or use Playwright's built-in timeout and error handling mechanisms",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "test(\"has title\", async ({ page }) => {\n  try {\n    await page.goto(\"/\");\n\n    // Expect h1 to contain a substring.\n    await expect(page.locator(\"h1\")).toContainText(\"Welcome\");\n  } catch (error) {\n    throw new Error(`Test failed: ${error.message}`);\n  }\n});",
          "description": "Add try-catch blocks or use Playwright's built-in timeout and error handling mechanisms",
          "content": "test(\"has title\", async ({ page }) => {\n  try {\n    await page.goto(\"/\");\n\n    // Expect h1 to contain a substring.\n    await expect(page.locator(\"h1\")).toContainText(\"Welcome\");\n  } catch (error) {\n    throw new Error(`Test failed: ${error.message}`);\n  }\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts",
        "line": 7,
        "column": 3,
        "message": "Unnecessary await on innerText() call - use Playwright's built-in assertion methods for better performance and reliability",
        "description": "Unnecessary await on innerText() call - use Playwright's built-in assertion methods for better performance and reliability This implementation could impact application performance.",
        "suggestion": "Use await expect(page.locator('h1')).toContainText('Welcome') instead of extracting text first",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  await expect(page.locator(\"h1\")).toContainText(\"Welcome\");",
          "description": "Use await expect(page.locator('h1')).toContainText('Welcome') instead of extracting text first",
          "content": "  await expect(page.locator(\"h1\")).toContainText(\"Welcome\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs-e2e/src/example.spec.ts",
        "line": 3,
        "column": 6,
        "message": "Test description should be more descriptive and follow naming conventions",
        "description": "Test description should be more descriptive and follow naming conventions This code works but could be improved for better maintainability.",
        "suggestion": "Use a more descriptive test name that explains what is being tested",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "\"should display welcome message in h1 element\"",
          "description": "Use a more descriptive test name that explains what is being tested",
          "content": "\"should display welcome message in h1 element\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 5,
        "column": 1,
        "message": "External font import may cause render-blocking and performance issues",
        "description": "External font import may cause render-blocking and performance issues This implementation could impact application performance.",
        "suggestion": "Consider using font-display: swap and preload the font, or use system fonts only",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\") layer(fonts);",
          "description": "Consider using font-display: swap and preload the font, or use system fonts only",
          "content": "@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\") layer(fonts);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 136,
        "column": 21,
        "message": "Heavy backdrop-filter blur (40px) can cause performance issues on mobile devices",
        "description": "Heavy backdrop-filter blur (40px) can cause performance issues on mobile devices This implementation could impact application performance.",
        "suggestion": "Consider reducing blur intensity or using different values for mobile",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 722,
        "column": 1,
        "message": "Color-only differentiation for badge variants may not be accessible to colorblind users",
        "description": "Color-only differentiation for badge variants may not be accessible to colorblind users This code works but could be improved for better maintainability.",
        "suggestion": "Add icons or text indicators in addition to color changes",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 68,
        "column": 1,
        "message": "Complex animations may cause performance issues on low-end devices",
        "description": "Complex animations may cause performance issues on low-end devices This implementation could impact application performance.",
        "suggestion": "Consider using will-change property and transform3d for hardware acceleration",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "@keyframes liquid-flow {\n  0%,\n  100% {\n    background-position: 0% 50%;\n    filter: hue-rotate(0deg);\n    will-change: background-position, filter;\n    transform: translateZ(0);\n  }\n  25% {\n    background-position: 100% 50%;\n    filter: hue-rotate(90deg);\n  }\n  50% {\n    background-position: 100% 100%;\n    filter: hue-rotate(180deg);\n  }\n  75% {\n    background-position: 0% 100%;\n    filter: hue-rotate(270deg);\n  }\n}",
          "description": "Consider using will-change property and transform3d for hardware acceleration",
          "content": "@keyframes liquid-flow {\n  0%,\n  100% {\n    background-position: 0% 50%;\n    filter: hue-rotate(0deg);\n    will-change: background-position, filter;\n    transform: translateZ(0);\n  }\n  25% {\n    background-position: 100% 50%;\n    filter: hue-rotate(90deg);\n  }\n  50% {\n    background-position: 100% 100%;\n    filter: hue-rotate(180deg);\n  }\n  75% {\n    background-position: 0% 100%;\n    filter: hue-rotate(270deg);\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 161,
        "column": 3,
        "message": "Magic numbers in CSS variables should have descriptive comments",
        "description": "Magic numbers in CSS variables should have descriptive comments This violates code style conventions and may reduce readability.",
        "suggestion": "Add comments explaining the opacity and shadow values used",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /* Enhanced Glass Morphism Variables */\n  --glass-bg: rgba(255, 255, 255, 0.08); /* Semi-transparent white background */\n  --glass-border: rgba(255, 255, 255, 0.18); /* Subtle white border */\n  --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.37); /* Soft depth shadow */\n  --glass-blur: 40px; /* Backdrop blur intensity */\n  --glass-inner-shadow:\n    inset -10px -8px 0px -11px rgba(255, 255, 255, 0.6),\n    inset 0px -9px 0px -8px rgba(255, 255, 255, 0.4); /* Inner highlight effect */",
          "description": "Add comments explaining the opacity and shadow values used",
          "content": "  /* Enhanced Glass Morphism Variables */\n  --glass-bg: rgba(255, 255, 255, 0.08); /* Semi-transparent white background */\n  --glass-border: rgba(255, 255, 255, 0.18); /* Subtle white border */\n  --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.37); /* Soft depth shadow */\n  --glass-blur: 40px; /* Backdrop blur intensity */\n  --glass-inner-shadow:\n    inset -10px -8px 0px -11px rgba(255, 255, 255, 0.6),\n    inset 0px -9px 0px -8px rgba(255, 255, 255, 0.4); /* Inner highlight effect */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-accessibility-5",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 759,
        "column": 1,
        "message": "Missing focus indicators that meet WCAG contrast requirements",
        "description": "Missing focus indicators that meet WCAG contrast requirements This will likely cause errors during execution.",
        "suggestion": "Ensure focus indicators have sufficient contrast ratio (3:1 minimum)",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/* Apple-style Focus States */\n*:focus {\n  outline: 2px solid var(--apple-blue);\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);\n  border-radius: var(--radius-sm);\n}\n\n*:focus:not(:focus-visible) {\n  outline: none;\n  box-shadow: none;\n}\n\n*:focus-visible {\n  outline: 2px solid var(--apple-blue);\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);\n}",
          "description": "Ensure focus indicators have sufficient contrast ratio (3:1 minimum)",
          "content": "/* Apple-style Focus States */\n*:focus {\n  outline: 2px solid var(--apple-blue);\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);\n  border-radius: var(--radius-sm);\n}\n\n*:focus:not(:focus-visible) {\n  outline: none;\n  box-shadow: none;\n}\n\n*:focus-visible {\n  outline: 2px solid var(--apple-blue);\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.3);\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/styles/apple-hig.css",
        "line": 816,
        "column": 5,
        "message": "Mobile blur reduction should be more aggressive for better performance",
        "description": "Mobile blur reduction should be more aggressive for better performance This implementation could impact application performance.",
        "suggestion": "Reduce blur to 10px or less on mobile devices",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    --glass-blur: 10px; /* Significantly reduced blur on mobile for better performance */",
          "description": "Reduce blur to 10px or less on mobile devices",
          "content": "    --glass-blur: 10px; /* Significantly reduced blur on mobile for better performance */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx",
        "line": 163,
        "column": 57,
        "message": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users",
        "description": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to indicate external link behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAG/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">",
          "description": "Add aria-label or accessible text to indicate external link behavior",
          "content": "<Card title=\"WCAG Guidelines\" href=\"https://www.w3.org/WAG/WCAG21/quickref/\" aria-label=\"WCAG Guidelines (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx",
        "line": 167,
        "column": 57,
        "message": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users",
        "description": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to indicate external link behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"ARIA Authoring Practices\" href=\"https://www.w3.org/WAI/ARIA/apg/\" aria-label=\"ARIA Authoring Practices (opens in new tab)\">",
          "description": "Add aria-label or accessible text to indicate external link behavior",
          "content": "<Card title=\"ARIA Authoring Practices\" href=\"https://www.w3.org/WAI/ARIA/apg/\" aria-label=\"ARIA Authoring Practices (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/guides/accessibility.mdx",
        "line": 171,
        "column": 27,
        "message": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users",
        "description": "External links should include aria-label or text indicating they open in a new tab/window for screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to indicate external link behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Card title=\"WebAIM\" href=\"https://webaim.org/\" aria-label=\"WebAIM accessibility resources (opens in new tab)\">",
          "description": "Add aria-label or accessible text to indicate external link behavior",
          "content": "<Card title=\"WebAIM\" href=\"https://webaim.org/\" aria-label=\"WebAIM accessibility resources (opens in new tab)\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/theming.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/theming.mdx",
        "line": 62,
        "column": 5,
        "message": "Button lacks accessible label or aria-label for screen readers",
        "description": "Button lacks accessible label or aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or ensure button text is descriptive for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button \n      onClick={toggleTheme}\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    >\n      Switch to {theme === \"light\" ? \"dark\" : \"light\"} mode\n    </button>",
          "description": "Add aria-label or ensure button text is descriptive for screen readers",
          "content": "    <button \n      onClick={toggleTheme}\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    >\n      Switch to {theme === \"light\" ? \"dark\" : \"light\"} mode\n    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/theming.mdx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/theming.mdx",
        "line": 1,
        "column": 1,
        "message": "Inconsistent code block language specification - some blocks use 'tsx', others don't specify",
        "description": "Inconsistent code block language specification - some blocks use 'tsx', others don't specify This violates code style conventions and may reduce readability.",
        "suggestion": "Consistently specify 'tsx' for all TypeScript React code blocks",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx",
        "line": 234,
        "column": 1,
        "message": "Missing alt text or accessible description for performance metrics visualization",
        "description": "Missing alt text or accessible description for performance metrics visualization This code works but could be improved for better maintainability.",
        "suggestion": "Add proper ARIA labels and descriptions for performance metrics data to ensure screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function Dashboard() {\n  const metrics = usePerformanceMetrics();\n\n  // Access real-time performance data\n  console.log({\n    renderTime: metrics.renderTime, // Component render duration\n    bundleSize: metrics.bundleSize, // LiqUIdify bundle impact\n    glassEffects: metrics.glassEffects, // Glass effect performance\n    memoryUsage: metrics.memoryUsage, // Memory consumption\n  });\n\n  return (\n    <div role=\"main\" aria-label=\"Dashboard\">\n      <span className=\"sr-only\">\n        Performance metrics: Render time {metrics.renderTime}ms, \n        Bundle size {metrics.bundleSize}KB, \n        Memory usage {metrics.memoryUsage}MB\n      </span>\n      Dashboard content\n    </div>\n  );\n}",
          "description": "Add proper ARIA labels and descriptions for performance metrics data to ensure screen reader accessibility",
          "content": "function Dashboard() {\n  const metrics = usePerformanceMetrics();\n\n  // Access real-time performance data\n  console.log({\n    renderTime: metrics.renderTime, // Component render duration\n    bundleSize: metrics.bundleSize, // LiqUIdify bundle impact\n    glassEffects: metrics.glassEffects, // Glass effect performance\n    memoryUsage: metrics.memoryUsage, // Memory consumption\n  });\n\n  return (\n    <div role=\"main\" aria-label=\"Dashboard\">\n      <span className=\"sr-only\">\n        Performance metrics: Render time {metrics.renderTime}ms, \n        Bundle size {metrics.bundleSize}KB, \n        Memory usage {metrics.memoryUsage}MB\n      </span>\n      Dashboard content\n    </div>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx",
        "line": 166,
        "column": 5,
        "message": "Modal component missing essential ARIA attributes for screen reader navigation",
        "description": "Modal component missing essential ARIA attributes for screen reader navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-labelledby, aria-describedby, and role attributes to improve modal accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassModal\n      open={isOpen}\n      onClose={() => setIsOpen(false)}\n      // Automatic focus management and cleanup\n      focusTrap\n      // Prevents body scroll without memory leaks\n      preventScroll\n      // Accessibility improvements\n      role=\"dialog\"\n      aria-labelledby=\"modal-title\"\n      aria-describedby=\"modal-description\"\n      aria-modal=\"true\"\n    >\n      <h2 id=\"modal-title\">Modal Title</h2>\n      <div id=\"modal-description\">Modal content</div>\n    </GlassModal>",
          "description": "Add aria-labelledby, aria-describedby, and role attributes to improve modal accessibility",
          "content": "    <GlassModal\n      open={isOpen}\n      onClose={() => setIsOpen(false)}\n      // Automatic focus management and cleanup\n      focusTrap\n      // Prevents body scroll without memory leaks\n      preventScroll\n      // Accessibility improvements\n      role=\"dialog\"\n      aria-labelledby=\"modal-title\"\n      aria-describedby=\"modal-description\"\n      aria-modal=\"true\"\n    >\n      <h2 id=\"modal-title\">Modal Title</h2>\n      <div id=\"modal-description\">Modal content</div>\n    </GlassModal>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx",
        "line": 238,
        "column": 3,
        "message": "Console.log statements in production code can impact performance and expose sensitive data",
        "description": "Console.log statements in production code can impact performance and expose sensitive data This implementation could impact application performance.",
        "suggestion": "Wrap console.log statements with development environment checks or use proper logging libraries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Access real-time performance data\n  if (process.env.NODE_ENV === 'development') {\n    console.log({\n      renderTime: metrics.renderTime, // Component render duration\n      bundleSize: metrics.bundleSize, // LiqUIdify bundle impact\n      glassEffects: metrics.glassEffects, // Glass effect performance\n      memoryUsage: metrics.memoryUsage, // Memory consumption\n    });\n  }",
          "description": "Wrap console.log statements with development environment checks or use proper logging libraries",
          "content": "  // Access real-time performance data\n  if (process.env.NODE_ENV === 'development') {\n    console.log({\n      renderTime: metrics.renderTime, // Component render duration\n      bundleSize: metrics.bundleSize, // LiqUIdify bundle impact\n      glassEffects: metrics.glassEffects, // Glass effect performance\n      memoryUsage: metrics.memoryUsage, // Memory consumption\n    });\n  }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx",
        "line": 443,
        "column": 1,
        "message": "Inconsistent code formatting in HTML attributes and JSX props",
        "description": "Inconsistent code formatting in HTML attributes and JSX props This violates code style conventions and may reduce readability.",
        "suggestion": "Apply consistent formatting to HTML attributes and maintain proper indentation",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <link\n          rel=\"preload\"\n          href=\"/fonts/glass-icons.woff2\"\n          as=\"font\"\n          type=\"font/woff2\"\n          crossOrigin=\"\"\n        />",
          "description": "Apply consistent formatting to HTML attributes and maintain proper indentation",
          "content": "        <link\n          rel=\"preload\"\n          href=\"/fonts/glass-icons.woff2\"\n          as=\"font\"\n          type=\"font/woff2\"\n          crossOrigin=\"\"\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/performance.mdx",
        "line": 114,
        "column": 1,
        "message": "Interactive elements missing accessible labels and keyboard navigation support",
        "description": "Interactive elements missing accessible labels and keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add proper ARIA labels and ensure keyboard navigation is supported for interactive glass components",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassButton\n  // Uses transform and opacity for 60fps\n  animate=\"smooth\"\n  // Respects user preferences\n  disableAnimations={prefersReducedMotion}\n  // GPU-accelerated hover effects\n  magneticHover\n  // Efficient ripple implementation\n  rippleEffect\n  // Accessibility improvements\n  aria-label=\"Smooth animated button\"\n  role=\"button\"\n  tabIndex={0}\n>\n  Smooth Button\n</GlassButton>",
          "description": "Add proper ARIA labels and ensure keyboard navigation is supported for interactive glass components",
          "content": "<GlassButton\n  // Uses transform and opacity for 60fps\n  animate=\"smooth\"\n  // Respects user preferences\n  disableAnimations={prefersReducedMotion}\n  // GPU-accelerated hover effects\n  magneticHover\n  // Efficient ripple implementation\n  rippleEffect\n  // Accessibility improvements\n  aria-label=\"Smooth animated button\"\n  role=\"button\"\n  tabIndex={0}\n>\n  Smooth Button\n</GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 197,
        "column": 5,
        "message": "Interactive elements should have accessible names and ARIA labels",
        "description": "Interactive elements should have accessible names and ARIA labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby attributes to buttons and interactive elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function GlassButton({ children, variant = \"primary\", \"aria-label\": ariaLabel }) {\n  return (\n    <button\n      aria-label={ariaLabel || (typeof children === 'string' ? children : undefined)}\n      className={cn(\n        \"glass-button\",\n        \"backdrop-blur-lg\",\n        \"transition-all duration-300\",\n        \"hover:scale-105\",\n        \"active:scale-95\",\n        {\n          \"bg-blue-500/80\": variant === \"primary\",\n          \"bg-white/60\": variant === \"secondary\",\n        }\n      )}\n    >\n      {children}\n    </button>\n  );\n}",
          "description": "Add aria-label or aria-labelledby attributes to buttons and interactive elements",
          "content": "function GlassButton({ children, variant = \"primary\", \"aria-label\": ariaLabel }) {\n  return (\n    <button\n      aria-label={ariaLabel || (typeof children === 'string' ? children : undefined)}\n      className={cn(\n        \"glass-button\",\n        \"backdrop-blur-lg\",\n        \"transition-all duration-300\",\n        \"hover:scale-105\",\n        \"active:scale-95\",\n        {\n          \"bg-blue-500/80\": variant === \"primary\",\n          \"bg-white/60\": variant === \"secondary\",\n        }\n      )}\n    >\n      {children}\n    </button>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 235,
        "column": 5,
        "message": "Missing focus states and keyboard navigation support",
        "description": "Missing focus states and keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add focus-visible styles and keyboard event handlers for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function InteractiveFeedback({ children }) {\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      setPressed(true);\n    }\n  };\n\n  const handleKeyUp = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      setPressed(false);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"interactive-feedback\", {\n        \"scale-press\": pressed,\n        \"hover-lift\": !pressed,\n        \"focus-visible:ring-2 focus-visible:ring-blue-500\": focused,\n      })}\n      tabIndex={0}\n      onPointerDown={() => setPressed(true)}\n      onPointerUp={() => setPressed(false)}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onFocus={() => setFocused(true)}\n      onBlur={() => setFocused(false)}\n    >\n      {children}\n    </div>\n  );\n}",
          "description": "Add focus-visible styles and keyboard event handlers for accessibility",
          "content": "function InteractiveFeedback({ children }) {\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      setPressed(true);\n    }\n  };\n\n  const handleKeyUp = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      setPressed(false);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"interactive-feedback\", {\n        \"scale-press\": pressed,\n        \"hover-lift\": !pressed,\n        \"focus-visible:ring-2 focus-visible:ring-blue-500\": focused,\n      })}\n      tabIndex={0}\n      onPointerDown={() => setPressed(true)}\n      onPointerUp={() => setPressed(false)}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onFocus={() => setFocused(true)}\n      onBlur={() => setFocused(false)}\n    >\n      {children}\n    </div>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 606,
        "column": 1,
        "message": "Missing prefers-reduced-motion media query support",
        "description": "Missing prefers-reduced-motion media query support This code works but could be improved for better maintainability.",
        "suggestion": "Add CSS variables and media queries to respect user's motion preferences",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": ":root {\n  /* Colors */\n  --glass-bg-primary: rgba(255, 255, 255, 0.7);\n  --glass-bg-secondary: rgba(255, 255, 255, 0.5);\n  --glass-border: rgba(255, 255, 255, 0.2);\n\n  /* Effects */\n  --glass-blur: 12px;\n  --glass-saturation: 1.8;\n  --glass-brightness: 1.2;\n\n  /* Animations */\n  --spring-config-gentle: cubic-bezier(0.4, 0, 0.2, 1);\n  --spring-config-bouncy: cubic-bezier(0.68, -0.6, 0.32, 1.6);\n  --animation-duration: 300ms;\n  --animation-scale: 1;\n\n  /* Spacing */\n  --space-unit: 4px;\n  --space-xs: calc(var(--space-unit) * 2);\n  --space-sm: calc(var(--space-unit) * 3);\n  --space-md: calc(var(--space-unit) * 4);\n\n  /* Typography */\n  --font-sans: -apple-system, \"SF Pro Text\", sans-serif;\n  --font-display: -apple-system, \"SF Pro Display\", sans-serif;\n  --font-mono: \"SF Mono\", monospace;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --animation-duration: 0ms;\n    --animation-scale: 0;\n    --spring-config-gentle: linear;\n    --spring-config-bouncy: linear;\n  }\n}\n\n.dark {\n  --glass-bg-primary: rgba(20, 20, 20, 0.7);\n  --glass-bg-secondary: rgba(20, 20, 20, 0.5);\n  --glass-border: rgba(255, 255, 255, 0.1);\n}",
          "description": "Add CSS variables and media queries to respect user's motion preferences",
          "content": ":root {\n  /* Colors */\n  --glass-bg-primary: rgba(255, 255, 255, 0.7);\n  --glass-bg-secondary: rgba(255, 255, 255, 0.5);\n  --glass-border: rgba(255, 255, 255, 0.2);\n\n  /* Effects */\n  --glass-blur: 12px;\n  --glass-saturation: 1.8;\n  --glass-brightness: 1.2;\n\n  /* Animations */\n  --spring-config-gentle: cubic-bezier(0.4, 0, 0.2, 1);\n  --spring-config-bouncy: cubic-bezier(0.68, -0.6, 0.32, 1.6);\n  --animation-duration: 300ms;\n  --animation-scale: 1;\n\n  /* Spacing */\n  --space-unit: 4px;\n  --space-xs: calc(var(--space-unit) * 2);\n  --space-sm: calc(var(--space-unit) * 3);\n  --space-md: calc(var(--space-unit) * 4);\n\n  /* Typography */\n  --font-sans: -apple-system, \"SF Pro Text\", sans-serif;\n  --font-display: -apple-system, \"SF Pro Display\", sans-serif;\n  --font-mono: \"SF Mono\", monospace;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --animation-duration: 0ms;\n    --animation-scale: 0;\n    --spring-config-gentle: linear;\n    --spring-config-bouncy: linear;\n  }\n}\n\n.dark {\n  --glass-bg-primary: rgba(20, 20, 20, 0.7);\n  --glass-bg-secondary: rgba(20, 20, 20, 0.5);\n  --glass-border: rgba(255, 255, 255, 0.1);\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 159,
        "column": 9,
        "message": "Backdrop-filter can cause performance issues on lower-end devices",
        "description": "Backdrop-filter can cause performance issues on lower-end devices This implementation could impact application performance.",
        "suggestion": "Add conditional rendering or fallback styles for devices that don't support backdrop-filter efficiently",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 648,
        "column": 3,
        "message": "Color contrast may be insufficient with glass effects",
        "description": "Color contrast may be insufficient with glass effects This code works but could be improved for better maintainability.",
        "suggestion": "Ensure text color has sufficient contrast ratio against glass backgrounds, especially for users with visual impairments",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx-security-5",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/design-system.mdx",
        "line": 220,
        "column": 7,
        "message": "Potential XSS vulnerability with dangerouslySetInnerHTML equivalent patterns",
        "description": "Potential XSS vulnerability with dangerouslySetInnerHTML equivalent patterns This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Validate and sanitize dynamic style properties to prevent CSS injection attacks",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function DynamicGlass({ children, mousePosition }) {\n  const safeRefractionValue = Math.max(0, Math.min(1, mousePosition.x / window.innerWidth));\n  const safeLuminosityValue = Math.max(0, Math.min(1, mousePosition.y / window.innerHeight));\n  \n  return (\n    <div\n      style={{\n        \"--glass-refraction\": safeRefractionValue,\n        \"--glass-luminosity\": safeLuminosityValue,\n      }}\n      className=\"glass-dynamic\"\n    >\n      {children}\n    </div>\n  );\n}",
          "description": "Validate and sanitize dynamic style properties to prevent CSS injection attacks",
          "content": "function DynamicGlass({ children, mousePosition }) {\n  const safeRefractionValue = Math.max(0, Math.min(1, mousePosition.x / window.innerWidth));\n  const safeLuminosityValue = Math.max(0, Math.min(1, mousePosition.y / window.innerHeight));\n  \n  return (\n    <div\n      style={{\n        \"--glass-refraction\": safeRefractionValue,\n        \"--glass-luminosity\": safeLuminosityValue,\n      }}\n      className=\"glass-dynamic\"\n    >\n      {children}\n    </div>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx",
        "line": 253,
        "column": 3,
        "message": "Modal close button should have proper ARIA attributes for better screen reader support",
        "description": "Modal close button should have proper ARIA attributes for better screen reader support This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button' and ensure proper keyboard event handling for the close button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <button\n    onClick={onClose}\n    onKeyDown={(e) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onClose();\n      }\n    }}\n    aria-label=\"Close modal\"\n    role=\"button\"\n    type=\"button\"\n  >\n    ×\n  </button>",
          "description": "Add role='button' and ensure proper keyboard event handling for the close button",
          "content": "  <button\n    onClick={onClose}\n    onKeyDown={(e) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onClose();\n      }\n    }}\n    aria-label=\"Close modal\"\n    role=\"button\"\n    type=\"button\"\n  >\n    ×\n  </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx",
        "line": 442,
        "column": 3,
        "message": "Navigation menu implementation mixes menubar pattern with link navigation, which can confuse screen readers",
        "description": "Navigation menu implementation mixes menubar pattern with link navigation, which can confuse screen readers This code works but could be improved for better maintainability.",
        "suggestion": "For simple navigation, avoid menubar/menuitem roles and use standard navigation pattern instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<nav aria-label=\"Main navigation\">\n  <ul>\n    {items.map(item => (\n      <li key={item.id}>\n        <a\n          href={item.href}\n          aria-current={isCurrent ? 'page' : undefined}\n        >\n          {item.label}\n        </a>\n      </li>\n    ))}\n  </ul>\n</nav>",
          "description": "For simple navigation, avoid menubar/menuitem roles and use standard navigation pattern instead",
          "content": "<nav aria-label=\"Main navigation\">\n  <ul>\n    {items.map(item => (\n      <li key={item.id}>\n        <a\n          href={item.href}\n          aria-current={isCurrent ? 'page' : undefined}\n        >\n          {item.label}\n        </a>\n      </li>\n    ))}\n  </ul>\n</nav>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx",
        "line": 508,
        "column": 9,
        "message": "Accordion button missing proper heading association and accessible name",
        "description": "Accordion button missing proper heading association and accessible name This code works but could be improved for better maintainability.",
        "suggestion": "Add id to button and proper aria-labelledby relationship",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          id={`title-${section.id}`}\n          aria-expanded={section.isExpanded}\n          aria-controls={`content-${section.id}`}\n          onClick={() => toggleSection(section.id)}\n        >\n          {section.title}\n        </button>",
          "description": "Add id to button and proper aria-labelledby relationship",
          "content": "        <button\n          id={`title-${section.id}`}\n          aria-expanded={section.isExpanded}\n          aria-controls={`content-${section.id}`}\n          onClick={() => toggleSection(section.id)}\n        >\n          {section.title}\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx",
        "line": 93,
        "column": 19,
        "message": "Inconsistent arrow function formatting throughout the document",
        "description": "Inconsistent arrow function formatting throughout the document This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent arrow function formatting with proper spacing",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  onKeyDown={(e) => {",
          "description": "Use consistent arrow function formatting with proper spacing",
          "content": "  onKeyDown={(e) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/concepts/accessibility.mdx",
        "line": 216,
        "column": 17,
        "message": "Inconsistent arrow function formatting in map callbacks",
        "description": "Inconsistent arrow function formatting in map callbacks This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent arrow function formatting with proper spacing",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {links.map(link => (",
          "description": "Use consistent arrow function formatting with proper spacing",
          "content": "        {links.map(link => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx",
        "line": 29,
        "column": 5,
        "message": "Missing aria-describedby relationship between tooltip and trigger element",
        "description": "Missing aria-describedby relationship between tooltip and trigger element This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby attribute to establish proper relationship between tooltip and trigger",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <Tooltip content=\"This is a helpful tooltip\" aria-describedby=\"tooltip-basic\">\n      <Button aria-describedby=\"tooltip-basic\">Hover me</Button>\n    </Tooltip>",
          "description": "Add aria-describedby attribute to establish proper relationship between tooltip and trigger",
          "content": "    <Tooltip content=\"This is a helpful tooltip\" aria-describedby=\"tooltip-basic\">\n      <Button aria-describedby=\"tooltip-basic\">Hover me</Button>\n    </Tooltip>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx",
        "line": 57,
        "column": 7,
        "message": "Tooltip placement 'center' is not a valid placement option and may cause confusion",
        "description": "Tooltip placement 'center' is not a valid placement option and may cause confusion This code works but could be improved for better maintainability.",
        "suggestion": "Use a valid placement option from the documented Placement type",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <Tooltip content=\"Center\" placement=\"top\">\n        <Button>Center</Button>\n      </Tooltip>",
          "description": "Use a valid placement option from the documented Placement type",
          "content": "      <Tooltip content=\"Center\" placement=\"top\">\n        <Button>Center</Button>\n      </Tooltip>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx",
        "line": 264,
        "column": 5,
        "message": "Interactive tooltip without proper keyboard navigation support",
        "description": "Interactive tooltip without proper keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add keyboard event handlers and focus management for interactive tooltips",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx",
        "line": 316,
        "column": 11,
        "message": "Form label association missing proper htmlFor and id relationship",
        "description": "Form label association missing proper htmlFor and id relationship This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the checkbox input has a proper id attribute to match the label",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <input\n          id=\"disable-tooltip\"\n          type=\"checkbox\"\n          checked={disabled}\n          onChange={(e) => setDisabled(e.target.checked)}\n        />\n        <label htmlFor=\"disable-tooltip\">Disable tooltip</label>",
          "description": "Ensure the checkbox input has a proper id attribute to match the label",
          "content": "        <input\n          id=\"disable-tooltip\"\n          type=\"checkbox\"\n          checked={disabled}\n          onChange={(e) => setDisabled(e.target.checked)}\n        />\n        <label htmlFor=\"disable-tooltip\">Disable tooltip</label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tooltip.mdx",
        "line": 126,
        "column": 15,
        "message": "Inefficient array creation in render method",
        "description": "Inefficient array creation in render method This implementation could impact application performance.",
        "suggestion": "Move array creation outside render or use useMemo to avoid recreation on each render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Tooltip, Button } from \"@liquidify/react\";\nimport { Info, Star } from \"lucide-react\";\nimport { useMemo } from \"react\";\n\nfunction RichContentTooltip() {\n  const stars = useMemo(() => [...Array(5)], []);\n\n  return (\n    <div className=\"flex gap-4\">\n      <Tooltip\n        content={\n          <div className=\"flex items-center gap-2\">\n            <Info size={16} />\n            <span>This action cannot be undone</span>\n          </div>\n        }\n      >\n        <Button color=\"danger\">Delete</Button>\n      </Tooltip>\n\n      <Tooltip\n        content={\n          <div>\n            <div className=\"font-semibold mb-1\">Premium Feature</div>\n            <div className=\"text-sm\">Upgrade to access advanced analytics</div>\n            <div className=\"flex items-center gap-1 mt-2\">\n              {stars.map((_, i) => (\n                <Star\n                  key={i}\n                  size={12}\n                  className=\"fill-yellow-400 text-yellow-400\"\n                />\n              ))}\n            </div>\n          </div>\n        }\n        className=\"max-w-xs\"\n      >\n        <Button variant=\"outline\">Analytics</Button>\n      </Tooltip>\n    </div>\n  );\n}",
          "description": "Move array creation outside render or use useMemo to avoid recreation on each render",
          "content": "import { Tooltip, Button } from \"@liquidify/react\";\nimport { Info, Star } from \"lucide-react\";\nimport { useMemo } from \"react\";\n\nfunction RichContentTooltip() {\n  const stars = useMemo(() => [...Array(5)], []);\n\n  return (\n    <div className=\"flex gap-4\">\n      <Tooltip\n        content={\n          <div className=\"flex items-center gap-2\">\n            <Info size={16} />\n            <span>This action cannot be undone</span>\n          </div>\n        }\n      >\n        <Button color=\"danger\">Delete</Button>\n      </Tooltip>\n\n      <Tooltip\n        content={\n          <div>\n            <div className=\"font-semibold mb-1\">Premium Feature</div>\n            <div className=\"text-sm\">Upgrade to access advanced analytics</div>\n            <div className=\"flex items-center gap-1 mt-2\">\n              {stars.map((_, i) => (\n                <Star\n                  key={i}\n                  size={12}\n                  className=\"fill-yellow-400 text-yellow-400\"\n                />\n              ))}\n            </div>\n          </div>\n        }\n        className=\"max-w-xs\"\n      >\n        <Button variant=\"outline\">Analytics</Button>\n      </Tooltip>\n    </div>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-0",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 22,
        "column": 5,
        "message": "Unicode escape sequences used for HTML-like syntax instead of proper JSX",
        "description": "Unicode escape sequences used for HTML-like syntax instead of proper JSX This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper JSX syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <Button\n      onClick={() =>\n        toast({\n          title: \"Update Available\",\n          description: \"A new version is ready to install.\",\n        })\n      }\n    >\n      Show Toast\n    </Button>",
          "description": "Replace unicode escape sequences with proper JSX syntax",
          "content": "    <Button\n      onClick={() =>\n        toast({\n          title: \"Update Available\",\n          description: \"A new version is ready to install.\",\n        })\n      }\n    >\n      Show Toast\n    </Button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-1",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 57,
        "column": 15,
        "message": "Unicode escape sequences used for arrow function syntax",
        "description": "Unicode escape sequences used for arrow function syntax This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper arrow function syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    onClick: () => {",
          "description": "Replace unicode escape sequences with proper arrow function syntax",
          "content": "    onClick: () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-2",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 63,
        "column": 15,
        "message": "Unicode escape sequences used for arrow function syntax",
        "description": "Unicode escape sequences used for arrow function syntax This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper arrow function syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    onClick: () => {",
          "description": "Replace unicode escape sequences with proper arrow function syntax",
          "content": "    onClick: () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-3",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 96,
        "column": 47,
        "message": "Unicode escape sequences used for arrow function syntax throughout table cells",
        "description": "Unicode escape sequences used for arrow function syntax throughout table cells This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper arrow function syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| `action`      | `{ label: string; onClick: () => void }`                                       | -           | Primary action button          |",
          "description": "Replace unicode escape sequences with proper arrow function syntax",
          "content": "| `action`      | `{ label: string; onClick: () => void }`                                       | -           | Primary action button          |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-4",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 97,
        "column": 47,
        "message": "Unicode escape sequences used for arrow function syntax throughout table cells",
        "description": "Unicode escape sequences used for arrow function syntax throughout table cells This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper arrow function syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| `cancel`      | `{ label: string; onClick: () => void }`                                       | -           | Secondary action button        |",
          "description": "Replace unicode escape sequences with proper arrow function syntax",
          "content": "| `cancel`      | `{ label: string; onClick: () => void }`                                       | -           | Secondary action button        |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-5",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 99,
        "column": 18,
        "message": "Unicode escape sequences used for arrow function syntax",
        "description": "Unicode escape sequences used for arrow function syntax This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper arrow function syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| `onDismiss`   | `() => void`                                                   | -           | Called when toast is dismissed |",
          "description": "Replace unicode escape sequences with proper arrow function syntax",
          "content": "| `onDismiss`   | `() => void`                                                   | -           | Called when toast is dismissed |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx-formatting-6",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/toast.mdx",
        "line": 155,
        "column": 5,
        "message": "Unicode escape sequences used for JSX syntax in theme provider example",
        "description": "Unicode escape sequences used for JSX syntax in theme provider example This code works but could be improved for better maintainability.",
        "suggestion": "Replace unicode escape sequences with proper JSX syntax",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <ThemeProvider theme={customTheme}>\n      <ToastProvider>\n        {/* Your app */}\n      </ToastProvider>\n    </ThemeProvider>",
          "description": "Replace unicode escape sequences with proper JSX syntax",
          "content": "    <ThemeProvider theme={customTheme}>\n      <ToastProvider>\n        {/* Your app */}\n      </ToastProvider>\n    </ThemeProvider>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx-security-0",
        "type": "security",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx",
        "line": 229,
        "column": 17,
        "message": "Use of dangerouslySetInnerHTML without proper sanitization can lead to XSS attacks",
        "description": "Use of dangerouslySetInnerHTML without proper sanitization can lead to XSS attacks This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Sanitize HTML content before rendering or use a safer alternative like a markdown parser",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);",
          "description": "Sanitize HTML content before rendering or use a safer alternative like a markdown parser",
          "content": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx",
        "line": 198,
        "column": 9,
        "message": "Missing alt attribute or aria-label for interactive elements that may need screen reader context",
        "description": "Missing alt attribute or aria-label for interactive elements that may need screen reader context This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          variant={!preview ? \"primary\" : \"secondary\"}\n          size=\"sm\"\n          onClick={() => setPreview(false)}\n          aria-label=\"Switch to write mode\"\n        >\n          Write\n        </GlassButton>\n        <GlassButton\n          variant={preview ? \"primary\" : \"secondary\"}\n          size=\"sm\"\n          onClick={() => setPreview(true)}\n          aria-label=\"Switch to preview mode\"\n        >",
          "description": "Add aria-label or aria-describedby attributes to buttons for better screen reader support",
          "content": "        <GlassButton\n          variant={!preview ? \"primary\" : \"secondary\"}\n          size=\"sm\"\n          onClick={() => setPreview(false)}\n          aria-label=\"Switch to write mode\"\n        >\n          Write\n        </GlassButton>\n        <GlassButton\n          variant={preview ? \"primary\" : \"secondary\"}\n          size=\"sm\"\n          onClick={() => setPreview(true)}\n          aria-label=\"Switch to preview mode\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx",
        "line": 177,
        "column": 5,
        "message": "String replacement operations in formatContent function are inefficient and run on every render",
        "description": "String replacement operations in formatContent function are inefficient and run on every render This implementation could impact application performance.",
        "suggestion": "Memoize the formatContent function or move it outside the component to avoid recreation on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const formatContent = useCallback((text: string) => {\n    // Simple markdown-like formatting\n    return text\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\")\n      .replace(/\\n/g, \"<br />\");\n  }, []);",
          "description": "Memoize the formatContent function or move it outside the component to avoid recreation on every render",
          "content": "  const formatContent = useCallback((text: string) => {\n    // Simple markdown-like formatting\n    return text\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\")\n      .replace(/\\n/g, \"<br />\");\n  }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx",
        "line": 268,
        "column": 5,
        "message": "Missing error handling for async operation in handleSubmit function",
        "description": "Missing error handling for async operation in handleSubmit function This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential errors in the simulated API call",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!newComment.trim()) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      const comment = {\n        id: comments.length + 1,\n        author: \"Current User\",\n        content: newComment,\n        timestamp: \"Just now\",\n      };\n\n      setComments((prev) => [...prev, comment]);\n      setNewComment(\"\");\n    } catch (error) {\n      console.error(\"Failed to post comment:\", error);\n      // Handle error appropriately (show toast, etc.)\n    } finally {\n      setIsSubmitting(false);\n    }\n  };",
          "description": "Add try-catch block to handle potential errors in the simulated API call",
          "content": "  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!newComment.trim()) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      const comment = {\n        id: comments.length + 1,\n        author: \"Current User\",\n        content: newComment,\n        timestamp: \"Just now\",\n      };\n\n      setComments((prev) => [...prev, comment]);\n      setNewComment(\"\");\n    } catch (error) {\n      console.error(\"Failed to post comment:\", error);\n      // Handle error appropriately (show toast, etc.)\n    } finally {\n      setIsSubmitting(false);\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/textarea.mdx",
        "line": 119,
        "column": 5,
        "message": "Form lacks proper fieldset and legend structure for better screen reader navigation",
        "description": "Form lacks proper fieldset and legend structure for better screen reader navigation This code works but could be improved for better maintainability.",
        "suggestion": "Wrap related form fields in fieldset elements with descriptive legends",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 24,
        "column": 48,
        "message": "Missing import statements for icons used in examples could cause runtime errors and impact screen reader users",
        "description": "Missing import statements for icons used in examples could cause runtime errors and impact screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Add import statements for all icons used in examples to ensure they exist and have proper accessibility attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import { ChartIcon, AnalyticsIcon, ReportsIcon, DashboardIcon, TrendingUpIcon, UsersIcon, FileTextIcon, UserIcon, SettingsIcon, BellIcon, ShieldIcon, CreditCardIcon } from '@liquidify/icons';\n",
          "description": "Add import statements for all icons used in examples to ensure they exist and have proper accessibility attributes",
          "content": "import { ChartIcon, AnalyticsIcon, ReportsIcon, DashboardIcon, TrendingUpIcon, UsersIcon, FileTextIcon, UserIcon, SettingsIcon, BellIcon, ShieldIcon, CreditCardIcon } from '@liquidify/icons';\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 162,
        "column": 31,
        "message": "Missing import for useState hook used in examples",
        "description": "Missing import for useState hook used in examples This will likely cause errors during execution.",
        "suggestion": "Add React import with useState hook",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n",
          "description": "Add React import with useState hook",
          "content": "import React, { useState } from 'react';\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 170,
        "column": 19,
        "message": "Missing imports for referenced components (GlassBadge, GlassCard, GlassSpinner) that could cause runtime errors",
        "description": "Missing imports for referenced components (GlassBadge, GlassCard, GlassSpinner) that could cause runtime errors This will likely cause errors during execution.",
        "suggestion": "Add import statements for all referenced Glass components",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import { GlassBadge, GlassCard, GlassSpinner } from '@liquidify/components';\n",
          "description": "Add import statements for all referenced Glass components",
          "content": "import { GlassBadge, GlassCard, GlassSpinner } from '@liquidify/components';\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 24,
        "column": 48,
        "message": "Missing alt text or aria-label for icon-only elements which could impact screen reader users",
        "description": "Missing alt text or aria-label for icon-only elements which could impact screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to icon triggers for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassTabs.Trigger value=\"overview\" icon={<ChartIcon aria-hidden=\"true\" />} aria-label=\"Overview dashboard\">\n      Overview\n    </GlassTabs.Trigger>\n    <GlassTabs.Trigger value=\"analytics\" icon={<AnalyticsIcon aria-hidden=\"true\" />} aria-label=\"Analytics and metrics\">\n      Analytics\n    </GlassTabs.Trigger>\n    <GlassTabs.Trigger value=\"reports\" icon={<ReportsIcon aria-hidden=\"true\" />} aria-label=\"Reports and data\">\n      Reports\n    </GlassTabs.Trigger>",
          "description": "Add aria-label or accessible text to icon triggers for better screen reader support",
          "content": "    <GlassTabs.Trigger value=\"overview\" icon={<ChartIcon aria-hidden=\"true\" />} aria-label=\"Overview dashboard\">\n      Overview\n    </GlassTabs.Trigger>\n    <GlassTabs.Trigger value=\"analytics\" icon={<AnalyticsIcon aria-hidden=\"true\" />} aria-label=\"Analytics and metrics\">\n      Analytics\n    </GlassTabs.Trigger>\n    <GlassTabs.Trigger value=\"reports\" icon={<ReportsIcon aria-hidden=\"true\" />} aria-label=\"Reports and data\">\n      Reports\n    </GlassTabs.Trigger>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 192,
        "column": 9,
        "message": "Heading structure may not be semantic - using h2 and h3 without proper hierarchy context",
        "description": "Heading structure may not be semantic - using h2 and h3 without proper hierarchy context This code works but could be improved for better maintainability.",
        "suggestion": "Ensure heading hierarchy is logical and provide context for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/tabs.mdx",
        "line": 181,
        "column": 15,
        "message": "Inconsistent use of self-closing JSX tags - some examples use self-closing, others don't",
        "description": "Inconsistent use of self-closing JSX tags - some examples use self-closing, others don't This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent JSX formatting throughout the documentation",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <div className=\"text-2xl font-bold\">$24,500</div>",
          "description": "Use consistent JSX formatting throughout the documentation",
          "content": "              <div className=\"text-2xl font-bold\">$24,500</div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 41,
        "column": 9,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add React import at the top of the component",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Button,\n} from \"@liquidify/react\";",
          "description": "Add React import at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Button,\n} from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 131,
        "column": 9,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add React import at the top of the component",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Button,\n  Badge,\n} from \"@liquidify/react\";",
          "description": "Add React import at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Button,\n  Badge,\n} from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-bug-2",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 189,
        "column": 9,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add React import at the top of the component",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Checkbox,\n} from \"@liquidify/react\";",
          "description": "Add React import at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Checkbox,\n} from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-bug-3",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 539,
        "column": 9,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add React import at the top of the component",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\n\nfunction DataTableWithPagination() {",
          "description": "Add React import at the top of the component",
          "content": "import React, { useState } from \"react\";\n\nfunction DataTableWithPagination() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 60,
        "column": 5,
        "message": "Inefficient sorting implementation that mutates and recreates array on every sort",
        "description": "Inefficient sorting implementation that mutates and recreates array on every sort This implementation could impact application performance.",
        "suggestion": "Use useMemo to optimize sorting and consider using a more efficient sorting approach",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 171,
        "column": 17,
        "message": "Action buttons lack accessible labels for screen readers",
        "description": "Action buttons lack accessible labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to icon-only buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <Button size=\"sm\" variant=\"ghost\" isIconOnly aria-label=\"View user\">\n                  <Eye size={16} />\n                </Button>\n                <Button size=\"sm\" variant=\"ghost\" isIconOnly aria-label=\"Edit user\">\n                  <Edit size={16} />\n                </Button>\n                <Button size=\"sm\" variant=\"ghost\" isIconOnly color=\"danger\" aria-label=\"Delete user\">\n                  <Trash size={16} />\n                </Button>",
          "description": "Add aria-label attributes to icon-only buttons",
          "content": "                <Button size=\"sm\" variant=\"ghost\" isIconOnly aria-label=\"View user\">\n                  <Eye size={16} />\n                </Button>\n                <Button size=\"sm\" variant=\"ghost\" isIconOnly aria-label=\"Edit user\">\n                  <Edit size={16} />\n                </Button>\n                <Button size=\"sm\" variant=\"ghost\" isIconOnly color=\"danger\" aria-label=\"Delete user\">\n                  <Trash size={16} />\n                </Button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 64,
        "column": 13,
        "message": "Type error in array access - using string key to access object property without proper typing",
        "description": "Type error in array access - using string key to access object property without proper typing This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add proper TypeScript typing or use type assertion for dynamic property access",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 255,
        "column": 33,
        "message": "Hardcoded CSS class names for responsive design should use consistent utility classes",
        "description": "Hardcoded CSS class names for responsive design should use consistent utility classes This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using a CSS-in-JS solution or consistent utility class naming",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 199,
        "column": 13,
        "message": "Checkbox inputs lack proper labeling for screen readers",
        "description": "Checkbox inputs lack proper labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with proper labels",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <Checkbox\n              checked={isAllSelected}\n              indeterminate={isIndeterminate}\n              onChange={handleSelectAll}\n              aria-label=\"Select all rows\"\n            />",
          "description": "Add aria-label or associate with proper labels",
          "content": "            <Checkbox\n              checked={isAllSelected}\n              indeterminate={isIndeterminate}\n              onChange={handleSelectAll}\n              aria-label=\"Select all rows\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/table.mdx",
        "line": 217,
        "column": 15,
        "message": "Individual row checkboxes lack proper labeling",
        "description": "Individual row checkboxes lack proper labeling This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label with specific row information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <Checkbox\n                checked={selectedRows.includes(row.id)}\n                onChange={() => handleSelectRow(row.id)}\n                aria-label={`Select ${row.name}`}\n              />",
          "description": "Add aria-label with specific row information",
          "content": "              <Checkbox\n                checked={selectedRows.includes(row.id)}\n                onChange={() => handleSelectRow(row.id)}\n                aria-label={`Select ${row.name}`}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 28,
        "column": 9,
        "message": "Missing import for useState hook",
        "description": "Missing import for useState hook This code works but could be improved for better maintainability.",
        "suggestion": "Add React import or useState import at the top of the code block",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport {\n  Sidebar,\n  SidebarItem,\n  SidebarHeader,\n  SidebarToggle,\n} from \"@liquidify/react\";",
          "description": "Add React import or useState import at the top of the code block",
          "content": "import React, { useState } from \"react\";\nimport {\n  Sidebar,\n  SidebarItem,\n  SidebarHeader,\n  SidebarToggle,\n} from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 165,
        "column": 17,
        "message": "Missing import for useAuth hook",
        "description": "Missing import for useAuth hook This code works but could be improved for better maintainability.",
        "suggestion": "Add import for useAuth hook or define it",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 187,
        "column": 17,
        "message": "Missing import for useSidebar hook",
        "description": "Missing import for useSidebar hook This code works but could be improved for better maintainability.",
        "suggestion": "Add import for useSidebar hook or define it",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 244,
        "column": 17,
        "message": "Missing import for useNotifications hook",
        "description": "Missing import for useNotifications hook This code works but could be improved for better maintainability.",
        "suggestion": "Add import for useNotifications hook or define it",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 35,
        "column": 11,
        "message": "Image elements should have meaningful alt text",
        "description": "Image elements should have meaningful alt text This code works but could be improved for better maintainability.",
        "suggestion": "Replace generic 'Logo' with descriptive alt text like 'LiqUIdify company logo'",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<img src=\"/logo.svg\" alt=\"LiqUIdify company logo\" className=\"h-8 w-8\" />",
          "description": "Replace generic 'Logo' with descriptive alt text like 'LiqUIdify company logo'",
          "content": "<img src=\"/logo.svg\" alt=\"LiqUIdify company logo\" className=\"h-8 w-8\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 178,
        "column": 11,
        "message": "Interactive elements should have accessible labels",
        "description": "Interactive elements should have accessible labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to the logout button for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Button variant=\"ghost\" size=\"sm\" isIconOnly aria-label=\"Logout\">\n            <LogOut size={16} />\n          </Button>",
          "description": "Add aria-label to the logout button for screen readers",
          "content": "<Button variant=\"ghost\" size=\"sm\" isIconOnly aria-label=\"Logout\">\n            <LogOut size={16} />\n          </Button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-security-6",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 174,
        "column": 56,
        "message": "Potential XSS vulnerability with unescaped user data",
        "description": "Potential XSS vulnerability with unescaped user data This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Ensure user.name is properly sanitized before rendering",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);",
          "description": "Ensure user.name is properly sanitized before rendering",
          "content": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-security-7",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 175,
        "column": 58,
        "message": "Potential XSS vulnerability with unescaped user data",
        "description": "Potential XSS vulnerability with unescaped user data This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Ensure user.email is properly sanitized before rendering",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);",
          "description": "Ensure user.email is properly sanitized before rendering",
          "content": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 191,
        "column": 9,
        "message": "Inline conditional rendering in JSX may cause unnecessary re-renders",
        "description": "Inline conditional rendering in JSX may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Consider memoizing the overlay component or using a more efficient conditional rendering pattern",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider memoizing the overlay component or using a more efficient conditional rendering pattern",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/sidebar.mdx",
        "line": 194,
        "column": 11,
        "message": "Missing keyboard navigation for overlay dismissal",
        "description": "Missing keyboard navigation for overlay dismissal This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler to close overlay when Escape key is pressed",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<div\n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={() => setIsOpen(false)}\n          onKeyDown={(e) => e.key === 'Escape' && setIsOpen(false)}\n          tabIndex={-1}\n          aria-hidden=\"true\"\n        />",
          "description": "Add onKeyDown handler to close overlay when Escape key is pressed",
          "content": "<div\n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={() => setIsOpen(false)}\n          onKeyDown={(e) => e.key === 'Escape' && setIsOpen(false)}\n          tabIndex={-1}\n          aria-hidden=\"true\"\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 13,
        "column": 1,
        "message": "Missing aria-label or aria-labelledby for radio group without visible label",
        "description": "Missing aria-label or aria-labelledby for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassRadioGroup defaultValue=\"option1\" aria-label=\"Basic options\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "<GlassRadioGroup defaultValue=\"option1\" aria-label=\"Basic options\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 39,
        "column": 3,
        "message": "Missing aria-label for radio group without visible label",
        "description": "Missing aria-label for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <GlassRadioGroup orientation=\"vertical\" aria-label=\"Size selection\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "  <GlassRadioGroup orientation=\"vertical\" aria-label=\"Size selection\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 50,
        "column": 3,
        "message": "Missing aria-label for radio group without visible label",
        "description": "Missing aria-label for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <GlassRadioGroup orientation=\"horizontal\" aria-label=\"Size selection horizontal\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "  <GlassRadioGroup orientation=\"horizontal\" aria-label=\"Size selection horizontal\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 65,
        "column": 3,
        "message": "Missing aria-label for radio group without visible label",
        "description": "Missing aria-label for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <GlassRadioGroup size=\"sm\" aria-label=\"Small size option\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "  <GlassRadioGroup size=\"sm\" aria-label=\"Small size option\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 73,
        "column": 3,
        "message": "Missing aria-label for radio group without visible label",
        "description": "Missing aria-label for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <GlassRadioGroup size=\"md\" aria-label=\"Medium size option\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "  <GlassRadioGroup size=\"md\" aria-label=\"Medium size option\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 81,
        "column": 3,
        "message": "Missing aria-label for radio group without visible label",
        "description": "Missing aria-label for radio group without visible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop to provide accessible name for the radio group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <GlassRadioGroup size=\"lg\" aria-label=\"Large size option\">",
          "description": "Add aria-label prop to provide accessible name for the radio group",
          "content": "  <GlassRadioGroup size=\"lg\" aria-label=\"Large size option\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/radio-group.mdx",
        "line": 105,
        "column": 1,
        "message": "Inconsistent spacing in table formatting",
        "description": "Inconsistent spacing in table formatting This violates code style conventions and may reduce readability.",
        "suggestion": "Ensure consistent column alignment in markdown tables",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "```",
          "description": "Ensure consistent column alignment in markdown tables",
          "content": "```"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx",
        "line": 286,
        "column": 23,
        "message": "Missing import for React and useState hook that are used in the code",
        "description": "Missing import for React and useState hook that are used in the code This code works but could be improved for better maintainability.",
        "suggestion": "Add import statement for React and useState at the beginning of code blocks",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { useState } from \"react\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Button,\n  Input,\n  Label,\n  Textarea,\n} from \"@liquidify/react\";\nimport { Plus } from \"lucide-react\";\n\nfunction FormPopover() {\n  const [isOpen, setIsOpen] = useState(false);",
          "description": "Add import statement for React and useState at the beginning of code blocks",
          "content": "import { useState } from \"react\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Button,\n  Input,\n  Label,\n  Textarea,\n} from \"@liquidify/react\";\nimport { Plus } from \"lucide-react\";\n\nfunction FormPopover() {\n  const [isOpen, setIsOpen] = useState(false);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx",
        "line": 709,
        "column": 15,
        "message": "Color picker buttons lack accessible labels for screen readers",
        "description": "Color picker buttons lack accessible labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to color picker buttons with the color value",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                key={color}\n                className={`w-12 h-12 rounded-lg border-2 ${\n                  selectedColor === color\n                    ? \"border-gray-400\"\n                    : \"border-gray-200\"\n                }`}\n                style={{ backgroundColor: color }}\n                onClick={() => setSelectedColor(color)}\n                aria-label={`Select color ${color}`}\n              />",
          "description": "Add aria-label to color picker buttons with the color value",
          "content": "              <button\n                key={color}\n                className={`w-12 h-12 rounded-lg border-2 ${\n                  selectedColor === color\n                    ? \"border-gray-400\"\n                    : \"border-gray-200\"\n                }`}\n                style={{ backgroundColor: color }}\n                onClick={() => setSelectedColor(color)}\n                aria-label={`Select color ${color}`}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx",
        "line": 678,
        "column": 5,
        "message": "Hard-coded color values without consideration for high contrast themes or color blind users",
        "description": "Hard-coded color values without consideration for high contrast themes or color blind users This code works but could be improved for better maintainability.",
        "suggestion": "Consider using CSS custom properties or a design token system for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx",
        "line": 703,
        "column": 9,
        "message": "Inline style object creation on every render",
        "description": "Inline style object creation on every render This implementation could impact application performance.",
        "suggestion": "Move style object outside component or use useMemo for dynamic styles",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Button\n          variant=\"outline\"\n          className=\"w-20 h-10\"\n          style={useMemo(() => ({ backgroundColor: selectedColor }), [selectedColor])}\n        >",
          "description": "Move style object outside component or use useMemo for dynamic styles",
          "content": "        <Button\n          variant=\"outline\"\n          className=\"w-20 h-10\"\n          style={useMemo(() => ({ backgroundColor: selectedColor }), [selectedColor])}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/popover.mdx",
        "line": 717,
        "column": 17,
        "message": "Inline style object creation in map loop",
        "description": "Inline style object creation in map loop This implementation could impact application performance.",
        "suggestion": "Create style object outside the map function or use CSS classes",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 14,
        "column": 34,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This will likely cause errors during execution.",
        "suggestion": "Import React and useState at the top of the component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { Pagination } from \"@liquidify/react\";",
          "description": "Import React and useState at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport { Pagination } from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 29,
        "column": 34,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This will likely cause errors during execution.",
        "suggestion": "Import React and useState at the top of the component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { Pagination, Select, SelectItem } from \"@liquidify/react\";",
          "description": "Import React and useState at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport { Pagination, Select, SelectItem } from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 68,
        "column": 34,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This will likely cause errors during execution.",
        "suggestion": "Import React and useState at the top of the component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { Pagination } from \"@liquidify/react\";",
          "description": "Import React and useState at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport { Pagination } from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 87,
        "column": 34,
        "message": "Missing React import for useState hook",
        "description": "Missing React import for useState hook This will likely cause errors during execution.",
        "suggestion": "Import React and useState at the top of the component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { Pagination, Input, Button } from \"@liquidify/react\";",
          "description": "Import React and useState at the top of the component",
          "content": "import React, { useState } from \"react\";\nimport { Pagination, Input, Button } from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 327,
        "column": 23,
        "message": "Using window.innerWidth in render can cause hydration issues and performance problems",
        "description": "Using window.innerWidth in render can cause hydration issues and performance problems This implementation could impact application performance.",
        "suggestion": "Use useEffect with a resize event listener or a media query hook",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 328,
        "column": 26,
        "message": "Using window.innerWidth in render can cause hydration issues and performance problems",
        "description": "Using window.innerWidth in render can cause hydration issues and performance problems This implementation could impact application performance.",
        "suggestion": "Use useEffect with a resize event listener or a media query hook",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 108,
        "column": 9,
        "message": "Input field lacks proper labeling for screen readers",
        "description": "Input field lacks proper labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a proper label element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Input\n          type=\"number\"\n          value={jumpPage}\n          onChange={(e) => setJumpPage(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Page\"\n          className=\"w-20\"\n          min={1}\n          max={totalPages}\n          aria-label={`Jump to page, enter page number between 1 and ${totalPages}`}\n        />",
          "description": "Add aria-label or associate with a proper label element",
          "content": "        <Input\n          type=\"number\"\n          value={jumpPage}\n          onChange={(e) => setJumpPage(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Page\"\n          className=\"w-20\"\n          min={1}\n          max={totalPages}\n          aria-label={`Jump to page, enter page number between 1 and ${totalPages}`}\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/pagination.mdx",
        "line": 100,
        "column": 32,
        "message": "Inconsistent naming convention for event handler parameter",
        "description": "Inconsistent naming convention for event handler parameter This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent naming for event parameters (e.g., 'event' instead of 'e')",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx",
        "line": 16,
        "column": 1,
        "message": "Missing ARIA attributes for notification component examples",
        "description": "Missing ARIA attributes for notification component examples This code works but could be improved for better maintainability.",
        "suggestion": "Add role='alert' or role='status' and aria-live attributes to notification examples for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Notification\n  title=\"Success!\"\n  message=\"Your changes have been saved successfully.\"\n  type=\"success\"\n  role=\"alert\"\n  aria-live=\"polite\"\n/>",
          "description": "Add role='alert' or role='status' and aria-live attributes to notification examples for better screen reader support",
          "content": "<Notification\n  title=\"Success!\"\n  message=\"Your changes have been saved successfully.\"\n  type=\"success\"\n  role=\"alert\"\n  aria-live=\"polite\"\n/>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx",
        "line": 70,
        "column": 1,
        "message": "Error notifications should use aria-live='assertive' for immediate announcement",
        "description": "Error notifications should use aria-live='assertive' for immediate announcement This code works but could be improved for better maintainability.",
        "suggestion": "Error type notifications should use aria-live='assertive' to ensure immediate screen reader announcement",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<Notification\n  title=\"Error\"\n  message=\"Something went wrong. Please try again.\"\n  type=\"error\"\n  role=\"alert\"\n  aria-live=\"assertive\"\n/>",
          "description": "Error type notifications should use aria-live='assertive' to ensure immediate screen reader announcement",
          "content": "<Notification\n  title=\"Error\"\n  message=\"Something went wrong. Please try again.\"\n  type=\"error\"\n  role=\"alert\"\n  aria-live=\"assertive\"\n/>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx",
        "line": 120,
        "column": 1,
        "message": "Missing keyboard interaction documentation for dismissible notifications",
        "description": "Missing keyboard interaction documentation for dismissible notifications This code works but could be improved for better maintainability.",
        "suggestion": "Document Escape key support for dismissing notifications and focus behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "## Accessibility\n\n- Uses ARIA live regions for screen reader announcements\n- Error notifications use `aria-live=\"assertive\"` for immediate announcement\n- Info/success notifications use `aria-live=\"polite\"` for non-disruptive announcement\n- Keyboard navigation support for action buttons\n- Escape key dismisses notification when focused\n- Focus management when notification appears\n- Focus returns to trigger element when notification is dismissed\n- Proper color contrast for all variants\n- Screen reader accessible close button with descriptive label",
          "description": "Document Escape key support for dismissing notifications and focus behavior",
          "content": "## Accessibility\n\n- Uses ARIA live regions for screen reader announcements\n- Error notifications use `aria-live=\"assertive\"` for immediate announcement\n- Info/success notifications use `aria-live=\"polite\"` for non-disruptive announcement\n- Keyboard navigation support for action buttons\n- Escape key dismisses notification when focused\n- Focus management when notification appears\n- Focus returns to trigger element when notification is dismissed\n- Proper color contrast for all variants\n- Screen reader accessible close button with descriptive label"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx-structure-3",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/notification.mdx",
        "line": 99,
        "column": 1,
        "message": "Missing required props documentation",
        "description": "Missing required props documentation This code works but could be improved for better maintainability.",
        "suggestion": "Mark required props in the props table and add validation information",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop        | Type                                                            | Default  | Required | Description                    |\n| ----------- | --------------------------------------------------------------- | -------- | -------- | ------------------------------ |\n| `title`     | `string`                                                        | -        | Yes      | Notification title             |\n| `message`   | `string`                                                        | -        | Yes      | Notification message           |\n| `type`      | `\"success\" \\| \"warning\" \\| \"error\" \\| \"info\"`                   | `\"info\"` | No       | Notification type              |\n| `autoHide`  | `boolean`                                                       | `false`  | No       | Auto-hide after duration       |\n| `duration`  | `number`                                                        | `5000`   | No       | Duration before auto-hide (ms) |\n| `actions`   | `Array<{label: string, onClick: () => void, variant?: string}>` | -        | No       | Action buttons                 |\n| `onClose`   | `() => void`                                                    | -        | No       | Close callback                 |\n| `className` | `string`                                                        | -        | No       | Additional CSS classes         |",
          "description": "Mark required props in the props table and add validation information",
          "content": "| Prop        | Type                                                            | Default  | Required | Description                    |\n| ----------- | --------------------------------------------------------------- | -------- | -------- | ------------------------------ |\n| `title`     | `string`                                                        | -        | Yes      | Notification title             |\n| `message`   | `string`                                                        | -        | Yes      | Notification message           |\n| `type`      | `\"success\" \\| \"warning\" \\| \"error\" \\| \"info\"`                   | `\"info\"` | No       | Notification type              |\n| `autoHide`  | `boolean`                                                       | `false`  | No       | Auto-hide after duration       |\n| `duration`  | `number`                                                        | `5000`   | No       | Duration before auto-hide (ms) |\n| `actions`   | `Array<{label: string, onClick: () => void, variant?: string}>` | -        | No       | Action buttons                 |\n| `onClose`   | `() => void`                                                    | -        | No       | Close callback                 |\n| `className` | `string`                                                        | -        | No       | Additional CSS classes         |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 32,
        "column": 1,
        "message": "Missing required aria-label prop documentation emphasis for GlassIconButton",
        "description": "Missing required aria-label prop documentation emphasis for GlassIconButton This will likely cause errors during execution.",
        "suggestion": "Emphasize that aria-label is required for accessibility compliance",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `aria-label`: string - Accessibility label (**REQUIRED** for screen readers)",
          "description": "Emphasize that aria-label is required for accessibility compliance",
          "content": "- `aria-label`: string - Accessibility label (**REQUIRED** for screen readers)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 84,
        "column": 1,
        "message": "Missing required aria-label prop documentation emphasis for GlassFloatingAction",
        "description": "Missing required aria-label prop documentation emphasis for GlassFloatingAction This will likely cause errors during execution.",
        "suggestion": "Emphasize that aria-label is required for accessibility compliance",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `aria-label`: string - Accessibility label (**REQUIRED** for screen readers)",
          "description": "Emphasize that aria-label is required for accessibility compliance",
          "content": "- `aria-label`: string - Accessibility label (**REQUIRED** for screen readers)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 148,
        "column": 1,
        "message": "Missing accessibility guidance for custom separators in GlassBreadcrumb",
        "description": "Missing accessibility guidance for custom separators in GlassBreadcrumb This code works but could be improved for better maintainability.",
        "suggestion": "Document that custom separators should have proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `separator`: React.ReactNode - Custom separator (default: '/') - Should include aria-hidden=\"true\" for decorative elements",
          "description": "Document that custom separators should have proper ARIA attributes",
          "content": "- `separator`: React.ReactNode - Custom separator (default: '/') - Should include aria-hidden=\"true\" for decorative elements"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 213,
        "column": 1,
        "message": "Missing keyboard navigation documentation for GlassPagination",
        "description": "Missing keyboard navigation documentation for GlassPagination This code works but could be improved for better maintainability.",
        "suggestion": "Add documentation about keyboard navigation support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `maxVisiblePages`: number - Maximum visible page numbers (default: 7)\n- `size`: 'sm' | 'md' | 'lg' - Component size (default: 'md')\n- `keyboardNavigation`: boolean - Enable arrow key navigation (default: true)",
          "description": "Add documentation about keyboard navigation support",
          "content": "- `maxVisiblePages`: number - Maximum visible page numbers (default: 7)\n- `size`: 'sm' | 'md' | 'lg' - Component size (default: 'md')\n- `keyboardNavigation`: boolean - Enable arrow key navigation (default: true)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 239,
        "column": 1,
        "message": "Missing ARIA role documentation for GlassStepper",
        "description": "Missing ARIA role documentation for GlassStepper This code works but could be improved for better maintainability.",
        "suggestion": "Document ARIA roles for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 420,
        "column": 1,
        "message": "Missing performance considerations for GlassChart with large datasets",
        "description": "Missing performance considerations for GlassChart with large datasets This implementation could impact application performance.",
        "suggestion": "Add documentation about data limits and virtualization for large datasets",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `animated`: boolean - Enable animations (default: true)\n- `maxDataPoints`: number - Maximum recommended data points for optimal performance (default: 1000)\n- `virtualizeData`: boolean - Enable data virtualization for large datasets (default: false)",
          "description": "Add documentation about data limits and virtualization for large datasets",
          "content": "- `animated`: boolean - Enable animations (default: true)\n- `maxDataPoints`: number - Maximum recommended data points for optimal performance (default: 1000)\n- `virtualizeData`: boolean - Enable data virtualization for large datasets (default: false)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-convention-6",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 427,
        "column": 1,
        "message": "Inconsistent prop naming for boolean props",
        "description": "Inconsistent prop naming for boolean props This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent naming pattern for boolean props (showX vs enableX)",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-security-7",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 366,
        "column": 1,
        "message": "Missing XSS protection guidance for user-provided content in GlassNotification and GlassToast",
        "description": "Missing XSS protection guidance for user-provided content in GlassNotification and GlassToast This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Document that message content should be sanitized when containing user input",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `message`: string - Notification message (sanitize if user-provided content)",
          "description": "Document that message content should be sanitized when containing user input",
          "content": "- `message`: string - Notification message (sanitize if user-provided content)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx-accessibility-8",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/new-components.mdx",
        "line": 298,
        "column": 1,
        "message": "Missing focus management documentation for modal-like components",
        "description": "Missing focus management documentation for modal-like components This will likely cause errors during execution.",
        "suggestion": "Document focus management and keyboard trap behavior for GlassMenu dropdown mode",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 68,
        "column": 37,
        "message": "useState is used but not imported from React",
        "description": "useState is used but not imported from React This will likely cause errors during execution.",
        "suggestion": "Import useState from React",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarContent,\n  NavbarItem,\n  NavbarMenuToggle,\n  NavbarMenu,\n  NavbarMenuItem,\n} from \"@liquidify/react\";",
          "description": "Import useState from React",
          "content": "import React, { useState } from 'react';\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarContent,\n  NavbarItem,\n  NavbarMenuToggle,\n  NavbarMenu,\n  NavbarMenuItem,\n} from \"@liquidify/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 19,
        "column": 9,
        "message": "Image element should have descriptive alt text",
        "description": "Image element should have descriptive alt text This code works but could be improved for better maintainability.",
        "suggestion": "Use more descriptive alt text instead of generic 'Logo'",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 151,
        "column": 15,
        "message": "Generic button element without proper aria attributes",
        "description": "Generic button element without proper aria attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby to provide context for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<button aria-label=\"Products menu\">Products</button>",
          "description": "Add aria-label or aria-describedby to provide context for screen readers",
          "content": "<button aria-label=\"Products menu\">Products</button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 243,
        "column": 11,
        "message": "Generic button element without proper aria attributes for theme toggle",
        "description": "Generic button element without proper aria attributes for theme toggle This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the theme toggle action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <Button\n            variant=\"ghost\"\n            aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n            onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n          >",
          "description": "Add aria-label to describe the theme toggle action",
          "content": "          <Button\n            variant=\"ghost\"\n            aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n            onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-4",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 228,
        "column": 27,
        "message": "useTheme hook is used but not defined or imported",
        "description": "useTheme hook is used but not defined or imported This will likely cause errors during execution.",
        "suggestion": "Import useTheme from the appropriate library or define it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-5",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 476,
        "column": 21,
        "message": "useCart hook is used but not defined or imported",
        "description": "useCart hook is used but not defined or imported This will likely cause errors during execution.",
        "suggestion": "Import useCart from the appropriate library or define it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-6",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 477,
        "column": 21,
        "message": "useAuth hook is used but not defined or imported",
        "description": "useAuth hook is used but not defined or imported This will likely cause errors during execution.",
        "suggestion": "Import useAuth from the appropriate library or define it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-7",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 488,
        "column": 13,
        "message": "Components Heart, ShoppingCart, Badge, UserMenu are used but not imported",
        "description": "Components Heart, ShoppingCart, Badge, UserMenu are used but not imported This will likely cause errors during execution.",
        "suggestion": "Import the missing components from their respective libraries",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-8",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 513,
        "column": 33,
        "message": "useNotifications hook is used but not defined or imported",
        "description": "useNotifications hook is used but not defined or imported This will likely cause errors during execution.",
        "suggestion": "Import useNotifications from the appropriate library or define it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx-error-9",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/navbar.mdx",
        "line": 522,
        "column": 13,
        "message": "Components Bell, Badge, Avatar are used but not imported",
        "description": "Components Bell, Badge, Avatar are used but not imported This will likely cause errors during execution.",
        "suggestion": "Import the missing components from their respective libraries",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 265,
        "column": 10,
        "message": "Screen reader text using 'sr-only' class should use proper visually hidden styles",
        "description": "Screen reader text using 'sr-only' class should use proper visually hidden styles This code works but could be improved for better maintainability.",
        "suggestion": "Use proper visually hidden CSS class or implement screen reader only text with correct styles",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <span className=\"visually-hidden\">Loading user profile</span>",
          "description": "Use proper visually hidden CSS class or implement screen reader only text with correct styles",
          "content": "  <span className=\"visually-hidden\">Loading user profile</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 270,
        "column": 1,
        "message": "Missing proper semantic structure for loading states - should use role='status' for live regions",
        "description": "Missing proper semantic structure for loading states - should use role='status' for live regions This code works but could be improved for better maintainability.",
        "suggestion": "Add role='status' to loading containers for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<div aria-live=\"polite\" role=\"status\">\n  <GlassSpinner aria-label=\"Loading user profile\" />\n  <span>Loading user profile...</span>\n</div>",
          "description": "Add role='status' to loading containers for better screen reader support",
          "content": "<div aria-live=\"polite\" role=\"status\">\n  <GlassSpinner aria-label=\"Loading user profile\" />\n  <span>Loading user profile...</span>\n</div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 295,
        "column": 25,
        "message": "Error handling component should have proper ARIA attributes",
        "description": "Error handling component should have proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "ErrorMessage component should include role='alert' and aria-live='assertive'",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 68,
        "column": 5,
        "message": "setTimeout in promise could cause memory leaks if component unmounts",
        "description": "setTimeout in promise could cause memory leaks if component unmounts This implementation could impact application performance.",
        "suggestion": "Use cleanup function in useEffect to clear timeout on component unmount",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleClick = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise((resolve) => {\n        const timeout = setTimeout(resolve, 2000);\n        // Cleanup would be handled by the calling component's useEffect\n      });\n    } finally {\n      setLoading(false);\n    }\n  };",
          "description": "Use cleanup function in useEffect to clear timeout on component unmount",
          "content": "  const handleClick = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise((resolve) => {\n        const timeout = setTimeout(resolve, 2000);\n        // Cleanup would be handled by the calling component's useEffect\n      });\n    } finally {\n      setLoading(false);\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 85,
        "column": 5,
        "message": "Fixed positioned overlay should have focus management",
        "description": "Fixed positioned overlay should have focus management This code works but could be improved for better maintainability.",
        "suggestion": "Add focus trap and focus management for full-page overlays",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-spinner.mdx",
        "line": 85,
        "column": 5,
        "message": "Loading overlay should prevent interaction with background content",
        "description": "Loading overlay should prevent interaction with background content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to background content when overlay is active",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 331,
        "column": 11,
        "message": "Missing alt text for decorative brand logo image",
        "description": "Missing alt text for decorative brand logo image This code works but could be improved for better maintainability.",
        "suggestion": "Add alt attribute with empty string for decorative image or descriptive text if meaningful",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"h-8 w-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg mr-3\" role=\"img\" aria-label=\"LiqUIdify logo\"></div>",
          "description": "Add alt attribute with empty string for decorative image or descriptive text if meaningful",
          "content": "          <div className=\"h-8 w-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg mr-3\" role=\"img\" aria-label=\"LiqUIdify logo\"></div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 368,
        "column": 11,
        "message": "Button without accessible name or aria-label",
        "description": "Button without accessible name or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name for icon-only button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Open mobile menu\">\n            <Menu className=\"h-5 w-5\" />\n          </GlassButton>",
          "description": "Add aria-label to provide accessible name for icon-only button",
          "content": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Open mobile menu\">\n            <Menu className=\"h-5 w-5\" />\n          </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 405,
        "column": 11,
        "message": "Icon-only buttons lack accessible labels",
        "description": "Icon-only buttons lack accessible labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to icon-only buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"View notifications\">\n            <Bell className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"User profile\">\n            <User className=\"h-4 w-4\" />\n          </GlassButton>",
          "description": "Add aria-label attributes to icon-only buttons",
          "content": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"View notifications\">\n            <Bell className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"User profile\">\n            <User className=\"h-4 w-4\" />\n          </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 458,
        "column": 11,
        "message": "Icon-only buttons in e-commerce navigation lack accessible labels",
        "description": "Icon-only buttons in e-commerce navigation lack accessible labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to provide context for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"View wishlist\">\n            <Heart className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" className=\"relative\" aria-label=\"Shopping cart, 3 items\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            <GlassBadge\n              variant=\"primary\"\n              size=\"sm\"\n              className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full flex items-center justify-center text-xs\"\n              aria-hidden=\"true\"\n            >\n              3\n            </GlassBadge>\n          </GlassButton>",
          "description": "Add aria-label attributes to provide context for screen readers",
          "content": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"View wishlist\">\n            <Heart className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" className=\"relative\" aria-label=\"Shopping cart, 3 items\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            <GlassBadge\n              variant=\"primary\"\n              size=\"sm\"\n              className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full flex items-center justify-center text-xs\"\n              aria-hidden=\"true\"\n            >\n              3\n            </GlassBadge>\n          </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 502,
        "column": 11,
        "message": "Social media icon buttons lack accessible labels",
        "description": "Social media icon buttons lack accessible labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to identify social media platforms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"GitHub profile\">\n            <Github className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"LinkedIn profile\">\n            <Linkedin className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Twitter profile\">\n            <Twitter className=\"h-4 w-4\" />\n          </GlassButton>",
          "description": "Add aria-label attributes to identify social media platforms",
          "content": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"GitHub profile\">\n            <Github className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"LinkedIn profile\">\n            <Linkedin className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Twitter profile\">\n            <Twitter className=\"h-4 w-4\" />\n          </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx-structure-5",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-navigation.mdx",
        "line": 1,
        "column": 1,
        "message": "Inconsistent import organization - missing imports for icons used in examples",
        "description": "Inconsistent import organization - missing imports for icons used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit import statements for all icons used in the documentation examples",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx",
        "line": 113,
        "column": 9,
        "message": "Context menu example uses cursor-context-menu which may not be supported in all browsers and doesn't provide clear indication to users",
        "description": "Context menu example uses cursor-context-menu which may not be supported in all browsers and doesn't provide clear indication to users This code works but could be improved for better maintainability.",
        "suggestion": "Add visual indication or alternative interaction method for context menu availability",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx",
        "line": 108,
        "column": 3,
        "message": "Context menu example doesn't handle potential errors in useContextMenu hook or provide fallback behavior",
        "description": "Context menu example doesn't handle potential errors in useContextMenu hook or provide fallback behavior This code works but could be improved for better maintainability.",
        "suggestion": "Add error boundary or try-catch blocks around context menu functionality",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx",
        "line": 443,
        "column": 11,
        "message": "Missing alt text or proper labeling for user avatar image in examples",
        "description": "Missing alt text or proper labeling for user avatar image in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add alt attribute with meaningful description for the avatar image",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <img src={user.avatar} alt={`${user.name}'s profile picture`} className=\"w-8 h-8 rounded-full\" />",
          "description": "Add alt attribute with meaningful description for the avatar image",
          "content": "          <img src={user.avatar} alt={`${user.name}'s profile picture`} className=\"w-8 h-8 rounded-full\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx",
        "line": 121,
        "column": 19,
        "message": "Inline arrow functions in JSX props can cause unnecessary re-renders",
        "description": "Inline arrow functions in JSX props can cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract arrow function to a useCallback hook or class method to prevent re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Extract arrow function to a useCallback hook or class method to prevent re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-menu.mdx",
        "line": 183,
        "column": 7,
        "message": "Keyboard shortcuts shown in examples use Mac-specific symbols without alternatives for other platforms",
        "description": "Keyboard shortcuts shown in examples use Mac-specific symbols without alternatives for other platforms This code works but could be improved for better maintainability.",
        "suggestion": "Provide platform-specific keyboard shortcuts or use generic descriptions",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx",
        "line": 267,
        "column": 9,
        "message": "Missing alt text or aria-label for grid items containing interactive content",
        "description": "Missing alt text or aria-label for grid items containing interactive content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or proper semantic markup for screen readers to understand grid item purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx",
        "line": 331,
        "column": 11,
        "message": "Image without proper alt text in example",
        "description": "Image without proper alt text in example This code works but could be improved for better maintainability.",
        "suggestion": "Ensure alt text is descriptive and meaningful for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx",
        "line": 42,
        "column": 7,
        "message": "Array.from with inline function may cause unnecessary re-renders",
        "description": "Array.from with inline function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move array generation outside component or use useMemo for optimization",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const items = useMemo(() => Array.from({ length: 12 }, (_, i) => i), []);\n  \n  return (\n    <GlassGrid\n      columns={{\n        xs: 1,\n        sm: 2,\n        md: 3,\n        lg: 4,\n        xl: 6,\n      }}\n      gap={{\n        xs: \"sm\",\n        md: \"lg\",\n      }}\n    >\n      {items.map((i) => (\n        <GlassGridItem key={i}>\n          <div className=\"p-4\">Item {i + 1}</div>\n        </GlassGridItem>\n      ))}\n    </GlassGrid>\n  );",
          "description": "Move array generation outside component or use useMemo for optimization",
          "content": "  const items = useMemo(() => Array.from({ length: 12 }, (_, i) => i), []);\n  \n  return (\n    <GlassGrid\n      columns={{\n        xs: 1,\n        sm: 2,\n        md: 3,\n        lg: 4,\n        xl: 6,\n      }}\n      gap={{\n        xs: \"sm\",\n        md: \"lg\",\n      }}\n    >\n      {items.map((i) => (\n        <GlassGridItem key={i}>\n          <div className=\"p-4\">Item {i + 1}</div>\n        </GlassGridItem>\n      ))}\n    </GlassGrid>\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx",
        "line": 73,
        "column": 7,
        "message": "Array.from with inline function may cause unnecessary re-renders",
        "description": "Array.from with inline function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move array generation outside component or use useMemo for optimization",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const items = useMemo(() => Array.from({ length: 8 }, (_, i) => i), []);\n  \n  return (\n    <GlassGrid autoFit minItemWidth=\"250px\" gap=\"lg\">\n      {items.map((i) => (\n        <GlassGridItem key={i}>\n          <div className=\"p-6\">\n            <h3>Card {i + 1}</h3>\n            <p>Auto-fitting grid item content</p>\n          </div>\n        </GlassGridItem>\n      ))}\n    </GlassGrid>\n  );",
          "description": "Move array generation outside component or use useMemo for optimization",
          "content": "  const items = useMemo(() => Array.from({ length: 8 }, (_, i) => i), []);\n  \n  return (\n    <GlassGrid autoFit minItemWidth=\"250px\" gap=\"lg\">\n      {items.map((i) => (\n        <GlassGridItem key={i}>\n          <div className=\"p-6\">\n            <h3>Card {i + 1}</h3>\n            <p>Auto-fitting grid item content</p>\n          </div>\n        </GlassGridItem>\n      ))}\n    </GlassGrid>\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-grid.mdx",
        "line": 135,
        "column": 15,
        "message": "Inline styles should be avoided in favor of CSS classes",
        "description": "Inline styles should be avoided in favor of CSS classes This violates code style conventions and may reduce readability.",
        "suggestion": "Use CSS classes or CSS-in-JS solutions instead of inline styles",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className={`p-4 h-${item.height}`}>",
          "description": "Use CSS classes or CSS-in-JS solutions instead of inline styles",
          "content": "          <div className={`p-4 h-${item.height}`}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 225,
        "column": 10,
        "message": "Link elements lack accessible text or aria-label for screen readers",
        "description": "Link elements lack accessible text or aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or sr-only text to describe the link purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"Go to documentation\"\n          >\n            Documentation\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"View components\"\n          >\n            Components\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"Browse examples\"\n          >\n            Examples\n          </a>",
          "description": "Add aria-label or sr-only text to describe the link purpose",
          "content": "          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"Go to documentation\"\n          >\n            Documentation\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"View components\"\n          >\n            Components\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-gray-600 hover:text-white transition-colors\"\n            aria-label=\"Browse examples\"\n          >\n            Examples\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 245,
        "column": 10,
        "message": "Social media buttons with only icons need accessible labels",
        "description": "Social media buttons with only icons need accessible labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe each social media platform",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Visit our GitHub repository\">\n            <Github className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Follow us on Twitter\">\n            <Twitter className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Connect on LinkedIn\">\n            <Linkedin className=\"h-4 w-4\" />\n          </GlassButton>",
          "description": "Add aria-label to describe each social media platform",
          "content": "          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Visit our GitHub repository\">\n            <Github className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Follow us on Twitter\">\n            <Twitter className=\"h-4 w-4\" />\n          </GlassButton>\n          <GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Connect on LinkedIn\">\n            <Linkedin className=\"h-4 w-4\" />\n          </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 566,
        "column": 6,
        "message": "Array.map() with hardcoded array could be optimized",
        "description": "Array.map() with hardcoded array could be optimized This implementation could impact application performance.",
        "suggestion": "Move static array outside component or use useMemo for better performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const SAMPLE_PROJECTS = [1, 2, 3, 4, 5, 6];\n\n// In component:\n    {SAMPLE_PROJECTS.map((item) => (",
          "description": "Move static array outside component or use useMemo for better performance",
          "content": "const SAMPLE_PROJECTS = [1, 2, 3, 4, 5, 6];\n\n// In component:\n    {SAMPLE_PROJECTS.map((item) => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 568,
        "column": 10,
        "message": "Missing alt text for decorative gradient background",
        "description": "Missing alt text for decorative gradient background This code works but could be improved for better maintainability.",
        "suggestion": "Add role='presentation' for decorative elements or alt text if meaningful",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"h-32 bg-gradient-to-br from-blue-400 to-purple-500 rounded-t-lg\" role=\"presentation\"></div>",
          "description": "Add role='presentation' for decorative elements or alt text if meaningful",
          "content": "          <div className=\"h-32 bg-gradient-to-br from-blue-400 to-purple-500 rounded-t-lg\" role=\"presentation\"></div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 568,
        "column": 107,
        "message": "Inconsistent spacing in self-closing tag",
        "description": "Inconsistent spacing in self-closing tag This violates code style conventions and may reduce readability.",
        "suggestion": "Add space before closing '/>' for consistency",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"h-32 bg-gradient-to-br from-blue-400 to-purple-500 rounded-t-lg\" />",
          "description": "Add space before closing '/>' for consistency",
          "content": "          <div className=\"h-32 bg-gradient-to-br from-blue-400 to-purple-500 rounded-t-lg\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-container.mdx",
        "line": 615,
        "column": 14,
        "message": "Decorative icon needs proper accessibility attributes",
        "description": "Decorative icon needs proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' for decorative icons or aria-label if meaningful",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <Sparkles className=\"h-12 w-12 text-white\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden='true' for decorative icons or aria-label if meaningful",
          "content": "            <Sparkles className=\"h-12 w-12 text-white\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 132,
        "column": 3,
        "message": "Interactive elements lack proper ARIA labels and roles in examples",
        "description": "Interactive elements lack proper ARIA labels and roles in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add proper ARIA attributes for interactive cards",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCard\n  variant=\"default\"\n  hover\n  className=\"p-6 max-w-sm cursor-pointer transition-transform hover:scale-105\"\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Interactive hover card\"\n>",
          "description": "Add proper ARIA attributes for interactive cards",
          "content": "<GlassCard\n  variant=\"default\"\n  hover\n  className=\"p-6 max-w-sm cursor-pointer transition-transform hover:scale-105\"\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Interactive hover card\"\n>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 155,
        "column": 3,
        "message": "Clickable cards missing keyboard event handlers",
        "description": "Clickable cards missing keyboard event handlers This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler for keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCard\n  selectable\n  selected={false}\n  variant=\"outline\"\n  className=\"p-6 cursor-pointer\"\n  onClick={() => {}}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') {} }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Selectable option A\"\n>",
          "description": "Add onKeyDown handler for keyboard accessibility",
          "content": "<GlassCard\n  selectable\n  selected={false}\n  variant=\"outline\"\n  className=\"p-6 cursor-pointer\"\n  onClick={() => {}}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') {} }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Selectable option A\"\n>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 170,
        "column": 3,
        "message": "Clickable cards missing keyboard event handlers",
        "description": "Clickable cards missing keyboard event handlers This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler for keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCard\n  selectable\n  selected={true}\n  variant=\"outline\"\n  className=\"p-6 cursor-pointer\"\n  onClick={() => {}}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') {} }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Selectable option B - currently selected\"\n  aria-pressed=\"true\"\n>",
          "description": "Add onKeyDown handler for keyboard accessibility",
          "content": "<GlassCard\n  selectable\n  selected={true}\n  variant=\"outline\"\n  className=\"p-6 cursor-pointer\"\n  onClick={() => {}}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') {} }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Selectable option B - currently selected\"\n  aria-pressed=\"true\"\n>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 191,
        "column": 3,
        "message": "Interactive card missing proper keyboard support",
        "description": "Interactive card missing proper keyboard support This code works but could be improved for better maintainability.",
        "suggestion": "Add keyboard event handler and proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCard\n  interactive\n  className=\"p-6 max-w-sm cursor-pointer\"\n  onCardClick={() => alert(\"Card clicked!\")}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') alert(\"Card clicked!\") }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Clickable card - click anywhere to activate\"\n>",
          "description": "Add keyboard event handler and proper ARIA attributes",
          "content": "<GlassCard\n  interactive\n  className=\"p-6 max-w-sm cursor-pointer\"\n  onCardClick={() => alert(\"Card clicked!\")}\n  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') alert(\"Card clicked!\") }}\n  role=\"button\"\n  tabIndex={0}\n  aria-label=\"Clickable card - click anywhere to activate\"\n>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 321,
        "column": 11,
        "message": "Missing import statements for icons used in examples",
        "description": "Missing import statements for icons used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add import statement for MapPin, Mail, Calendar icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import { MapPin, Mail, Calendar, Check, Star } from \"lucide-react\";\n",
          "description": "Add import statement for MapPin, Mail, Calendar icons",
          "content": "import { MapPin, Mail, Calendar, Check, Star } from \"lucide-react\";\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 159,
        "column": 16,
        "message": "Inline function definitions in JSX can cause unnecessary re-renders",
        "description": "Inline function definitions in JSX can cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Define event handlers outside of JSX or use useCallback",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Define event handlers outside of JSX or use useCallback",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 224,
        "column": 3,
        "message": "Inconsistent spacing in JSX element closing tags",
        "description": "Inconsistent spacing in JSX element closing tags This violates code style conventions and may reduce readability.",
        "suggestion": "Maintain consistent spacing for closing tags",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  </div>\n</ComponentPreview>",
          "description": "Maintain consistent spacing for closing tags",
          "content": "  </div>\n</ComponentPreview>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-card.mdx",
        "line": 398,
        "column": 13,
        "message": "Star rating component lacks accessibility labels",
        "description": "Star rating component lacks accessibility labels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label for star rating and individual star accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div className=\"flex\" role=\"img\" aria-label=\"5 out of 5 stars rating\">\n          {[1, 2, 3, 4, 5].map((star) => (\n            <Star\n              key={star}\n              className=\"h-4 w-4 fill-yellow-400 text-yellow-400\"\n              aria-hidden=\"true\"\n            />\n          ))}\n        </div>",
          "description": "Add aria-label for star rating and individual star accessibility",
          "content": "        <div className=\"flex\" role=\"img\" aria-label=\"5 out of 5 stars rating\">\n          {[1, 2, 3, 4, 5].map((star) => (\n            <Star\n              key={star}\n              className=\"h-4 w-4 fill-yellow-400 text-yellow-400\"\n              aria-hidden=\"true\"\n            />\n          ))}\n        </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx",
        "line": 173,
        "column": 5,
        "message": "Icon-only buttons should have aria-label for screen readers",
        "description": "Icon-only buttons should have aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attribute to describe the button's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx",
        "line": 146,
        "column": 46,
        "message": "Missing import statements for icon components used in examples",
        "description": "Missing import statements for icon components used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add import statements for all icon components used in the examples",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import { Download, ArrowRight, Settings, Search, Trash2, Plus, Upload, ChevronLeft, ChevronRight } from \"lucide-react\";",
          "description": "Add import statements for all icon components used in the examples",
          "content": "import { Download, ArrowRight, Settings, Search, Trash2, Plus, Upload, ChevronLeft, ChevronRight } from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx",
        "line": 555,
        "column": 23,
        "message": "Screen reader only class 'sr-only' is referenced but not defined",
        "description": "Screen reader only class 'sr-only' is referenced but not defined This code works but could be improved for better maintainability.",
        "suggestion": "Define the sr-only CSS class or import it from a utility library",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx-structure-3",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/glass-button.mdx",
        "line": 44,
        "column": 1,
        "message": "Missing explicit import for React components used in examples",
        "description": "Missing explicit import for React components used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add React import or ensure components are properly imported",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 130,
        "column": 15,
        "message": "File upload endpoint '/api/upload' may be vulnerable to unrestricted file uploads without server-side validation",
        "description": "File upload endpoint '/api/upload' may be vulnerable to unrestricted file uploads without server-side validation This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Ensure server-side validation of file types, sizes, and content scanning for malware",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 127,
        "column": 9,
        "message": "fetch API error handling is incomplete - network errors and non-200 status codes should be handled explicitly",
        "description": "fetch API error handling is incomplete - network errors and non-200 status codes should be handled explicitly This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit error handling for network failures and HTTP error status codes",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        const response = await fetch(\"/api/upload\", {\n          method: \"POST\",\n          body: formData,\n          // Track progress\n          onUploadProgress: (progressEvent) => {\n            const progress = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total,\n            );\n            setUploadProgress((prev) => ({\n              ...prev,\n              [file.name]: progress,\n            }));\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Upload failed with status: ${response.status}`);\n        }",
          "description": "Add explicit error handling for network failures and HTTP error status codes",
          "content": "        const response = await fetch(\"/api/upload\", {\n          method: \"POST\",\n          body: formData,\n          // Track progress\n          onUploadProgress: (progressEvent) => {\n            const progress = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total,\n            );\n            setUploadProgress((prev) => ({\n              ...prev,\n              [file.name]: progress,\n            }));\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Upload failed with status: ${response.status}`);\n        }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 143,
        "column": 7,
        "message": "Generic error handling without specific error messaging for users",
        "description": "Generic error handling without specific error messaging for users This code works but could be improved for better maintainability.",
        "suggestion": "Provide specific error messages based on error types (network, file size, etc.)",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      } catch (error) {\n        const errorMessage = error instanceof Error \n          ? error.message \n          : \"Upload failed. Please try again.\";\n        console.error(\"Upload failed:\", error);\n        // Show user-friendly error message\n        toast?.error?.(errorMessage);\n      }",
          "description": "Provide specific error messages based on error types (network, file size, etc.)",
          "content": "      } catch (error) {\n        const errorMessage = error instanceof Error \n          ? error.message \n          : \"Upload failed. Please try again.\";\n        console.error(\"Upload failed:\", error);\n        // Show user-friendly error message\n        toast?.error?.(errorMessage);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 77,
        "column": 5,
        "message": "File upload trigger lacks proper ARIA labels and descriptions for screen readers",
        "description": "File upload trigger lacks proper ARIA labels and descriptions for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label, aria-describedby, and role attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassFileUpload.Trigger \n          aria-label=\"Upload files by clicking or drag and drop\"\n          aria-describedby=\"upload-instructions\"\n          role=\"button\"\n        >\n          <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors\">\n            <ImageIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-2\">Upload Images</h3>\n            <p className=\"text-muted-foreground mb-4\" id=\"upload-instructions\">\n              Drag and drop your images here, or click to browse\n            </p>\n            <GlassButton variant=\"secondary\" disabled={uploading}>\n              Choose Files\n            </GlassButton>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              PNG, JPG, GIF, WebP up to 10MB each\n            </p>\n          </div>\n        </GlassFileUpload.Trigger>",
          "description": "Add aria-label, aria-describedby, and role attributes for better screen reader support",
          "content": "        <GlassFileUpload.Trigger \n          aria-label=\"Upload files by clicking or drag and drop\"\n          aria-describedby=\"upload-instructions\"\n          role=\"button\"\n        >\n          <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors\">\n            <ImageIcon className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-2\">Upload Images</h3>\n            <p className=\"text-muted-foreground mb-4\" id=\"upload-instructions\">\n              Drag and drop your images here, or click to browse\n            </p>\n            <GlassButton variant=\"secondary\" disabled={uploading}>\n              Choose Files\n            </GlassButton>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              PNG, JPG, GIF, WebP up to 10MB each\n            </p>\n          </div>\n        </GlassFileUpload.Trigger>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 320,
        "column": 7,
        "message": "FileReader operations and large file processing could block the main thread",
        "description": "FileReader operations and large file processing could block the main thread This implementation could impact application performance.",
        "suggestion": "Use Web Workers for large file processing or implement async file reading with progress indicators",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-memory-5",
        "type": "memory",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 320,
        "column": 7,
        "message": "File objects and preview URLs may cause memory leaks if not properly cleaned up",
        "description": "File objects and preview URLs may cause memory leaks if not properly cleaned up This code works but could be improved for better maintainability.",
        "suggestion": "Implement cleanup for FileReader and URL.createObjectURL to prevent memory leaks",
        "rule": "memory",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImage(e.target?.result as string);\n      };\n      reader.onerror = () => {\n        console.error('Failed to read file');\n        reader.abort();\n      };\n      reader.readAsDataURL(file);\n      \n      // Cleanup function should be called when component unmounts\n      // useEffect(() => {\n      //   return () => {\n      //     if (profileImage && profileImage.startsWith('blob:')) {\n      //       URL.revokeObjectURL(profileImage);\n      //     }\n      //   };\n      // }, [profileImage]);",
          "description": "Implement cleanup for FileReader and URL.createObjectURL to prevent memory leaks",
          "content": "      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImage(e.target?.result as string);\n      };\n      reader.onerror = () => {\n        console.error('Failed to read file');\n        reader.abort();\n      };\n      reader.readAsDataURL(file);\n      \n      // Cleanup function should be called when component unmounts\n      // useEffect(() => {\n      //   return () => {\n      //     if (profileImage && profileImage.startsWith('blob:')) {\n      //       URL.revokeObjectURL(profileImage);\n      //     }\n      //   };\n      // }, [profileImage]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx-error-handling-6",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/file-upload.mdx",
        "line": 320,
        "column": 7,
        "message": "Missing error handling for FileReader operations",
        "description": "Missing error handling for FileReader operations This code works but could be improved for better maintainability.",
        "suggestion": "Add error handling for FileReader operations including onerror and onabort handlers",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImage(e.target?.result as string);\n      };\n      reader.onerror = (error) => {\n        console.error('Failed to read file:', error);\n        toast?.error?.('Failed to preview image');\n        setUploading(false);\n      };\n      reader.onabort = () => {\n        console.log('File reading was aborted');\n        setUploading(false);\n      };\n      reader.readAsDataURL(file);",
          "description": "Add error handling for FileReader operations including onerror and onabort handlers",
          "content": "      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImage(e.target?.result as string);\n      };\n      reader.onerror = (error) => {\n        console.error('Failed to read file:', error);\n        toast?.error?.('Failed to preview image');\n        setUploading(false);\n      };\n      reader.onabort = () => {\n        console.log('File reading was aborted');\n        setUploading(false);\n      };\n      reader.readAsDataURL(file);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-formatting-0",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 33,
        "column": 1,
        "message": "Inconsistent indentation and formatting in code blocks",
        "description": "Inconsistent indentation and formatting in code blocks This code works but could be improved for better maintainability.",
        "suggestion": "Standardize indentation to 2 or 4 spaces consistently",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    import {\n        GlassDropdown,\n        GlassDropdownTrigger,\n        GlassDropdownContent,\n        GlassDropdownItem,\n        GlassDropdownSeparator,\n        GlassDropdownLabel\n    } from '@liquidify/components'",
          "description": "Standardize indentation to 2 or 4 spaces consistently",
          "content": "    import {\n        GlassDropdown,\n        GlassDropdownTrigger,\n        GlassDropdownContent,\n        GlassDropdownItem,\n        GlassDropdownSeparator,\n        GlassDropdownLabel\n    } from '@liquidify/components'"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 322,
        "column": 17,
        "message": "Interactive element lacks proper ARIA labeling",
        "description": "Interactive element lacks proper ARIA labeling This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby to provide accessible name for the trigger button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <button className=\"absolute top-4 right-4 opacity-50 hover:opacity-100\" aria-label=\"Open context menu\">\n                    <MoreVertical className=\"h-4 w-4\"/>\n                </button>",
          "description": "Add aria-label or aria-labelledby to provide accessible name for the trigger button",
          "content": "                <button className=\"absolute top-4 right-4 opacity-50 hover:opacity-100\" aria-label=\"Open context menu\">\n                    <MoreVertical className=\"h-4 w-4\"/>\n                </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 309,
        "column": 9,
        "message": "Decorative card content lacks proper semantic structure",
        "description": "Decorative card content lacks proper semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Use proper heading elements or landmarks for better screen reader navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard className=\"p-6 cursor-context-menu\" role=\"region\" aria-label=\"Context menu demo card\">\n            <h3>Right-click this card to see the context menu</h3>\n            <p className=\"text-sm text-gray-600 mt-2\">Context menu will appear on right-click</p>\n        </GlassCard>",
          "description": "Use proper heading elements or landmarks for better screen reader navigation",
          "content": "        <GlassCard className=\"p-6 cursor-context-menu\" role=\"region\" aria-label=\"Context menu demo card\">\n            <h3>Right-click this card to see the context menu</h3>\n            <p className=\"text-sm text-gray-600 mt-2\">Context menu will appear on right-click</p>\n        </GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 186,
        "column": 17,
        "message": "Color-only information conveyance for destructive actions",
        "description": "Color-only information conveyance for destructive actions This code works but could be improved for better maintainability.",
        "suggestion": "Add visual indicators beyond color for destructive actions",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 721,
        "column": 13,
        "message": "Inline array creation in map function may cause unnecessary re-renders",
        "description": "Inline array creation in map function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract array to a constant outside the component or use useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div className=\"space-y-2\">\n            {useMemo(() => ['John Doe', 'Jane Smith', 'Bob Johnson'], []).map((name, index) => (",
          "description": "Extract array to a constant outside the component or use useMemo",
          "content": "        <div className=\"space-y-2\">\n            {useMemo(() => ['John Doe', 'Jane Smith', 'Bob Johnson'], []).map((name, index) => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 14,
        "column": 8,
        "message": "Inconsistent string quotes usage",
        "description": "Inconsistent string quotes usage This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file (prefer single quotes)",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "title: 'Dropdown'",
          "description": "Use consistent quote style throughout the file (prefer single quotes)",
          "content": "title: 'Dropdown'"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/dropdown.mdx",
        "line": 96,
        "column": 17,
        "message": "Missing alternative text or aria-label for icon-only buttons",
        "description": "Missing alternative text or aria-label for icon-only buttons This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name for icon-only button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassButton variant=\"ghost\" aria-label=\"User menu\">\n                <User className=\"h-4 w-4\"/>\n            </GlassButton>",
          "description": "Add aria-label to provide accessible name for icon-only button",
          "content": "            <GlassButton variant=\"ghost\" aria-label=\"User menu\">\n                <User className=\"h-4 w-4\"/>\n            </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 118,
        "column": 5,
        "message": "Button elements should have accessible text or aria-label for screen readers",
        "description": "Button elements should have accessible text or aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or ensure button has descriptive text content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button\n      aria-label=\"Primary button\"\n      style={{\n        backgroundColor: liquidGlassTokens.colors.systemBlue,\n        color: liquidGlassTokens.colors.label.primary,\n        padding: `${liquidGlassTokens.spacing[2]} ${liquidGlassTokens.spacing[4]}`,\n        borderRadius: liquidGlassTokens.borderRadius.md,\n        border: \"none\",\n        cursor: \"pointer\",\n      }}\n    >",
          "description": "Add aria-label or ensure button has descriptive text content",
          "content": "    <button\n      aria-label=\"Primary button\"\n      style={{\n        backgroundColor: liquidGlassTokens.colors.systemBlue,\n        color: liquidGlassTokens.colors.label.primary,\n        padding: `${liquidGlassTokens.spacing[2]} ${liquidGlassTokens.spacing[4]}`,\n        borderRadius: liquidGlassTokens.borderRadius.md,\n        border: \"none\",\n        cursor: \"pointer\",\n      }}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 132,
        "column": 31,
        "message": "React component parameters not properly typed",
        "description": "React component parameters not properly typed This will likely cause errors during execution.",
        "suggestion": "Add proper TypeScript interface or PropTypes for component props",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const CustomButton = ({ size = \"md\", variant = \"primary\", children }: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n}) => {",
          "description": "Add proper TypeScript interface or PropTypes for component props",
          "content": "const CustomButton = ({ size = \"md\", variant = \"primary\", children }: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n}) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 151,
        "column": 27,
        "message": "React component parameters not properly typed",
        "description": "React component parameters not properly typed This will likely cause errors during execution.",
        "suggestion": "Add proper TypeScript interface or PropTypes for component props",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const CustomCard = ({ size = \"md\", variant = \"default\", children }: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n}) => {",
          "description": "Add proper TypeScript interface or PropTypes for component props",
          "content": "const CustomCard = ({ size = \"md\", variant = \"default\", children }: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n}) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 516,
        "column": 7,
        "message": "Theme switching button lacks proper accessibility attributes",
        "description": "Theme switching button lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and aria-pressed attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <button \n        onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n        aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n        aria-pressed={theme === \"dark\"}\n      >",
          "description": "Add aria-label and aria-pressed attributes for better screen reader support",
          "content": "      <button \n        onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n        aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n        aria-pressed={theme === \"dark\"}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-error-4",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 809,
        "column": 31,
        "message": "React component parameters not properly typed",
        "description": "React component parameters not properly typed This will likely cause errors during execution.",
        "suggestion": "Add proper TypeScript interface for component props",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const CustomButton = ({\n  size = \"md\",\n  variant = \"primary\",\n  children,\n  ...props\n}: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n  [key: string]: any;\n}) => {",
          "description": "Add proper TypeScript interface for component props",
          "content": "const CustomButton = ({\n  size = \"md\",\n  variant = \"primary\",\n  children,\n  ...props\n}: {\n  size?: string;\n  variant?: string;\n  children: React.ReactNode;\n  [key: string]: any;\n}) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 599,
        "column": 5,
        "message": "Object.entries() in forEach loop may cause performance issues with large token sets",
        "description": "Object.entries() in forEach loop may cause performance issues with large token sets This implementation could impact application performance.",
        "suggestion": "Consider using for...in loop or caching the entries for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 893,
        "column": 5,
        "message": "DOM manipulation in useEffect without cleanup could cause memory leaks",
        "description": "DOM manipulation in useEffect without cleanup could cause memory leaks This implementation could impact application performance.",
        "suggestion": "Add cleanup function to reset CSS properties when component unmounts",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    // Update tokens based on breakpoint\n    const responsiveTokens = {\n      ...liquidGlassTokens,\n      spacing: {\n        ...liquidGlassTokens.spacing,\n        // Smaller spacing on mobile\n        ...(breakpoint === \"sm\" && {\n          [4]: \"12px\",\n          [6]: \"18px\",\n          [8]: \"24px\",\n        }),\n        // Larger spacing on desktop\n        ...(breakpoint === \"lg\" && {\n          [4]: \"20px\",\n          [6]: \"28px\",\n          [8]: \"36px\",\n        }),\n      },\n    };\n\n    const cssVars = generateCSSCustomProperties(responsiveTokens);\n    const root = document.documentElement;\n    const originalValues = new Map();\n\n    Object.entries(cssVars).forEach(([key, value]) => {\n      originalValues.set(key, root.style.getPropertyValue(key));\n      root.style.setProperty(key, value);\n    });\n\n    return () => {\n      // Cleanup: restore original values\n      originalValues.forEach((originalValue, key) => {\n        if (originalValue) {\n          root.style.setProperty(key, originalValue);\n        } else {\n          root.style.removeProperty(key);\n        }\n      });\n    };\n  }, [breakpoint]);",
          "description": "Add cleanup function to reset CSS properties when component unmounts",
          "content": "  useEffect(() => {\n    // Update tokens based on breakpoint\n    const responsiveTokens = {\n      ...liquidGlassTokens,\n      spacing: {\n        ...liquidGlassTokens.spacing,\n        // Smaller spacing on mobile\n        ...(breakpoint === \"sm\" && {\n          [4]: \"12px\",\n          [6]: \"18px\",\n          [8]: \"24px\",\n        }),\n        // Larger spacing on desktop\n        ...(breakpoint === \"lg\" && {\n          [4]: \"20px\",\n          [6]: \"28px\",\n          [8]: \"36px\",\n        }),\n      },\n    };\n\n    const cssVars = generateCSSCustomProperties(responsiveTokens);\n    const root = document.documentElement;\n    const originalValues = new Map();\n\n    Object.entries(cssVars).forEach(([key, value]) => {\n      originalValues.set(key, root.style.getPropertyValue(key));\n      root.style.setProperty(key, value);\n    });\n\n    return () => {\n      // Cleanup: restore original values\n      originalValues.forEach((originalValue, key) => {\n        if (originalValue) {\n          root.style.setProperty(key, originalValue);\n        } else {\n          root.style.removeProperty(key);\n        }\n      });\n    };\n  }, [breakpoint]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx-error-7",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/design-tokens-examples.mdx",
        "line": 1,
        "column": 1,
        "message": "Missing import statements for React hooks and components",
        "description": "Missing import statements for React hooks and components This will likely cause errors during execution.",
        "suggestion": "Add proper import statements at the beginning of the file",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import React, { useState, useEffect } from 'react';\n",
          "description": "Add proper import statements at the beginning of the file",
          "content": "import React, { useState, useEffect } from 'react';\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx",
        "line": 25,
        "column": 5,
        "message": "Missing proper semantic structure - using generic button elements instead of proper button components in preview",
        "description": "Missing proper semantic structure - using generic button elements instead of proper button components in preview This code works but could be improved for better maintainability.",
        "suggestion": "Use the actual GlassButton component in the preview instead of generic HTML button elements to ensure consistency with the documented component",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <div className=\"flex gap-4 items-center\">\n    <GlassButton>\n      Click me\n    </GlassButton>\n    <GlassButton variant=\"primary\">\n      Primary Button\n    </GlassButton>\n    <GlassButton size=\"lg\" variant=\"secondary\">\n      Large Button\n    </GlassButton>\n  </div>",
          "description": "Use the actual GlassButton component in the preview instead of generic HTML button elements to ensure consistency with the documented component",
          "content": "  <div className=\"flex gap-4 items-center\">\n    <GlassButton>\n      Click me\n    </GlassButton>\n    <GlassButton variant=\"primary\">\n      Primary Button\n    </GlassButton>\n    <GlassButton size=\"lg\" variant=\"secondary\">\n      Large Button\n    </GlassButton>\n  </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx",
        "line": 219,
        "column": 11,
        "message": "Missing error handling for onClick event in interactive playground example",
        "description": "Missing error handling for onClick event in interactive playground example This code works but could be improved for better maintainability.",
        "suggestion": "Add error boundary or try-catch block around state updates to handle potential errors gracefully",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          onClick={() => {\n            try {\n              setCount(count + 1);\n            } catch (error) {\n              console.error('Error updating count:', error);\n            }\n          }}",
          "description": "Add error boundary or try-catch block around state updates to handle potential errors gracefully",
          "content": "          onClick={() => {\n            try {\n              setCount(count + 1);\n            } catch (error) {\n              console.error('Error updating count:', error);\n            }\n          }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx",
        "line": 175,
        "column": 1,
        "message": "Icon button example missing proper accessibility attributes",
        "description": "Icon button example missing proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby to icon-only buttons for screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Like this item\">\n  <Icon name=\"heart\" aria-hidden=\"true\" />\n</GlassButton>",
          "description": "Add aria-label or aria-describedby to icon-only buttons for screen reader users",
          "content": "<GlassButton variant=\"ghost\" size=\"sm\" aria-label=\"Like this item\">\n  <Icon name=\"heart\" aria-hidden=\"true\" />\n</GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx-convention-3",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx",
        "line": 120,
        "column": 67,
        "message": "Inconsistent prop documentation - 'tertiary' and 'apple' variants mentioned in API but not demonstrated in examples",
        "description": "Inconsistent prop documentation - 'tertiary' and 'apple' variants mentioned in API but not demonstrated in examples This code works but could be improved for better maintainability.",
        "suggestion": "Either add examples for 'tertiary' and 'apple' variants or remove them from the API documentation",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/button.mdx",
        "line": 185,
        "column": 1,
        "message": "Missing role and aria attributes in accordion structure",
        "description": "Missing role and aria attributes in accordion structure This code works but could be improved for better maintainability.",
        "suggestion": "Ensure AccordionGroup and Accordion components have proper ARIA attributes for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx",
        "line": 83,
        "column": 13,
        "message": "Missing React import for Fragment usage in dynamic breadcrumbs example",
        "description": "Missing React import for Fragment usage in dynamic breadcrumbs example This code works but could be improved for better maintainability.",
        "suggestion": "Add React import or use <> shorthand syntax for fragments",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {",
          "description": "Add React import or use <> shorthand syntax for fragments",
          "content": "import React from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx",
        "line": 60,
        "column": 1,
        "message": "Missing asChild prop documentation in API table despite being used in router integration examples",
        "description": "Missing asChild prop documentation in API table despite being used in router integration examples This code works but could be improved for better maintainability.",
        "suggestion": "Add asChild prop to GlassBreadcrumbs.Item API documentation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop       | Type         | Default | Description            |\n| ---------- | ------------ | ------- | ---------------------- |\n| `href`     | `string`     | -       | Link URL               |\n| `onClick`  | `() => void` | -       | Click handler          |\n| `current`  | `boolean`    | `false` | Current page indicator |\n| `icon`     | `ReactNode`  | -       | Item icon              |\n| `disabled` | `boolean`    | `false` | Disable item           |\n| `asChild`  | `boolean`    | `false` | Render as child element |",
          "description": "Add asChild prop to GlassBreadcrumbs.Item API documentation",
          "content": "| Prop       | Type         | Default | Description            |\n| ---------- | ------------ | ------- | ---------------------- |\n| `href`     | `string`     | -       | Link URL               |\n| `onClick`  | `() => void` | -       | Click handler          |\n| `current`  | `boolean`    | `false` | Current page indicator |\n| `icon`     | `ReactNode`  | -       | Item icon              |\n| `disabled` | `boolean`    | `false` | Disable item           |\n| `asChild`  | `boolean`    | `false` | Render as child element |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx",
        "line": 74,
        "column": 3,
        "message": "Dynamic breadcrumbs example recreates path segments array on every render",
        "description": "Dynamic breadcrumbs example recreates path segments array on every render This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize path segments calculation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useMemo } from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {\n  const pathSegments = useMemo(() => path.split(\"/\").filter(Boolean), [path]);",
          "description": "Use useMemo to memoize path segments calculation",
          "content": "import React, { useMemo } from 'react';\n\nfunction DynamicBreadcrumbs({ path }: { path: string }) {\n  const pathSegments = useMemo(() => path.split(\"/\").filter(Boolean), [path]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/breadcrumbs.mdx",
        "line": 2,
        "column": 9,
        "message": "Inconsistent component name casing in title (GlassBreadcrumbs vs LiqUIdify brand casing)",
        "description": "Inconsistent component name casing in title (GlassBreadcrumbs vs LiqUIdify brand casing) This code works but could be improved for better maintainability.",
        "suggestion": "Consider consistent brand casing or clarify naming convention",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 135,
        "column": 26,
        "message": "Missing import statement for useState hook used in examples",
        "description": "Missing import statement for useState hook used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook at the top of the example",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction AnnouncementBanner() {\n  const [isVisible, setIsVisible] = useState(true);",
          "description": "Add React import with useState hook at the top of the example",
          "content": "import React, { useState } from 'react';\n\nfunction AnnouncementBanner() {\n  const [isVisible, setIsVisible] = useState(true);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 168,
        "column": 1,
        "message": "Missing import statement for useState hook in StatusBanner example",
        "description": "Missing import statement for useState hook in StatusBanner example This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React from 'react';\n\nfunction StatusBanner({",
          "description": "Add React import with useState hook",
          "content": "import React from 'react';\n\nfunction StatusBanner({"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 217,
        "column": 26,
        "message": "Missing import statement for useState hook in CookieConsentBanner example",
        "description": "Missing import statement for useState hook in CookieConsentBanner example This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from 'react';\n\nfunction CookieConsentBanner() {\n  const [isVisible, setIsVisible] = useState(true);",
          "description": "Add React import with useState hook",
          "content": "import React, { useState } from 'react';\n\nfunction CookieConsentBanner() {\n  const [isVisible, setIsVisible] = useState(true);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 258,
        "column": 18,
        "message": "Accessibility section mentions role='banner' and role='alert' but doesn't specify when each should be used",
        "description": "Accessibility section mentions role='banner' and role='alert' but doesn't specify when each should be used This code works but could be improved for better maintainability.",
        "suggestion": "Specify that role='alert' should be used for urgent messages (error/warning variants) and role='banner' for informational content",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 259,
        "column": 18,
        "message": "Missing aria-live attribute specification for different banner variants",
        "description": "Missing aria-live attribute specification for different banner variants This code works but could be improved for better maintainability.",
        "suggestion": "Specify aria-live='polite' for info/success variants and aria-live='assertive' for warning/error variants",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx-convention-5",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/banner.mdx",
        "line": 82,
        "column": 1,
        "message": "Inconsistent prop documentation - some components missing common props like children",
        "description": "Inconsistent prop documentation - some components missing common props like children This code works but could be improved for better maintainability.",
        "suggestion": "Add children prop documentation for container components and ensure consistency across all component APIs",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 151,
        "column": 13,
        "message": "Interactive button element inside Badge component lacks proper ARIA attributes for assistive technologies",
        "description": "Interactive button element inside Badge component lacks proper ARIA attributes for assistive technologies This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the action and role='button' for clarity",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button\n              onClick={() => removeTag(tag)}\n              className=\"ml-1 hover:bg-red-100 rounded-full p-0.5\"\n              aria-label={`Remove ${tag} tag`}\n              role=\"button\"\n            >",
          "description": "Add aria-label to describe the action and role='button' for clarity",
          "content": "            <button\n              onClick={() => removeTag(tag)}\n              className=\"ml-1 hover:bg-red-100 rounded-full p-0.5\"\n              aria-label={`Remove ${tag} tag`}\n              role=\"button\"\n            >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 355,
        "column": 9,
        "message": "Missing alt text for product image could impact screen readers",
        "description": "Missing alt text for product image could impact screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Ensure alt text is descriptive and meaningful",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 144,
        "column": 25,
        "message": "Array.filter creates a new array on each render in removeTag function",
        "description": "Array.filter creates a new array on each render in removeTag function This implementation could impact application performance.",
        "suggestion": "Consider using useCallback to memoize the removeTag function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Badge } from \"@liquidify/react\";\nimport { X } from \"lucide-react\";\nimport { useState, useCallback } from \"react\";\n\nfunction InteractiveBadges() {\n  const [tags, setTags] = useState([\"React\", \"TypeScript\", \"Tailwind\"]);\n\n  const removeTag = useCallback((tagToRemove: string) => {\n    setTags(prevTags => prevTags.filter((tag) => tag !== tagToRemove));\n  }, []);",
          "description": "Consider using useCallback to memoize the removeTag function",
          "content": "import { Badge } from \"@liquidify/react\";\nimport { X } from \"lucide-react\";\nimport { useState, useCallback } from \"react\";\n\nfunction InteractiveBadges() {\n  const [tags, setTags] = useState([\"React\", \"TypeScript\", \"Tailwind\"]);\n\n  const removeTag = useCallback((tagToRemove: string) => {\n    setTags(prevTags => prevTags.filter((tag) => tag !== tagToRemove));\n  }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 183,
        "column": 9,
        "message": "Status indicators using only color to convey information may not be accessible to colorblind users",
        "description": "Status indicators using only color to convey information may not be accessible to colorblind users This code works but could be improved for better maintainability.",
        "suggestion": "Add text labels or icons alongside color indicators",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 446,
        "column": 27,
        "message": "Inline function in getStatusColor could be extracted to avoid recreation on each render",
        "description": "Inline function in getStatusColor could be extracted to avoid recreation on each render This implementation could impact application performance.",
        "suggestion": "Move getStatusColor function outside component or memoize it",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const getStatusColor = (status: string) => {\n  switch (status) {\n    case \"online\":\n      return \"success\";\n    case \"away\":\n      return \"warning\";\n    case \"busy\":\n      return \"danger\";\n    default:\n      return \"secondary\";\n  }\n};\n\nfunction UserStatusList({ users }: { users: User[] }) {",
          "description": "Move getStatusColor function outside component or memoize it",
          "content": "const getStatusColor = (status: string) => {\n  switch (status) {\n    case \"online\":\n      return \"success\";\n    case \"away\":\n      return \"warning\";\n    case \"busy\":\n      return \"danger\";\n    default:\n      return \"secondary\";\n  }\n};\n\nfunction UserStatusList({ users }: { users: User[] }) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/badge.mdx",
        "line": 82,
        "column": 9,
        "message": "Badge examples lack proper semantic structure for notification counts",
        "description": "Badge examples lack proper semantic structure for notification counts This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and role attributes for screen reader context",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Badge\n          content=\"5\"\n          color=\"danger\"\n          size=\"sm\"\n          className=\"absolute -top-1 -right-1\"\n          aria-label=\"5 notifications\"\n          role=\"status\"\n        />",
          "description": "Add aria-label and role attributes for screen reader context",
          "content": "        <Badge\n          content=\"5\"\n          color=\"danger\"\n          size=\"sm\"\n          className=\"absolute -top-1 -right-1\"\n          aria-label=\"5 notifications\"\n          role=\"status\"\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx",
        "line": 183,
        "column": 9,
        "message": "Missing import statement for useState hook",
        "description": "Missing import statement for useState hook This code works but could be improved for better maintainability.",
        "suggestion": "Add import { useState } from 'react' at the top of the component",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Avatar } from \"@liquidify/react\";\nimport { useState } from \"react\";\n\nfunction LoadingAvatar() {\n  const [loading, setLoading] = useState(true);",
          "description": "Add import { useState } from 'react' at the top of the component",
          "content": "import { Avatar } from \"@liquidify/react\";\nimport { useState } from \"react\";\n\nfunction LoadingAvatar() {\n  const [loading, setLoading] = useState(true);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx",
        "line": 146,
        "column": 9,
        "message": "Missing accessibility attributes for interactive avatar",
        "description": "Missing accessibility attributes for interactive avatar This code works but could be improved for better maintainability.",
        "suggestion": "Add role, tabIndex, and aria-haspopup attributes for keyboard navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Avatar\n          src={user.avatar}\n          name={user.name}\n          className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n          role=\"button\"\n          tabIndex={0}\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        />",
          "description": "Add role, tabIndex, and aria-haspopup attributes for keyboard navigation",
          "content": "        <Avatar\n          src={user.avatar}\n          name={user.name}\n          className=\"cursor-pointer hover:opacity-80 transition-opacity\"\n          role=\"button\"\n          tabIndex={0}\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx",
        "line": 116,
        "column": 7,
        "message": "Missing key prop optimization in map function",
        "description": "Missing key prop optimization in map function This implementation could impact application performance.",
        "suggestion": "Use unique identifier instead of array index for better React performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx",
        "line": 644,
        "column": 11,
        "message": "Missing role and keyboard event handlers for interactive elements",
        "description": "Missing role and keyboard event handlers for interactive elements This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler and proper ARIA attributes for keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <Avatar\n            src={member.avatar}\n            name={member.name}\n            size=\"sm\"\n            status={member.isOnline ? \"online\" : \"offline\"}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => e.key === 'Enter' && handleMemberClick?.(member)}\n          />",
          "description": "Add onKeyDown handler and proper ARIA attributes for keyboard accessibility",
          "content": "          <Avatar\n            src={member.avatar}\n            name={member.name}\n            size=\"sm\"\n            status={member.isOnline ? \"online\" : \"offline\"}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => e.key === 'Enter' && handleMemberClick?.(member)}\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx-naming-4",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/avatar.mdx",
        "line": 354,
        "column": 3,
        "message": "Inconsistent naming convention for CSS variables",
        "description": "Inconsistent naming convention for CSS variables This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent kebab-case naming for all CSS custom properties",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": ".avatar {\n  --avatar-size: 2.5rem;\n  --avatar-border-radius: 50%;\n  --avatar-background-color: var(--liquid-primary);\n  --avatar-text-color: white;\n  --avatar-border: 2px solid transparent;\n}",
          "description": "Use consistent kebab-case naming for all CSS custom properties",
          "content": ".avatar {\n  --avatar-size: 2.5rem;\n  --avatar-border-radius: 50%;\n  --avatar-background-color: var(--liquid-primary);\n  --avatar-text-color: white;\n  --avatar-border: 2px solid transparent;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 77,
        "column": 1,
        "message": "Missing import statements for React hooks and components used in examples",
        "description": "Missing import statements for React hooks and components used in examples This code works but could be improved for better maintainability.",
        "suggestion": "Add proper import statements for React hooks and components used in the examples",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "import React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { InfoIcon, AlertCircleIcon, CheckCircleIcon, AlertTriangleIcon, XCircleIcon, TagIcon, SparklesIcon, Spinner } from 'lucide-react';\nimport { GlassInput, GlassButton } from '@liquidify/components';\n\n",
          "description": "Add proper import statements for React hooks and components used in the examples",
          "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { InfoIcon, AlertCircleIcon, CheckCircleIcon, AlertTriangleIcon, XCircleIcon, TagIcon, SparklesIcon, Spinner } from 'lucide-react';\nimport { GlassInput, GlassButton } from '@liquidify/components';\n\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 154,
        "column": 9,
        "message": "Missing ARIA attributes for dismissible alerts - should include aria-live and aria-describedby",
        "description": "Missing ARIA attributes for dismissible alerts - should include aria-live and aria-describedby This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' for non-critical alerts and aria-live='assertive' for critical alerts, plus aria-describedby to link title and description",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 268,
        "column": 79,
        "message": "useCallback dependency array missing in debounced function",
        "description": "useCallback dependency array missing in debounced function This implementation could impact application performance.",
        "suggestion": "Include checkEmailAvailability in the dependency array or use useCallback for checkEmailAvailability as well",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const checkEmailAvailability = useCallback(async (email: string) => {\n    if (!email) {\n      setEmailStatus('idle');\n      return;\n    }\n\n    setEmailStatus('checking');\n\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Simulate random result\n    const isAvailable = Math.random() > 0.5;\n    setEmailStatus(isAvailable ? 'available' : 'taken');\n  }, []);\n\n  const debouncedCheck = useCallback(debounce(checkEmailAvailability, 500), [checkEmailAvailability]);",
          "description": "Include checkEmailAvailability in the dependency array or use useCallback for checkEmailAvailability as well",
          "content": "  const checkEmailAvailability = useCallback(async (email: string) => {\n    if (!email) {\n      setEmailStatus('idle');\n      return;\n    }\n\n    setEmailStatus('checking');\n\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Simulate random result\n    const isAvailable = Math.random() > 0.5;\n    setEmailStatus(isAvailable ? 'available' : 'taken');\n  }, []);\n\n  const debouncedCheck = useCallback(debounce(checkEmailAvailability, 500), [checkEmailAvailability]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-memory-leak-3",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 268,
        "column": 32,
        "message": "Potential memory leak - debounced function not cleaned up on unmount",
        "description": "Potential memory leak - debounced function not cleaned up on unmount This code works but could be improved for better maintainability.",
        "suggestion": "Cancel the debounced function on component unmount to prevent memory leaks",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "\n  useEffect(() => {\n    return () => {\n      debouncedCheck.cancel();\n    };\n  }, [debouncedCheck]);",
          "description": "Cancel the debounced function on component unmount to prevent memory leaks",
          "content": "\n  useEffect(() => {\n    return () => {\n      debouncedCheck.cancel();\n    };\n  }, [debouncedCheck]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 257,
        "column": 5,
        "message": "Missing error handling in async email availability check",
        "description": "Missing error handling in async email availability check This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential API errors gracefully",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    setEmailStatus('checking');\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Simulate random result\n      const isAvailable = Math.random() > 0.5;\n      setEmailStatus(isAvailable ? 'available' : 'taken');\n    } catch (error) {\n      console.error('Error checking email availability:', error);\n      setEmailStatus('idle');\n    }",
          "description": "Add try-catch block to handle potential API errors gracefully",
          "content": "    setEmailStatus('checking');\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Simulate random result\n      const isAvailable = Math.random() > 0.5;\n      setEmailStatus(isAvailable ? 'available' : 'taken');\n    } catch (error) {\n      console.error('Error checking email availability:', error);\n      setEmailStatus('idle');\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/alert.mdx",
        "line": 117,
        "column": 13,
        "message": "Alert examples missing proper semantic HTML structure for screen readers",
        "description": "Alert examples missing proper semantic HTML structure for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Use semantic HTML elements and proper ARIA labels for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx",
        "line": 312,
        "column": 3,
        "message": "HTML entity encoding issue: '&lt;' should be '<' in accessibility score description",
        "description": "HTML entity encoding issue: '&lt;' should be '<' in accessibility score description This code works but could be improved for better maintainability.",
        "suggestion": "Use proper HTML entity or plain text for less-than symbol",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- **<70%**: Poor accessibility (build fails)",
          "description": "Use proper HTML entity or plain text for less-than symbol",
          "content": "- **<70%**: Poor accessibility (build fails)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx",
        "line": 1,
        "column": 1,
        "message": "Inconsistent code block language specification - some blocks use 'tsx', others use 'bash' or no language",
        "description": "Inconsistent code block language specification - some blocks use 'tsx', others use 'bash' or no language This code works but could be improved for better maintainability.",
        "suggestion": "Consistently specify language for all code blocks to improve syntax highlighting and accessibility",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/accessibility-testing.mdx",
        "line": 147,
        "column": 1,
        "message": "Missing alt text for accessibility badge image",
        "description": "Missing alt text for accessibility badge image This code works but could be improved for better maintainability.",
        "suggestion": "Add meaningful alt text describing the accessibility status",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "![Accessibility Badge showing WCAG 2.1 AA compliance status](./badges/GlassButton-accessibility.svg)",
          "description": "Add meaningful alt text describing the accessibility status",
          "content": "![Accessibility Badge showing WCAG 2.1 AA compliance status](./badges/GlassButton-accessibility.svg)"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 1,
        "column": 1,
        "message": "Missing semantic HTML structure and accessibility considerations in documentation",
        "description": "Missing semantic HTML structure and accessibility considerations in documentation This code works but could be improved for better maintainability.",
        "suggestion": "Add accessibility guidelines and ARIA examples for glass effect components",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 286,
        "column": 1,
        "message": "Missing cleanup for event listeners in throttled scroll example",
        "description": "Missing cleanup for event listeners in throttled scroll example This implementation could impact application performance.",
        "suggestion": "Add proper cleanup for event listeners to prevent memory leaks",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const throttledScroll = performanceUtils.throttle(handleScroll, 16);\nwindow.addEventListener(\"scroll\", throttledScroll, { passive: true });\n// Remember to clean up:\n// window.removeEventListener(\"scroll\", throttledScroll);",
          "description": "Add proper cleanup for event listeners to prevent memory leaks",
          "content": "const throttledScroll = performanceUtils.throttle(handleScroll, 16);\nwindow.addEventListener(\"scroll\", throttledScroll, { passive: true });\n// Remember to clean up:\n// window.removeEventListener(\"scroll\", throttledScroll);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-memory-leak-2",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 28,
        "column": 3,
        "message": "Missing cleanup for performance monitoring in useEffect examples",
        "description": "Missing cleanup for performance monitoring in useEffect examples This code works but could be improved for better maintainability.",
        "suggestion": "Ensure proper cleanup of monitoring resources to prevent memory leaks",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    startMonitoring();\n    return () => {\n      stopMonitoring();\n      // Clean up any observers or timers\n    };\n  }, [startMonitoring, stopMonitoring]);",
          "description": "Ensure proper cleanup of monitoring resources to prevent memory leaks",
          "content": "  useEffect(() => {\n    startMonitoring();\n    return () => {\n      stopMonitoring();\n      // Clean up any observers or timers\n    };\n  }, [startMonitoring, stopMonitoring]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 392,
        "column": 5,
        "message": "Potential performance issue with analytics tracking in useEffect without proper debouncing",
        "description": "Potential performance issue with analytics tracking in useEffect without proper debouncing This implementation could impact application performance.",
        "suggestion": "Debounce or throttle analytics calls to prevent excessive API calls",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Log metrics to analytics with debouncing\n    const debouncedTrack = useMemo(\n      () => performanceUtils.debounce((metrics) => {\n        analytics.track('performance_metrics', {\n          frameRate: metrics.frameRate,\n          renderTime: metrics.renderTime,\n          memoryUsage: metrics.memoryUsage\n        });\n      }, 1000),\n      []\n    );\n    \n    if (metrics) {\n      debouncedTrack(metrics);\n    }",
          "description": "Debounce or throttle analytics calls to prevent excessive API calls",
          "content": "    // Log metrics to analytics with debouncing\n    const debouncedTrack = useMemo(\n      () => performanceUtils.debounce((metrics) => {\n        analytics.track('performance_metrics', {\n          frameRate: metrics.frameRate,\n          renderTime: metrics.renderTime,\n          memoryUsage: metrics.memoryUsage\n        });\n      }, 1000),\n      []\n    );\n    \n    if (metrics) {\n      debouncedTrack(metrics);\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 155,
        "column": 1,
        "message": "Missing error handling in performance monitoring and lazy loading examples",
        "description": "Missing error handling in performance monitoring and lazy loading examples This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch blocks and error boundaries for performance monitoring operations",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Measure a specific glass effect with error handling\ntry {\n  measureGlassEffect(\"blur-animation\", () => {\n    // Your glass effect code here\n    element.style.backdropFilter = \"blur(10px)\";\n  });\n} catch (error) {\n  console.warn('Glass effect measurement failed:', error);\n  // Fallback behavior\n}",
          "description": "Add try-catch blocks and error boundaries for performance monitoring operations",
          "content": "// Measure a specific glass effect with error handling\ntry {\n  measureGlassEffect(\"blur-animation\", () => {\n    // Your glass effect code here\n    element.style.backdropFilter = \"blur(10px)\";\n  });\n} catch (error) {\n  console.warn('Glass effect measurement failed:', error);\n  // Fallback behavior\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx-security-5",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/PERFORMANCE.mdx",
        "line": 275,
        "column": 1,
        "message": "Potential XSS vulnerability in dynamic style injection without sanitization",
        "description": "Potential XSS vulnerability in dynamic style injection without sanitization This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Sanitize or validate backdrop filter values before applying them",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Get optimized filter based on device with validation\nconst optimizedFilter = performanceUtils.getOptimizedBackdropFilter(\"medium\");\n// Validate the filter before applying\nif (performanceUtils.isValidBackdropFilter(optimizedFilter)) {\n  element.style.backdropFilter = optimizedFilter;\n}",
          "description": "Sanitize or validate backdrop filter values before applying them",
          "content": "// Get optimized filter based on device with validation\nconst optimizedFilter = performanceUtils.getOptimizedBackdropFilter(\"medium\");\n// Validate the filter before applying\nif (performanceUtils.isValidBackdropFilter(optimizedFilter)) {\n  element.style.backdropFilter = optimizedFilter;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx",
        "line": 122,
        "column": 1,
        "message": "Missing alt text or aria-label for interactive playground section",
        "description": "Missing alt text or aria-label for interactive playground section This code works but could be improved for better maintainability.",
        "suggestion": "Add proper accessibility description for the interactive demonstration section",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "## Interactive Playground\n\n<div role=\"region\" aria-label=\"Interactive NotificationCenter component demonstration\">\n[Live interactive component demonstration would go here]\n</div>",
          "description": "Add proper accessibility description for the interactive demonstration section",
          "content": "## Interactive Playground\n\n<div role=\"region\" aria-label=\"Interactive NotificationCenter component demonstration\">\n[Live interactive component demonstration would go here]\n</div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx",
        "line": 79,
        "column": 1,
        "message": "Incomplete code examples with placeholder comments instead of functional implementation",
        "description": "Incomplete code examples with placeholder comments instead of functional implementation This code works but could be improved for better maintainability.",
        "suggestion": "Provide complete, functional code examples with actual props and implementation details",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx",
        "line": 122,
        "column": 1,
        "message": "Missing semantic heading structure - Interactive Playground should be properly nested",
        "description": "Missing semantic heading structure - Interactive Playground should be properly nested This code works but could be improved for better maintainability.",
        "suggestion": "Consider using appropriate heading level (h3) for better document structure",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "### Interactive Playground",
          "description": "Consider using appropriate heading level (h3) for better document structure",
          "content": "### Interactive Playground"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx",
        "line": 129,
        "column": 1,
        "message": "Inconsistent naming convention in design tokens section",
        "description": "Inconsistent naming convention in design tokens section This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent kebab-case or camelCase for CSS custom properties",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "- `--glass-notification-center-background`: Liquid Glass background with blur\n- `--glass-notification-center-border`: Border color with glass refraction\n- `--glass-notification-center-accent`: Accent color for highlights",
          "description": "Use consistent kebab-case or camelCase for CSS custom properties",
          "content": "- `--glass-notification-center-background`: Liquid Glass background with blur\n- `--glass-notification-center-border`: Border color with glass refraction\n- `--glass-notification-center-accent`: Accent color for highlights"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx-structure-4",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/NotificationCenter.mdx",
        "line": 50,
        "column": 18,
        "message": "Missing implementation details for notification types and structure",
        "description": "Missing implementation details for notification types and structure This code works but could be improved for better maintainability.",
        "suggestion": "Define the Notification interface or type to clarify the expected structure",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx",
        "line": 1,
        "column": 1,
        "message": "Missing accessibility information in migration guide - no mention of semantic HTML or ARIA patterns changes",
        "description": "Missing accessibility information in migration guide - no mention of semantic HTML or ARIA patterns changes This code works but could be improved for better maintainability.",
        "suggestion": "Add section documenting accessibility-related breaking changes, ARIA attribute updates, and semantic HTML modifications",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx",
        "line": 5,
        "column": 1,
        "message": "Incomplete migration information - missing version compatibility matrix and rollback procedures",
        "description": "Incomplete migration information - missing version compatibility matrix and rollback procedures This code works but could be improved for better maintainability.",
        "suggestion": "Add comprehensive version compatibility table and rollback instructions for failed migrations",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx",
        "line": 48,
        "column": 1,
        "message": "No error handling guidance provided for migration failures or compatibility issues",
        "description": "No error handling guidance provided for migration failures or compatibility issues This code works but could be improved for better maintainability.",
        "suggestion": "Include troubleshooting section with common migration errors and their solutions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx-structure-3",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/MIGRATION.mdx",
        "line": 22,
        "column": 1,
        "message": "Missing code validation examples - migration examples lack error scenarios and edge cases",
        "description": "Missing code validation examples - migration examples lack error scenarios and edge cases This code works but could be improved for better maintainability.",
        "suggestion": "Add examples showing how to handle migration edge cases and validate successful transitions",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx",
        "line": 86,
        "column": 1,
        "message": "Table has inconsistent column count - header row has 5 columns but data rows have 4 columns",
        "description": "Table has inconsistent column count - header row has 5 columns but data rows have 4 columns This code works but could be improved for better maintainability.",
        "suggestion": "Fix table structure by ensuring all rows have the same number of columns",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop          | Type      | Default           | Description         |\n| ------------- | --------- | ----------------- | ------------------- |\n| `value`       | `number \\| [number, number]` | `0`                 | Current slider value(s) |\n| `min`         | `number`  | `0`               | Minimum value       |\n| `max`         | `number`  | `100`             | Maximum value       |\n| `step`        | `number`  | `1`               | Step increment      |\n| `range`       | `boolean` | `false`           | Enable range slider |\n| `showTooltip` | `boolean` | `true`            | Show value tooltip  |",
          "description": "Fix table structure by ensuring all rows have the same number of columns",
          "content": "| Prop          | Type      | Default           | Description         |\n| ------------- | --------- | ----------------- | ------------------- |\n| `value`       | `number \\| [number, number]` | `0`                 | Current slider value(s) |\n| `min`         | `number`  | `0`               | Minimum value       |\n| `max`         | `number`  | `100`             | Maximum value       |\n| `step`        | `number`  | `1`               | Step increment      |\n| `range`       | `boolean` | `false`           | Enable range slider |\n| `showTooltip` | `boolean` | `true`            | Show value tooltip  |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx",
        "line": 109,
        "column": 1,
        "message": "Incomplete code examples with placeholder comments instead of actual implementation",
        "description": "Incomplete code examples with placeholder comments instead of actual implementation This violates code style conventions and may reduce readability.",
        "suggestion": "Replace placeholder comments with actual working code examples or mark as TODO",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSlider.mdx",
        "line": 184,
        "column": 1,
        "message": "Interactive playground section contains no actual implementation, only placeholder text",
        "description": "Interactive playground section contains no actual implementation, only placeholder text This code works but could be improved for better maintainability.",
        "suggestion": "Either implement the interactive playground or remove the section to avoid confusion",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx",
        "line": 75,
        "column": 22,
        "message": "Malformed table structure with incorrect column separators",
        "description": "Malformed table structure with incorrect column separators This code works but could be improved for better maintainability.",
        "suggestion": "Fix table column separators to use proper pipe delimiter format",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| `value`       | `string \\| string[]` | `undefined`                 | Selected value(s)           |",
          "description": "Fix table column separators to use proper pipe delimiter format",
          "content": "| `value`       | `string \\| string[]` | `undefined`                 | Selected value(s)           |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx",
        "line": 95,
        "column": 1,
        "message": "Missing comprehensive ARIA attributes and role definitions for select component",
        "description": "Missing comprehensive ARIA attributes and role definitions for select component This code works but could be improved for better maintainability.",
        "suggestion": "Add specific ARIA attributes like role, aria-expanded, aria-haspopup, aria-multiselectable for proper screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx-structure-2",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx",
        "line": 118,
        "column": 1,
        "message": "Code examples are incomplete with placeholder comments instead of actual implementation",
        "description": "Code examples are incomplete with placeholder comments instead of actual implementation This code works but could be improved for better maintainability.",
        "suggestion": "Provide complete, working code examples with actual props and implementation details",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassSelect.mdx",
        "line": 50,
        "column": 1,
        "message": "Missing specific keyboard navigation details for complex select component",
        "description": "Missing specific keyboard navigation details for complex select component This code works but could be improved for better maintainability.",
        "suggestion": "Add detailed keyboard shortcuts for search functionality, option selection, group navigation, and multi-select operations",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 108,
        "column": 7,
        "message": "Missing ARIA labels for interactive elements in code examples",
        "description": "Missing ARIA labels for interactive elements in code examples This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby attributes to buttons for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      footer={<button className=\"glass-button-primary\" aria-label=\"Perform card action\">Action</button>}",
          "description": "Add aria-label or aria-labelledby attributes to buttons for better screen reader support",
          "content": "      footer={<button className=\"glass-button-primary\" aria-label=\"Perform card action\">Action</button>}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 124,
        "column": 13,
        "message": "Missing ARIA labels for interactive elements in advanced example",
        "description": "Missing ARIA labels for interactive elements in advanced example This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to buttons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button className=\"glass-button-secondary\" aria-label=\"See all weekly insights\">See All</button>",
          "description": "Add aria-label attributes to buttons for better accessibility",
          "content": "            <button className=\"glass-button-secondary\" aria-label=\"See all weekly insights\">See All</button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 131,
        "column": 11,
        "message": "Missing ARIA labels for interactive elements in advanced example footer",
        "description": "Missing ARIA labels for interactive elements in advanced example footer This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to buttons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button className=\"glass-button-primary\" aria-label=\"Learn more about weekly summary\">Learn More</button>",
          "description": "Add aria-label attributes to buttons for better accessibility",
          "content": "          <button className=\"glass-button-primary\" aria-label=\"Learn more about weekly summary\">Learn More</button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 129,
        "column": 18,
        "message": "MediaPlayer component missing accessibility attributes",
        "description": "MediaPlayer component missing accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add alt text or aria-label for media content accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      content={<MediaPlayer className=\"w-full h-64\" aria-label=\"Weekly summary media content\" />}",
          "description": "Add alt text or aria-label for media content accessibility",
          "content": "      content={<MediaPlayer className=\"w-full h-64\" aria-label=\"Weekly summary media content\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-structure-4",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 115,
        "column": 1,
        "message": "Import statement references undefined component in example",
        "description": "Import statement references undefined component in example This code works but could be improved for better maintainability.",
        "suggestion": "Ensure MediaPlayer component exists or provide a placeholder implementation",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassResponsiveCard.mdx",
        "line": 100,
        "column": 1,
        "message": "Missing semantic HTML structure in card examples",
        "description": "Missing semantic HTML structure in card examples This code works but could be improved for better maintainability.",
        "suggestion": "Consider wrapping card content in semantic HTML elements like <article> or <section>",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export default function Example() {\n  return (\n    <article>\n      <GlassResponsiveCard\n        header={<h3 className=\"hig-headline\">Card Title</h3>}\n        content={\n          <p className=\"hig-body\">This is the main content of the card.</p>\n        }\n        footer={<button className=\"glass-button-primary\" aria-label=\"Perform card action\">Action</button>}\n      />\n    </article>\n  );\n}",
          "description": "Consider wrapping card content in semantic HTML elements like <article> or <section>",
          "content": "export default function Example() {\n  return (\n    <article>\n      <GlassResponsiveCard\n        header={<h3 className=\"hig-headline\">Card Title</h3>}\n        content={\n          <p className=\"hig-body\">This is the main content of the card.</p>\n        }\n        footer={<button className=\"glass-button-primary\" aria-label=\"Perform card action\">Action</button>}\n      />\n    </article>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx",
        "line": 109,
        "column": 1,
        "message": "Missing ARIA live region implementation details for dynamic progress updates",
        "description": "Missing ARIA live region implementation details for dynamic progress updates This code works but could be improved for better maintainability.",
        "suggestion": "Add specific ARIA live region attributes and implementation examples for screen reader announcements",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx",
        "line": 95,
        "column": 1,
        "message": "Interactive progress component lacks proper keyboard event handling specification",
        "description": "Interactive progress component lacks proper keyboard event handling specification This code works but could be improved for better maintainability.",
        "suggestion": "Add specific keyboard event handlers and ARIA attributes for interactive progress components",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx",
        "line": 177,
        "column": 1,
        "message": "No error boundaries or error handling examples provided for component failures",
        "description": "No error boundaries or error handling examples provided for component failures This code works but could be improved for better maintainability.",
        "suggestion": "Add error boundary examples and error state handling for failed progress operations",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx",
        "line": 416,
        "column": 1,
        "message": "Continuous animation effects may impact battery life and performance",
        "description": "Continuous animation effects may impact battery life and performance This implementation could impact application performance.",
        "suggestion": "Add performance considerations and options to disable animations for battery optimization",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassProgress.mdx",
        "line": 109,
        "column": 1,
        "message": "Missing specific ARIA role and property implementations for progress indicators",
        "description": "Missing specific ARIA role and property implementations for progress indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add role='progressbar', aria-valuenow, aria-valuemin, aria-valuemax attributes in examples",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "### Screen Reader Support\n\n- Proper ARIA labels and roles (role=\"progressbar\")\n- aria-valuenow, aria-valuemin, aria-valuemax attributes\n- Progress value announcements\n- Status updates via live regions (aria-live=\"polite\")\n- Percentage completion feedback\n- aria-label or aria-labelledby for progress description",
          "description": "Add role='progressbar', aria-valuenow, aria-valuemin, aria-valuemax attributes in examples",
          "content": "### Screen Reader Support\n\n- Proper ARIA labels and roles (role=\"progressbar\")\n- aria-valuenow, aria-valuemin, aria-valuemax attributes\n- Progress value announcements\n- Status updates via live regions (aria-live=\"polite\")\n- Percentage completion feedback\n- aria-label or aria-labelledby for progress description"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 116,
        "column": 13,
        "message": "Missing ARIA attributes in code examples - popover trigger elements should have aria-haspopup and aria-expanded attributes",
        "description": "Missing ARIA attributes in code examples - popover trigger elements should have aria-haspopup and aria-expanded attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-haspopup='true' and aria-expanded state management to trigger elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      trigger={<button aria-haspopup=\"true\" aria-expanded=\"false\">Show Info</button>}",
          "description": "Add aria-haspopup='true' and aria-expanded state management to trigger elements",
          "content": "      trigger={<button aria-haspopup=\"true\" aria-expanded=\"false\">Show Info</button>}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 133,
        "column": 7,
        "message": "Menu items in popover example lack proper ARIA roles and keyboard navigation attributes",
        "description": "Menu items in popover example lack proper ARIA roles and keyboard navigation attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add role='menu' to container and role='menuitem' to buttons, plus proper keyboard event handlers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div className=\"py-2\" role=\"menu\">\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover\" role=\"menuitem\">\n        Edit Profile\n      </button>\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover\" role=\"menuitem\">\n        Settings\n      </button>\n      <div className=\"border-t border-glass-border my-1\" role=\"separator\" />\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover text-red-500\" role=\"menuitem\">\n        Sign Out\n      </button>\n    </div>",
          "description": "Add role='menu' to container and role='menuitem' to buttons, plus proper keyboard event handlers",
          "content": "    <div className=\"py-2\" role=\"menu\">\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover\" role=\"menuitem\">\n        Edit Profile\n      </button>\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover\" role=\"menuitem\">\n        Settings\n      </button>\n      <div className=\"border-t border-glass-border my-1\" role=\"separator\" />\n      <button className=\"w-full px-4 py-2 text-left hover:bg-glass-hover text-red-500\" role=\"menuitem\">\n        Sign Out\n      </button>\n    </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 168,
        "column": 7,
        "message": "Form input in help popover example missing proper labeling and association with help content",
        "description": "Form input in help popover example missing proper labeling and association with help content This code works but could be improved for better maintainability.",
        "suggestion": "Add proper labels and aria-describedby to associate input with help content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <label htmlFor=\"password-input\" className=\"sr-only\">Password</label>\n      <input \n        id=\"password-input\" \n        type=\"password\" \n        className=\"glass-input\" \n        placeholder=\"Password\" \n        aria-describedby=\"password-help\"\n      />",
          "description": "Add proper labels and aria-describedby to associate input with help content",
          "content": "      <label htmlFor=\"password-input\" className=\"sr-only\">Password</label>\n      <input \n        id=\"password-input\" \n        type=\"password\" \n        className=\"glass-input\" \n        placeholder=\"Password\" \n        aria-describedby=\"password-help\"\n      />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 158,
        "column": 5,
        "message": "Help popover content lacks proper id for aria-describedby association",
        "description": "Help popover content lacks proper id for aria-describedby association This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to help content container for proper ARIA association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div className=\"max-w-xs p-4\" id=\"password-help\">\n      <h4 className=\"hig-subheadline mb-2\">Password Requirements</h4>\n      <ul className=\"hig-caption space-y-1\">\n        <li>• At least 8 characters</li>\n        <li>• One uppercase letter</li>\n        <li>• One number</li>\n        <li>• One special character</li>\n      </ul>\n    </div>",
          "description": "Add id attribute to help content container for proper ARIA association",
          "content": "    <div className=\"max-w-xs p-4\" id=\"password-help\">\n      <h4 className=\"hig-subheadline mb-2\">Password Requirements</h4>\n      <ul className=\"hig-caption space-y-1\">\n        <li>• At least 8 characters</li>\n        <li>• One uppercase letter</li>\n        <li>• One number</li>\n        <li>• One special character</li>\n      </ul>\n    </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 133,
        "column": 20,
        "message": "Inline object creation in JSX props may cause unnecessary re-renders",
        "description": "Inline object creation in JSX props may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract JSX content to a variable or useMemo to prevent recreation on each render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Extract JSX content to a variable or useMemo to prevent recreation on each render",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassPopover.mdx",
        "line": 88,
        "column": 1,
        "message": "Inconsistent spacing in table formatting",
        "description": "Inconsistent spacing in table formatting This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent column width alignment in markdown tables",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "### Screen Reader Support",
          "description": "Use consistent column width alignment in markdown tables",
          "content": "### Screen Reader Support"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 91,
        "column": 5,
        "message": "Missing alt text or aria-label for icon references in navigation items",
        "description": "Missing alt text or aria-label for icon references in navigation items This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icon properties to improve screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"search\", label: \"Search\", icon: \"magnifyingglass\", ariaLabel: \"Search navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ];",
          "description": "Add aria-label or alt attributes to icon properties to improve screen reader accessibility",
          "content": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"search\", label: \"Search\", icon: \"magnifyingglass\", ariaLabel: \"Search navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ];"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 112,
        "column": 5,
        "message": "Missing alt text or aria-label for icon references in badge example",
        "description": "Missing alt text or aria-label for icon references in badge example This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to icon properties for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"messages\", label: \"Messages\", icon: \"message\", ariaLabel: \"Messages navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ];",
          "description": "Add aria-label attributes to icon properties for better accessibility",
          "content": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"messages\", label: \"Messages\", icon: \"message\", ariaLabel: \"Messages navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ];"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 144,
        "column": 5,
        "message": "Missing alt text or aria-label for icon references in advanced example",
        "description": "Missing alt text or aria-label for icon references in advanced example This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to icon properties for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"explore\", label: \"Explore\", icon: \"safari\", ariaLabel: \"Explore navigation\" },\n    { id: \"premium\", label: \"Premium\", icon: \"star\", ariaLabel: \"Premium navigation\" },\n    { id: \"settings\", label: \"Settings\", icon: \"gear\", ariaLabel: \"Settings navigation\" },\n  ];",
          "description": "Add aria-label attributes to icon properties for better accessibility",
          "content": "  const navItems = [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"explore\", label: \"Explore\", icon: \"safari\", ariaLabel: \"Explore navigation\" },\n    { id: \"premium\", label: \"Premium\", icon: \"star\", ariaLabel: \"Premium navigation\" },\n    { id: \"settings\", label: \"Settings\", icon: \"gear\", ariaLabel: \"Settings navigation\" },\n  ];"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 152,
        "column": 7,
        "message": "Missing error handling for undefined function showPremiumModal",
        "description": "Missing error handling for undefined function showPremiumModal This code works but could be improved for better maintainability.",
        "suggestion": "Add error handling or define the showPremiumModal function",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Show premium upgrade modal\n      try {\n        showPremiumModal();\n      } catch (error) {\n        console.error('Failed to show premium modal:', error);\n      }",
          "description": "Add error handling or define the showPremiumModal function",
          "content": "      // Show premium upgrade modal\n      try {\n        showPremiumModal();\n      } catch (error) {\n        console.error('Failed to show premium modal:', error);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 90,
        "column": 3,
        "message": "navItems array is recreated on every render which may cause unnecessary re-renders",
        "description": "navItems array is recreated on every render which may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move navItems outside component or wrap with useMemo to prevent recreation on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export default function Example() {\n  const [activeTab, setActiveTab] = useState(\"home\");\n\n  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"search\", label: \"Search\", icon: \"magnifyingglass\", ariaLabel: \"Search navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ], []);",
          "description": "Move navItems outside component or wrap with useMemo to prevent recreation on every render",
          "content": "export default function Example() {\n  const [activeTab, setActiveTab] = useState(\"home\");\n\n  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"search\", label: \"Search\", icon: \"magnifyingglass\", ariaLabel: \"Search navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ], []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 111,
        "column": 3,
        "message": "navItems array is recreated on every render in badge example",
        "description": "navItems array is recreated on every render in badge example This implementation could impact application performance.",
        "suggestion": "Use useMemo to prevent unnecessary recreations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"messages\", label: \"Messages\", icon: \"message\", ariaLabel: \"Messages navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ], []);",
          "description": "Use useMemo to prevent unnecessary recreations",
          "content": "  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"messages\", label: \"Messages\", icon: \"message\", ariaLabel: \"Messages navigation\" },\n    { id: \"notifications\", label: \"Notifications\", icon: \"bell\", ariaLabel: \"Notifications navigation\" },\n    { id: \"profile\", label: \"Profile\", icon: \"person\", ariaLabel: \"Profile navigation\" },\n  ], []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassMobileNav.mdx",
        "line": 143,
        "column": 3,
        "message": "navItems array is recreated on every render in advanced example",
        "description": "navItems array is recreated on every render in advanced example This implementation could impact application performance.",
        "suggestion": "Use useMemo to prevent unnecessary recreations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"explore\", label: \"Explore\", icon: \"safari\", ariaLabel: \"Explore navigation\" },\n    { id: \"premium\", label: \"Premium\", icon: \"star\", ariaLabel: \"Premium navigation\" },\n    { id: \"settings\", label: \"Settings\", icon: \"gear\", ariaLabel: \"Settings navigation\" },\n  ], []);",
          "description": "Use useMemo to prevent unnecessary recreations",
          "content": "  const navItems = useMemo(() => [\n    { id: \"home\", label: \"Home\", icon: \"house\", ariaLabel: \"Home navigation\" },\n    { id: \"explore\", label: \"Explore\", icon: \"safari\", ariaLabel: \"Explore navigation\" },\n    { id: \"premium\", label: \"Premium\", icon: \"star\", ariaLabel: \"Premium navigation\" },\n    { id: \"settings\", label: \"Settings\", icon: \"gear\", ariaLabel: \"Settings navigation\" },\n  ], []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx",
        "line": 87,
        "column": 17,
        "message": "Missing useState import for code examples",
        "description": "Missing useState import for code examples This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";",
          "description": "Add React import with useState hook",
          "content": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx",
        "line": 110,
        "column": 17,
        "message": "Missing useState import for code examples",
        "description": "Missing useState import for code examples This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";",
          "description": "Add React import with useState hook",
          "content": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx",
        "line": 140,
        "column": 17,
        "message": "Missing useState import for code examples",
        "description": "Missing useState import for code examples This code works but could be improved for better maintainability.",
        "suggestion": "Add React import with useState hook",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";",
          "description": "Add React import with useState hook",
          "content": "import React, { useState } from \"react\";\nimport { GlassDropdown } from \"liquidify\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx",
        "line": 71,
        "column": 1,
        "message": "Missing aria-label or aria-labelledby attribute specification in API documentation",
        "description": "Missing aria-label or aria-labelledby attribute specification in API documentation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and aria-labelledby props to the API reference table for better accessibility documentation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop          | Type                          | Default       | Description                       |\n| ------------- | ----------------------------- | ------------- | --------------------------------- |\n| `options`     | `DropdownOption[]`            | `[]`          | Array of dropdown options         |\n| `value`       | `string`                      | `undefined`   | Currently selected value          |\n| `placeholder` | `string`                      | `'Select...'` | Placeholder text                  |\n| `disabled`    | `boolean`                     | `false`       | Disables user interaction         |\n| `size`        | `'sm' \\| 'md' \\| 'lg'`        | `'md'`        | Dropdown size                     |\n| `position`    | `'bottom' \\| 'top' \\| 'auto'` | `'auto'`      | Menu position relative to trigger |\n| `aria-label`  | `string`                      | `undefined`   | Accessibility label for dropdown  |\n| `aria-labelledby` | `string`                  | `undefined`   | ID of element that labels dropdown |",
          "description": "Add aria-label and aria-labelledby props to the API reference table for better accessibility documentation",
          "content": "| Prop          | Type                          | Default       | Description                       |\n| ------------- | ----------------------------- | ------------- | --------------------------------- |\n| `options`     | `DropdownOption[]`            | `[]`          | Array of dropdown options         |\n| `value`       | `string`                      | `undefined`   | Currently selected value          |\n| `placeholder` | `string`                      | `'Select...'` | Placeholder text                  |\n| `disabled`    | `boolean`                     | `false`       | Disables user interaction         |\n| `size`        | `'sm' \\| 'md' \\| 'lg'`        | `'md'`        | Dropdown size                     |\n| `position`    | `'bottom' \\| 'top' \\| 'auto'` | `'auto'`      | Menu position relative to trigger |\n| `aria-label`  | `string`                      | `undefined`   | Accessibility label for dropdown  |\n| `aria-labelledby` | `string`                  | `undefined`   | ID of element that labels dropdown |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassDropdown.mdx",
        "line": 96,
        "column": 5,
        "message": "Code examples should include aria-label for better accessibility demonstration",
        "description": "Code examples should include aria-label for better accessibility demonstration This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to demonstrate proper accessibility implementation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassDropdown\n      options={options}\n      value={value}\n      onChange={(value) => setValue(value)}\n      placeholder=\"Choose an option\"\n      aria-label=\"Select an option from the dropdown\"\n    />",
          "description": "Add aria-label to demonstrate proper accessibility implementation",
          "content": "    <GlassDropdown\n      options={options}\n      value={value}\n      onChange={(value) => setValue(value)}\n      placeholder=\"Choose an option\"\n      aria-label=\"Select an option from the dropdown\"\n    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx",
        "line": 142,
        "column": 19,
        "message": "Missing import for useState hook used in code examples",
        "description": "Missing import for useState hook used in code examples This code works but could be improved for better maintainability.",
        "suggestion": "Add import { useState } from 'react' to the code example",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { GlassBadge } from \"liquidify\";\nimport { useState } from \"react\";",
          "description": "Add import { useState } from 'react' to the code example",
          "content": "import { GlassBadge } from \"liquidify\";\nimport { useState } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx",
        "line": 124,
        "column": 9,
        "message": "Missing alt text or aria-label for MessageIcon component",
        "description": "Missing alt text or aria-label for MessageIcon component This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attribute to MessageIcon for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <MessageIcon aria-label=\"Messages\" />",
          "description": "Add aria-label or aria-hidden attribute to MessageIcon for screen readers",
          "content": "        <MessageIcon aria-label=\"Messages\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx",
        "line": 149,
        "column": 7,
        "message": "Interactive badge without proper ARIA attributes",
        "description": "Interactive badge without proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button' and appropriate ARIA attributes for interactive elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <GlassBadge\n        variant=\"primary\"\n        size=\"lg\"\n        onClick={() => setCount(count + 1)}\n        className=\"cursor-pointer\"\n        role=\"button\"\n        aria-label={`Click count: ${count}. Click to increment.`}\n        tabIndex={0}\n      >",
          "description": "Add role='button' and appropriate ARIA attributes for interactive elements",
          "content": "      <GlassBadge\n        variant=\"primary\"\n        size=\"lg\"\n        onClick={() => setCount(count + 1)}\n        className=\"cursor-pointer\"\n        role=\"button\"\n        aria-label={`Click count: ${count}. Click to increment.`}\n        tabIndex={0}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/GlassBadge.mdx",
        "line": 88,
        "column": 1,
        "message": "Inconsistent table formatting with mixed spacing",
        "description": "Inconsistent table formatting with mixed spacing This violates code style conventions and may reduce readability.",
        "suggestion": "Standardize table column alignment and spacing",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop       | Type                                                             | Default     | Description                         |\n| ---------- | ---------------------------------------------------------------- | ----------- | ----------------------------------- |\n| `variant`  | `'primary' \\| 'secondary' \\| 'success' \\| 'warning' \\| 'error'` | `'primary'` | Visual style variant                |\n| `size`     | `'sm' \\| 'md' \\| 'lg'`                                           | `'md'`      | Badge size following 4pt grid       |\n| `dot`      | `boolean`                                                        | `false`     | Shows dot indicator instead of text |\n| `children` | `React.ReactNode`                                                | `undefined` | Content to display in badge         |",
          "description": "Standardize table column alignment and spacing",
          "content": "| Prop       | Type                                                             | Default     | Description                         |\n| ---------- | ---------------------------------------------------------------- | ----------- | ----------------------------------- |\n| `variant`  | `'primary' \\| 'secondary' \\| 'success' \\| 'warning' \\| 'error'` | `'primary'` | Visual style variant                |\n| `size`     | `'sm' \\| 'md' \\| 'lg'`                                           | `'md'`      | Badge size following 4pt grid       |\n| `dot`      | `boolean`                                                        | `false`     | Shows dot indicator instead of text |\n| `children` | `React.ReactNode`                                                | `undefined` | Content to display in badge         |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx-naming-0",
        "type": "naming",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx",
        "line": 107,
        "column": 32,
        "message": "Invalid function name 'Multi-variantShowcaseExample' contains hyphens which are not allowed in JavaScript identifiers",
        "description": "Invalid function name 'Multi-variantShowcaseExample' contains hyphens which are not allowed in JavaScript identifiers This will likely cause errors during execution.",
        "suggestion": "Use camelCase naming convention for function names",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export default function MultiVariantShowcaseExample() {",
          "description": "Use camelCase naming convention for function names",
          "content": "export default function MultiVariantShowcaseExample() {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx",
        "line": 135,
        "column": 1,
        "message": "Missing alt text or aria-label for the interactive playground section which would be inaccessible to screen readers",
        "description": "Missing alt text or aria-label for the interactive playground section which would be inaccessible to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add proper aria-labels or descriptive text for screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx-structure-2",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx",
        "line": 71,
        "column": 5,
        "message": "Incomplete code examples with placeholder comments instead of actual implementation reduce documentation value",
        "description": "Incomplete code examples with placeholder comments instead of actual implementation reduce documentation value This code works but could be improved for better maintainability.",
        "suggestion": "Provide complete, working code examples with actual props and implementations",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx-convention-3",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/components/ComponentShowcase.mdx",
        "line": 109,
        "column": 30,
        "message": "Inconsistent quote usage - mixing single and double quotes in import statements and code examples",
        "description": "Inconsistent quote usage - mixing single and double quotes in import statements and code examples This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent quote style throughout the document (prefer double quotes for JSX)",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { ComponentShowcase } from \"liquidify\"",
          "description": "Use consistent quote style throughout the document (prefer double quotes for JSX)",
          "content": "import { ComponentShowcase } from \"liquidify\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 279,
        "column": 5,
        "message": "Missing heading level structure - using h3 without proper hierarchy context",
        "description": "Missing heading level structure - using h3 without proper hierarchy context This code works but could be improved for better maintainability.",
        "suggestion": "Ensure proper heading hierarchy or use appropriate semantic markup",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 278,
        "column": 5,
        "message": "Image without alt attribute for accessibility",
        "description": "Image without alt attribute for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive alt attribute to img element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <img src=\"avatar.jpg\" alt=\"User avatar\" />",
          "description": "Add descriptive alt attribute to img element",
          "content": "    <img src=\"avatar.jpg\" alt=\"User avatar\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 469,
        "column": 1,
        "message": "addEventListener without cleanup may cause memory leaks",
        "description": "addEventListener without cleanup may cause memory leaks This implementation could impact application performance.",
        "suggestion": "Add removeEventListener in cleanup or use useEffect with cleanup in React",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 177,
        "column": 1,
        "message": "DOM manipulation without existence check may throw runtime errors",
        "description": "DOM manipulation without existence check may throw runtime errors This code works but could be improved for better maintainability.",
        "suggestion": "Add null check before accessing element properties",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Apply to element\nif (element) {\n  element.style.cssText = cssVars;\n}",
          "description": "Add null check before accessing element properties",
          "content": "// Apply to element\nif (element) {\n  element.style.cssText = cssVars;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 415,
        "column": 5,
        "message": "DOM manipulation without existence check may throw runtime errors",
        "description": "DOM manipulation without existence check may throw runtime errors This code works but could be improved for better maintainability.",
        "suggestion": "Add null check before accessing element properties",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  onUpdate: (value) => {\n    if (element) {\n      element.textContent = Math.round(value);\n    }\n  },",
          "description": "Add null check before accessing element properties",
          "content": "  onUpdate: (value) => {\n    if (element) {\n      element.textContent = Math.round(value);\n    }\n  },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-security-5",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 415,
        "column": 5,
        "message": "Direct DOM manipulation of textContent without sanitization",
        "description": "Direct DOM manipulation of textContent without sanitization This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Validate and sanitize the value before setting textContent",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx-error-handling-6",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/utilities.mdx",
        "line": 675,
        "column": 3,
        "message": "localStorage access without try-catch may throw in some browsers",
        "description": "localStorage access without try-catch may throw in some browsers This code works but could be improved for better maintainability.",
        "suggestion": "Wrap localStorage access in try-catch block",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "if (!isSSR()) {\n  // Browser-only code\n  try {\n    localStorage.setItem(\"key\", \"value\");\n  } catch (error) {\n    console.warn(\"localStorage not available:\", error);\n  }\n}",
          "description": "Wrap localStorage access in try-catch block",
          "content": "if (!isSSR()) {\n  // Browser-only code\n  try {\n    localStorage.setItem(\"key\", \"value\");\n  } catch (error) {\n    console.warn(\"localStorage not available:\", error);\n  }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx",
        "line": 73,
        "column": 1,
        "message": "Missing ARIA attributes for form components - no aria-describedby references for validation states",
        "description": "Missing ARIA attributes for form components - no aria-describedby references for validation states This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby, aria-invalid, and aria-errormessage props to form components for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx",
        "line": 87,
        "column": 1,
        "message": "Modal component missing focus trap and initial focus management props",
        "description": "Modal component missing focus trap and initial focus management props This code works but could be improved for better maintainability.",
        "suggestion": "Add initialFocus, restoreFocus, and focusTrap props for proper modal accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop                  | Type                                     | Default | Description               |\n| --------------------- | ---------------------------------------- | ------- | ------------------------- |\n| `open`                | `boolean`                                | `false` | Modal visibility          |\n| `onOpenChange`        | `(open: boolean) => void`                | -       | Open state change handler |\n| `size`                | `'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'full'` | `'md'`  | Modal size                |\n| `closeOnClickOutside` | `boolean`                                | `true`  | Close on backdrop click   |\n| `closeOnEscape`       | `boolean`                                | `true`  | Close on Escape key       |\n| `showCloseButton`     | `boolean`                                | `true`  | Show close button         |\n| `preventScroll`       | `boolean`                                | `true`  | Prevent body scroll       |\n| `initialFocus`        | `RefObject<HTMLElement>`                 | -       | Initial focus element     |\n| `restoreFocus`        | `boolean`                                | `true`  | Restore focus on close    |\n| `focusTrap`           | `boolean`                                | `true`  | Enable focus trapping     |",
          "description": "Add initialFocus, restoreFocus, and focusTrap props for proper modal accessibility",
          "content": "| Prop                  | Type                                     | Default | Description               |\n| --------------------- | ---------------------------------------- | ------- | ------------------------- |\n| `open`                | `boolean`                                | `false` | Modal visibility          |\n| `onOpenChange`        | `(open: boolean) => void`                | -       | Open state change handler |\n| `size`                | `'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'full'` | `'md'`  | Modal size                |\n| `closeOnClickOutside` | `boolean`                                | `true`  | Close on backdrop click   |\n| `closeOnEscape`       | `boolean`                                | `true`  | Close on Escape key       |\n| `showCloseButton`     | `boolean`                                | `true`  | Show close button         |\n| `preventScroll`       | `boolean`                                | `true`  | Prevent body scroll       |\n| `initialFocus`        | `RefObject<HTMLElement>`                 | -       | Initial focus element     |\n| `restoreFocus`        | `boolean`                                | `true`  | Restore focus on close    |\n| `focusTrap`           | `boolean`                                | `true`  | Enable focus trapping     |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx",
        "line": 317,
        "column": 1,
        "message": "Table component missing ARIA attributes for sorting and selection states",
        "description": "Table component missing ARIA attributes for sorting and selection states This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-sort, role, and aria-selected props for accessible table functionality",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop         | Type                         | Default | Description          |\n| ------------ | ---------------------------- | ------- | -------------------- |\n| `data`       | `Array<Record<string, any>>` | -       | Table data           |\n| `columns`    | `ColumnDef[]`                | -       | Column definitions   |\n| `sortable`   | `boolean`                    | `false` | Enable sorting       |\n| `filterable` | `boolean`                    | `false` | Enable filtering     |\n| `selectable` | `boolean`                    | `false` | Enable row selection |\n| `striped`    | `boolean`                    | `false` | Striped rows         |\n| `bordered`   | `boolean`                    | `false` | Table borders        |\n| `caption`    | `string`                     | -       | Table caption        |\n| `ariaLabel`  | `string`                     | -       | ARIA label           |",
          "description": "Add aria-sort, role, and aria-selected props for accessible table functionality",
          "content": "| Prop         | Type                         | Default | Description          |\n| ------------ | ---------------------------- | ------- | -------------------- |\n| `data`       | `Array<Record<string, any>>` | -       | Table data           |\n| `columns`    | `ColumnDef[]`                | -       | Column definitions   |\n| `sortable`   | `boolean`                    | `false` | Enable sorting       |\n| `filterable` | `boolean`                    | `false` | Enable filtering     |\n| `selectable` | `boolean`                    | `false` | Enable row selection |\n| `striped`    | `boolean`                    | `false` | Striped rows         |\n| `bordered`   | `boolean`                    | `false` | Table borders        |\n| `caption`    | `string`                     | -       | Table caption        |\n| `ariaLabel`  | `string`                     | -       | ARIA label           |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx",
        "line": 339,
        "column": 1,
        "message": "Command component missing keyboard navigation props and ARIA attributes",
        "description": "Command component missing keyboard navigation props and ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add props for keyboard navigation, ARIA labelling, and role definitions",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "| Prop            | Type                      | Default | Description                |\n| --------------- | ------------------------- | ------- | -------------------------- |\n| `open`          | `boolean`                 | `false` | Command palette visibility |\n| `onOpenChange`  | `(open: boolean) => void` | -       | Open state handler         |\n| `items`         | `CommandItem[]`           | -       | Command items              |\n| `placeholder`   | `string`                  | -       | Search placeholder         |\n| `emptyMessage`  | `string`                  | -       | Empty state message        |\n| `ariaLabel`     | `string`                  | -       | ARIA label for command     |\n| `role`          | `string`                  | `'combobox'` | ARIA role            |",
          "description": "Add props for keyboard navigation, ARIA labelling, and role definitions",
          "content": "| Prop            | Type                      | Default | Description                |\n| --------------- | ------------------------- | ------- | -------------------------- |\n| `open`          | `boolean`                 | `false` | Command palette visibility |\n| `onOpenChange`  | `(open: boolean) => void` | -       | Open state handler         |\n| `items`         | `CommandItem[]`           | -       | Command items              |\n| `placeholder`   | `string`                  | -       | Search placeholder         |\n| `emptyMessage`  | `string`                  | -       | Empty state message        |\n| `ariaLabel`     | `string`                  | -       | ARIA label for command     |\n| `role`          | `string`                  | `'combobox'` | ARIA role            |"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/apps/docs/api-reference/components.mdx",
        "line": 24,
        "column": 1,
        "message": "Inconsistent table formatting in props tables - some have extra spaces",
        "description": "Inconsistent table formatting in props tables - some have extra spaces This violates code style conventions and may reduce readability.",
        "suggestion": "Standardize table formatting with consistent spacing and alignment",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts",
        "line": 52,
        "column": 23,
        "message": "DOM manipulation without checking if document is available (SSR compatibility issue)",
        "description": "DOM manipulation without checking if document is available (SSR compatibility issue) This code works but could be improved for better maintainability.",
        "suggestion": "Check if document is available before using it to ensure SSR compatibility",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const element = typeof document !== 'undefined' ? document.createElement(\"div\") : null;\n      if (element) {\n        element.classList.add(\"glass-button\");\n        expect(isGlassComponent(element)).toBe(true);\n      }",
          "description": "Check if document is available before using it to ensure SSR compatibility",
          "content": "const element = typeof document !== 'undefined' ? document.createElement(\"div\") : null;\n      if (element) {\n        element.classList.add(\"glass-button\");\n        expect(isGlassComponent(element)).toBe(true);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts",
        "line": 58,
        "column": 23,
        "message": "DOM manipulation without checking if document is available (SSR compatibility issue)",
        "description": "DOM manipulation without checking if document is available (SSR compatibility issue) This code works but could be improved for better maintainability.",
        "suggestion": "Check if document is available before using it to ensure SSR compatibility",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const element = typeof document !== 'undefined' ? document.createElement(\"div\") : null;\n      if (element) {\n        expect(isGlassComponent(element)).toBe(false);\n      }\n      expect(isGlassComponent(\"not an element\")).toBe(false);",
          "description": "Check if document is available before using it to ensure SSR compatibility",
          "content": "const element = typeof document !== 'undefined' ? document.createElement(\"div\") : null;\n      if (element) {\n        expect(isGlassComponent(element)).toBe(false);\n      }\n      expect(isGlassComponent(\"not an element\")).toBe(false);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/type-guards.test.ts",
        "line": 61,
        "column": 7,
        "message": "Test assertion may not be meaningful - passing string to DOM element type guard",
        "description": "Test assertion may not be meaningful - passing string to DOM element type guard This code works but could be improved for better maintainability.",
        "suggestion": "Consider testing with proper DOM element types or null/undefined values instead of strings",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 37,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type T | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type T | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 60,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type string | CSSStyleDeclaration | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      return null;",
          "description": "Return null explicitly to match the return type string | CSSStyleDeclaration | null",
          "content": "      return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-2",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 68,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type string | CSSStyleDeclaration | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type string | CSSStyleDeclaration | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-3",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 124,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type (() => void) | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type (() => void) | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-4",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 138,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type (() => void) | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type (() => void) | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-5",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 166,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type AudioContext | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type AudioContext | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-6",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 174,
        "column": 5,
        "message": "Function returns undefined instead of null, inconsistent with return type annotation",
        "description": "Function returns undefined instead of null, inconsistent with return type annotation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the return type AudioContext | null",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the return type AudioContext | null",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 184,
        "column": 12,
        "message": "Inconsistent return type - mixing null and undefined in different code paths",
        "description": "Inconsistent return type - mixing null and undefined in different code paths This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use consistent return type - either always return null or always return undefined",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return fallback ?? null;",
          "description": "Use consistent return type - either always return null or always return undefined",
          "content": "    return fallback ?? null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-8",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 188,
        "column": 12,
        "message": "Inconsistent return type - mixing null and undefined in different code paths",
        "description": "Inconsistent return type - mixing null and undefined in different code paths This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use consistent return type - either always return null or always return undefined",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return element.getAttribute(name) ?? fallback ?? null;",
          "description": "Use consistent return type - either always return null or always return undefined",
          "content": "    return element.getAttribute(name) ?? fallback ?? null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-9",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 192,
        "column": 12,
        "message": "Inconsistent return type - mixing null and undefined in different code paths",
        "description": "Inconsistent return type - mixing null and undefined in different code paths This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use consistent return type - either always return null or always return undefined",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return fallback ?? null;",
          "description": "Use consistent return type - either always return null or always return undefined",
          "content": "    return fallback ?? null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-10",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 220,
        "column": 12,
        "message": "Unsafe type assertion using 'as unknown' bypasses TypeScript type checking",
        "description": "Unsafe type assertion using 'as unknown' bypasses TypeScript type checking This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking or cast to CSSStyleDeclaration with index signature",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return (element.style as any)[property] || fallback || \"\";",
          "description": "Use proper type checking or cast to CSSStyleDeclaration with index signature",
          "content": "    return (element.style as any)[property] || fallback || \"\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts-bug-11",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.ts",
        "line": 240,
        "column": 5,
        "message": "Unsafe type assertion using 'as unknown' bypasses TypeScript type checking",
        "description": "Unsafe type assertion using 'as unknown' bypasses TypeScript type checking This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking or cast with more specific type",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    (element.style as any)[property] = value;",
          "description": "Use proper type checking or cast with more specific type",
          "content": "    (element.style as any)[property] = value;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts",
        "line": 58,
        "column": 23,
        "message": "Testing private function by reimplementing it inline instead of testing through public API",
        "description": "Testing private function by reimplementing it inline instead of testing through public API This code works but could be improved for better maintainability.",
        "suggestion": "Remove the safeRefAccess test block as it's testing an internal implementation detail that should be tested through public APIs",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts",
        "line": 482,
        "column": 7,
        "message": "Creating large map with 10,000 entries in test may cause slow test execution",
        "description": "Creating large map with 10,000 entries in test may cause slow test execution This implementation could impact application performance.",
        "suggestion": "Reduce the size of the test map to a smaller number like 100 or 1000 entries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const largeMap = new Map();\n      for (let i = 0; i < 1000; i++) {\n        largeMap.set(`key${i}`, `value${i}`);\n      }\n\n      expect(safeMapGet(largeMap, \"key500\")).toBe(\"value500\");",
          "description": "Reduce the size of the test map to a smaller number like 100 or 1000 entries",
          "content": "      const largeMap = new Map();\n      for (let i = 0; i < 1000; i++) {\n        largeMap.set(`key${i}`, `value${i}`);\n      }\n\n      expect(safeMapGet(largeMap, \"key500\")).toBe(\"value500\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts",
        "line": 505,
        "column": 7,
        "message": "Loop with 100 iterations in test may cause unnecessary test slowdown",
        "description": "Loop with 100 iterations in test may cause unnecessary test slowdown This implementation could impact application performance.",
        "suggestion": "Reduce the number of iterations to a smaller number like 10",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Rapid successive calls\n      for (let i = 0; i < 10; i++) {\n        const result = safeGetBoundingClientRect(element as any);\n        expect(result.width).toBe(100);\n      }",
          "description": "Reduce the number of iterations to a smaller number like 10",
          "content": "      // Rapid successive calls\n      for (let i = 0; i < 10; i++) {\n        const result = safeGetBoundingClientRect(element as any);\n        expect(result.width).toBe(100);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts-convention-3",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/safe-dom.test.ts",
        "line": 92,
        "column": 57,
        "message": "Inconsistent use of type assertion 'as any' instead of proper typing",
        "description": "Inconsistent use of type assertion 'as any' instead of proper typing This code works but could be improved for better maintainability.",
        "suggestion": "Define proper types for mock elements or use HTMLElement interface",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 11,
        "column": 65,
        "message": "Use of 'any' type reduces type safety",
        "description": "Use of 'any' type reduces type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Define a proper interface for props parameter",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function debugLiquidGlass(componentName: string, props: Record<string, unknown>) {",
          "description": "Define a proper interface for props parameter",
          "content": "export function debugLiquidGlass(componentName: string, props: Record<string, unknown>) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 28,
        "column": 47,
        "message": "Use of 'any' type reduces type safety",
        "description": "Use of 'any' type reduces type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Define a proper interface for props parameter",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function validateLiquidGlassProps(props: Record<string, unknown> & { interactive?: boolean; layered?: boolean; className?: string }, componentName: string) {",
          "description": "Define a proper interface for props parameter",
          "content": "export function validateLiquidGlassProps(props: Record<string, unknown> & { interactive?: boolean; layered?: boolean; className?: string }, componentName: string) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 25,
        "column": 10,
        "message": "Array method 'every' with 'includes' has O(n²) complexity",
        "description": "Array method 'every' with 'includes' has O(n²) complexity This implementation could impact application performance.",
        "suggestion": "Use a Set for O(1) lookups or optimize the class checking logic",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function hasLayeredClasses(className?: string): boolean {\n  if (!className) return false;\n  \n  const requiredClasses = [\n    'liquid-glass-container',\n    'liquid-glass-filter',\n    'liquid-glass-overlay',\n    'liquid-glass-specular'\n  ];\n  \n  const classSet = new Set(className.split(/\\s+/));\n  return requiredClasses.every(cls => classSet.has(cls));\n}",
          "description": "Use a Set for O(1) lookups or optimize the class checking logic",
          "content": "export function hasLayeredClasses(className?: string): boolean {\n  if (!className) return false;\n  \n  const requiredClasses = [\n    'liquid-glass-container',\n    'liquid-glass-filter',\n    'liquid-glass-overlay',\n    'liquid-glass-specular'\n  ];\n  \n  const classSet = new Set(className.split(/\\s+/));\n  return requiredClasses.every(cls => classSet.has(cls));\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 6,
        "column": 39,
        "message": "Missing validation for process.env.NODE_ENV access",
        "description": "Missing validation for process.env.NODE_ENV access This code works but could be improved for better maintainability.",
        "suggestion": "Add null check for process.env.NODE_ENV",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const LIQUID_GLASS_DEBUG = process.env.NODE_ENV === 'development';",
          "description": "Add null check for process.env.NODE_ENV",
          "content": "export const LIQUID_GLASS_DEBUG = process.env.NODE_ENV === 'development';"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 12,
        "column": 4,
        "message": "Console methods should be avoided in production code",
        "description": "Console methods should be avoided in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using a proper logging library instead of console methods",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/liquid-glass-helpers.ts",
        "line": 40,
        "column": 6,
        "message": "Console methods should be avoided in production code",
        "description": "Console methods should be avoided in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using a proper logging library instead of console methods",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 28,
        "column": 7,
        "message": "Function returns null but interface expects ColorRGB | null, however undefined is returned instead",
        "description": "Function returns null but interface expects ColorRGB | null, however undefined is returned instead This will likely cause errors during execution.",
        "suggestion": "Return null instead of undefined to match the declared return type",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    : null;",
          "description": "Return null instead of undefined to match the declared return type",
          "content": "    : null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 42,
        "column": 10,
        "message": "Unnecessary null coalescing operators in luminance calculation as rs, gs, bs cannot be null",
        "description": "Unnecessary null coalescing operators in luminance calculation as rs, gs, bs cannot be null This implementation could impact application performance.",
        "suggestion": "Remove null coalescing operators since the mapped values cannot be null",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;",
          "description": "Remove null coalescing operators since the mapped values cannot be null",
          "content": "  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-wcag-2",
        "type": "wcag",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 82,
        "column": 5,
        "message": "WCAG level 'A' is incorrectly assigned for contrast ratio 3-4.5, which doesn't correspond to actual WCAG conformance levels",
        "description": "WCAG level 'A' is incorrectly assigned for contrast ratio 3-4.5, which doesn't correspond to actual WCAG conformance levels This code works but could be improved for better maintainability.",
        "suggestion": "Remove the 'A' level as it's not a valid WCAG contrast conformance level. Use only AAA, AA, or FAIL",
        "rule": "wcag",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  let level: ContrastResult[\"level\"];\n  if (ratio >= 7) {\n    level = \"AAA\";\n  } else if (ratio >= 4.5) {\n    level = \"AA\";\n  } else {\n    level = \"FAIL\";\n  }",
          "description": "Remove the 'A' level as it's not a valid WCAG contrast conformance level. Use only AAA, AA, or FAIL",
          "content": "  let level: ContrastResult[\"level\"];\n  if (ratio >= 7) {\n    level = \"AAA\";\n  } else if (ratio >= 4.5) {\n    level = \"AA\";\n  } else {\n    level = \"FAIL\";\n  }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 9,
        "column": 24,
        "message": "ContrastResult interface includes 'A' level but WCAG only defines AAA, AA, and failure cases",
        "description": "ContrastResult interface includes 'A' level but WCAG only defines AAA, AA, and failure cases This will likely cause errors during execution.",
        "suggestion": "Remove 'A' from the union type as it's not a valid WCAG conformance level",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  level: \"AAA\" | \"AA\" | \"FAIL\";",
          "description": "Remove 'A' from the union type as it's not a valid WCAG conformance level",
          "content": "  level: \"AAA\" | \"AA\" | \"FAIL\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 174,
        "column": 1,
        "message": "Missing export statements at the end of file",
        "description": "Missing export statements at the end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Add proper export statements for utility functions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Export main functions\nexport { checkContrast, hexToRgb, getLuminance, getContrastRatio };\nexport type { ContrastResult, ColorRGB };",
          "description": "Add proper export statements for utility functions",
          "content": "// Export main functions\nexport { checkContrast, hexToRgb, getLuminance, getContrastRatio };\nexport type { ContrastResult, ColorRGB };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts-error-5",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/utils/contrast-checker.ts",
        "line": 143,
        "column": 9,
        "message": "Type error in _validateColorPalette function - spreading comparedWith property into ContrastResult",
        "description": "Type error in _validateColorPalette function - spreading comparedWith property into ContrastResult This will likely cause errors during execution.",
        "suggestion": "Create a proper extended interface or handle the additional property correctly",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        const contrastResult = checkContrast(color1, color2);\n        results[name1].push({\n          ...contrastResult,\n          comparedWith: name2,\n        } as ContrastResult & { comparedWith: string });",
          "description": "Create a proper extended interface or handle the additional property correctly",
          "content": "        const contrastResult = checkContrast(color1, color2);\n        results[name1].push({\n          ...contrastResult,\n          comparedWith: name2,\n        } as ContrastResult & { comparedWith: string });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 27,
        "column": 3,
        "message": "Interface property lacks JSDoc documentation for consistency",
        "description": "Interface property lacks JSDoc documentation for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /** Whether to show the filter layer */\n  showFilter?: boolean;",
          "description": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
          "content": "  /** Whether to show the filter layer */\n  showFilter?: boolean;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 29,
        "column": 3,
        "message": "Interface property lacks JSDoc documentation for consistency",
        "description": "Interface property lacks JSDoc documentation for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /** Whether to show the overlay layer */\n  showOverlay?: boolean;",
          "description": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
          "content": "  /** Whether to show the overlay layer */\n  showOverlay?: boolean;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 31,
        "column": 3,
        "message": "Interface property lacks JSDoc documentation for consistency",
        "description": "Interface property lacks JSDoc documentation for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /** Whether to show the specular layer */\n  showSpecular?: boolean;",
          "description": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
          "content": "  /** Whether to show the specular layer */\n  showSpecular?: boolean;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 33,
        "column": 3,
        "message": "Interface property lacks JSDoc documentation for consistency",
        "description": "Interface property lacks JSDoc documentation for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /** Custom filter blur amount */\n  filterBlur?: string;",
          "description": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
          "content": "  /** Custom filter blur amount */\n  filterBlur?: string;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 35,
        "column": 3,
        "message": "Interface property lacks JSDoc documentation for consistency",
        "description": "Interface property lacks JSDoc documentation for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  /** Custom overlay opacity */\n  overlayOpacity?: number;",
          "description": "Add JSDoc comments to all interface properties for consistency with existing documentation style",
          "content": "  /** Custom overlay opacity */\n  overlayOpacity?: number;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/liquid-glass.ts",
        "line": 38,
        "column": 1,
        "message": "Interface properties lack JSDoc documentation",
        "description": "Interface properties lack JSDoc documentation This violates code style conventions and may reduce readability.",
        "suggestion": "Add JSDoc comments to all interface properties for consistency and better documentation",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface LiquidGlassTheme {\n  /** Color palette for the liquid glass theme */\n  colors: {\n    /** Background color */\n    background: string;\n    /** Highlight color */\n    highlight: string;\n    /** Text color */\n    text: string;\n    /** Accent color */\n    accent: string;\n    /** Grey color */\n    grey: string;\n  };\n  /** Visual effects configuration */\n  effects: {\n    /** Blur effect strength */\n    blur: string;\n    /** Opacity level */\n    opacity: number;\n    /** CSS transition configuration */\n    transition: string;\n  };\n  /** Shadow effects configuration */\n  shadows: {\n    /** Main shadow effect */\n    main: string;\n    /** Enhanced shadow effect */\n    enhanced: string;\n    /** Specular shadow effect */\n    specular: string;\n  };\n}",
          "description": "Add JSDoc comments to all interface properties for consistency and better documentation",
          "content": "export interface LiquidGlassTheme {\n  /** Color palette for the liquid glass theme */\n  colors: {\n    /** Background color */\n    background: string;\n    /** Highlight color */\n    highlight: string;\n    /** Text color */\n    text: string;\n    /** Accent color */\n    accent: string;\n    /** Grey color */\n    grey: string;\n  };\n  /** Visual effects configuration */\n  effects: {\n    /** Blur effect strength */\n    blur: string;\n    /** Opacity level */\n    opacity: number;\n    /** CSS transition configuration */\n    transition: string;\n  };\n  /** Shadow effects configuration */\n  shadows: {\n    /** Main shadow effect */\n    main: string;\n    /** Enhanced shadow effect */\n    enhanced: string;\n    /** Specular shadow effect */\n    specular: string;\n  };\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 88,
        "column": 7,
        "message": "Function name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Function name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const createCSSUnit = (value: string): CSSUnit => {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const createCSSUnit = (value: string): CSSUnit => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 105,
        "column": 7,
        "message": "Function name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Function name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const createAnimationDuration = (ms: number): AnimationDuration => {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const createAnimationDuration = (ms: number): AnimationDuration => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-2",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 120,
        "column": 7,
        "message": "Function name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Function name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const createZIndex = (value: number): ZIndex => {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const createZIndex = (value: number): ZIndex => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 141,
        "column": 7,
        "message": "Function name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Function name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const createThemeName = (name: string): ThemeName => {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const createThemeName = (name: string): ThemeName => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-4",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 170,
        "column": 7,
        "message": "Object name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Object name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const isBrandedType = {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const isBrandedType = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-naming-5",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 193,
        "column": 7,
        "message": "Object name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Object name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const brandedUtils = {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const brandedUtils = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-bug-6",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 143,
        "column": 23,
        "message": "Type assertion 'as unknown' used to bypass type checking in includes() call",
        "description": "Type assertion 'as unknown' used to bypass type checking in includes() call This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking instead of 'as unknown' assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  if (!(VALID_THEMES as readonly string[]).includes(name)) {",
          "description": "Use proper type checking instead of 'as unknown' assertion",
          "content": "  if (!(VALID_THEMES as readonly string[]).includes(name)) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-bug-7",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 159,
        "column": 23,
        "message": "Type assertion 'as unknown' used to bypass type checking in includes() call",
        "description": "Type assertion 'as unknown' used to bypass type checking in includes() call This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking instead of 'as unknown' assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  if (!(VALID_SIZES as readonly string[]).includes(size)) {",
          "description": "Use proper type checking instead of 'as unknown' assertion",
          "content": "  if (!(VALID_SIZES as readonly string[]).includes(size)) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-bug-8",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 186,
        "column": 65,
        "message": "Type assertion 'as unknown' used to bypass type checking in includes() call",
        "description": "Type assertion 'as unknown' used to bypass type checking in includes() call This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking instead of 'as unknown' assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    typeof value === \"string\" && (VALID_THEMES as readonly string[]).includes(value),",
          "description": "Use proper type checking instead of 'as unknown' assertion",
          "content": "    typeof value === \"string\" && (VALID_THEMES as readonly string[]).includes(value),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-bug-9",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 189,
        "column": 64,
        "message": "Type assertion 'as unknown' used to bypass type checking in includes() call",
        "description": "Type assertion 'as unknown' used to bypass type checking in includes() call This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking instead of 'as unknown' assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    typeof value === \"string\" && (VALID_SIZES as readonly string[]).includes(value),",
          "description": "Use proper type checking instead of 'as unknown' assertion",
          "content": "    typeof value === \"string\" && (VALID_SIZES as readonly string[]).includes(value),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-structure-10",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 88,
        "column": 1,
        "message": "Many functions and objects are prefixed with underscore but not exported, making them inaccessible",
        "description": "Many functions and objects are prefixed with underscore but not exported, making them inaccessible This code works but could be improved for better maintainability.",
        "suggestion": "Export useful functions or remove underscore prefix to make them accessible",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-performance-11",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 23,
        "column": 3,
        "message": "Regex patterns are recreated on every function call",
        "description": "Regex patterns are recreated on every function call This implementation could impact application performance.",
        "suggestion": "Move regex patterns outside function to avoid recreation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const COLOR_PATTERNS = [\n  /^#[\\dA-Fa-f]{3}$/, // #RGB\n  /^#[\\dA-Fa-f]{6}$/, // #RRGGBB\n  /^#[\\dA-Fa-f]{8}$/, // #RRGGBBAA\n  /^rgb\\((?:\\s*\\d+\\s*,){2}\\s*\\d+\\s*\\)$/,\n  /^rgba\\((?:\\s*\\d+\\s*,){3}\\s*[\\d.]+\\s*\\)$/,\n  /^hsl\\(\\s*\\d+(?:\\s*,\\s*\\d+%?){2}\\s*\\)$/,\n  /^hsla\\(\\s*\\d+(?:\\s*,\\s*\\d+%?){2}\\s*,\\s*[\\d.]+\\s*\\)$/,\n];\n\nfunction isValidGlassColor(color: string): boolean {\n  return COLOR_PATTERNS.some((pattern) => pattern.test(color));\n}",
          "description": "Move regex patterns outside function to avoid recreation",
          "content": "const COLOR_PATTERNS = [\n  /^#[\\dA-Fa-f]{3}$/, // #RGB\n  /^#[\\dA-Fa-f]{6}$/, // #RRGGBB\n  /^#[\\dA-Fa-f]{8}$/, // #RRGGBBAA\n  /^rgb\\((?:\\s*\\d+\\s*,){2}\\s*\\d+\\s*\\)$/,\n  /^rgba\\((?:\\s*\\d+\\s*,){3}\\s*[\\d.]+\\s*\\)$/,\n  /^hsl\\(\\s*\\d+(?:\\s*,\\s*\\d+%?){2}\\s*\\)$/,\n  /^hsla\\(\\s*\\d+(?:\\s*,\\s*\\d+%?){2}\\s*,\\s*[\\d.]+\\s*\\)$/,\n];\n\nfunction isValidGlassColor(color: string): boolean {\n  return COLOR_PATTERNS.some((pattern) => pattern.test(color));\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts-performance-12",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/types/branded.ts",
        "line": 93,
        "column": 3,
        "message": "Regex pattern is recreated on every function call",
        "description": "Regex pattern is recreated on every function call This implementation could impact application performance.",
        "suggestion": "Move regex pattern outside function to avoid recreation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const CSS_UNIT_PATTERN = /^-?\\d*\\.?\\d+(px|em|rem|%|vh|vw|vmin|vmax|ch|ex|cm|mm|in|pt|pc)$/;\n\nfunction isValidCSSUnit(value: string): boolean {\n  return CSS_UNIT_PATTERN.test(value) || value === \"0\" || value === \"auto\";\n}",
          "description": "Move regex pattern outside function to avoid recreation",
          "content": "const CSS_UNIT_PATTERN = /^-?\\d*\\.?\\d+(px|em|rem|%|vh|vw|vmin|vmax|ch|ex|cm|mm|in|pt|pc)$/;\n\nfunction isValidCSSUnit(value: string): boolean {\n  return CSS_UNIT_PATTERN.test(value) || value === \"0\" || value === \"auto\";\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind.css-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind.css",
        "line": 4,
        "column": 25,
        "message": "File should end with a newline character",
        "description": "File should end with a newline character This violates code style conventions and may reduce readability.",
        "suggestion": "Add a newline character at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/* Tailwind's three layers — keep this file tiny */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",
          "description": "Add a newline character at the end of the file",
          "content": "/* Tailwind's three layers — keep this file tiny */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css-structure-0",
        "type": "structure",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css",
        "line": 225,
        "column": 1,
        "message": "Entire file content is duplicated",
        "description": "Entire file content is duplicated This will likely cause errors during execution.",
        "suggestion": "Remove the duplicated content starting from line 225",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove the duplicated content starting from line 225"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css-structure-1",
        "type": "structure",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css",
        "line": 225,
        "column": 1,
        "message": "Duplicate @import statement for tailwindcss",
        "description": "Duplicate @import statement for tailwindcss This will likely cause errors during execution.",
        "suggestion": "Remove duplicate @import statement",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove duplicate @import statement"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css",
        "line": 147,
        "column": 9,
        "message": "Hardcoded color value should use CSS custom property for consistency",
        "description": "Hardcoded color value should use CSS custom property for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Define a CSS custom property for the white color to maintain consistency with the design system",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  color: var(--color-glass-text, #ffffff);",
          "description": "Define a CSS custom property for the white color to maintain consistency with the design system",
          "content": "  color: var(--color-glass-text, #ffffff);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css",
        "line": 9,
        "column": 3,
        "message": "Multiple CSS custom properties defined but spacing variables are unused",
        "description": "Multiple CSS custom properties defined but spacing variables are unused This implementation could impact application performance.",
        "suggestion": "Consider removing unused spacing variables or create utilities to use them",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/tailwind-v4-config.css",
        "line": 194,
        "column": 5,
        "message": "Focus styles may not meet WCAG contrast requirements",
        "description": "Focus styles may not meet WCAG contrast requirements This code works but could be improved for better maintainability.",
        "suggestion": "Ensure focus ring colors meet WCAG AA contrast ratio requirements (3:1 minimum)",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 579,
        "column": 1,
        "message": "Duplicate CSS rules for accessibility - media queries and selectors are repeated",
        "description": "Duplicate CSS rules for accessibility - media queries and selectors are repeated This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate accessibility rules that are already defined earlier in the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove duplicate accessibility rules that are already defined earlier in the file"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 565,
        "column": 1,
        "message": "Duplicate will-change and transform properties block",
        "description": "Duplicate will-change and transform properties block This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate performance optimization rules",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove duplicate performance optimization rules"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 237,
        "column": 1,
        "message": "Missing ARIA attributes for interactive elements",
        "description": "Missing ARIA attributes for interactive elements This code works but could be improved for better maintainability.",
        "suggestion": "Add role and aria-label attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 146,
        "column": 5,
        "message": "Multiple backdrop-filter and filter properties may cause performance issues on low-end devices",
        "description": "Multiple backdrop-filter and filter properties may cause performance issues on low-end devices This implementation could impact application performance.",
        "suggestion": "Consider adding a reduced-effects mode or performance optimization for mobile devices",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 17,
        "column": 3,
        "message": "Inconsistent naming convention - mix of kebab-case and camelCase in CSS custom properties",
        "description": "Inconsistent naming convention - mix of kebab-case and camelCase in CSS custom properties This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent kebab-case naming for all CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 413,
        "column": 11,
        "message": "Color contrast may not meet WCAG AA standards for rgba(255, 255, 255, 0.6) text",
        "description": "Color contrast may not meet WCAG AA standards for rgba(255, 255, 255, 0.6) text This code works but could be improved for better maintainability.",
        "suggestion": "Ensure text colors meet WCAG contrast ratio requirements (4.5:1 for normal text)",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/liquid-glass.css",
        "line": 176,
        "column": 13,
        "message": "Magic numbers used for padding and spacing values",
        "description": "Magic numbers used for padding and spacing values This violates code style conventions and may reduce readability.",
        "suggestion": "Replace magic numbers with CSS custom properties for consistency",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    padding: var(--lg-bento-padding);",
          "description": "Replace magic numbers with CSS custom properties for consistency",
          "content": "    padding: var(--lg-bento-padding);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 31,
        "column": 1,
        "message": "Removing all focus outlines is an accessibility violation that makes navigation impossible for keyboard users",
        "description": "Removing all focus outlines is an accessibility violation that makes navigation impossible for keyboard users This will likely cause errors during execution.",
        "suggestion": "Remove the blanket outline removal and rely on :focus-visible for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/* Focus Management - removed blanket outline removal for accessibility */",
          "description": "Remove the blanket outline removal and rely on :focus-visible for better accessibility",
          "content": "/* Focus Management - removed blanket outline removal for accessibility */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 35,
        "column": 19,
        "message": "CSS custom properties are referenced but not defined in this file, which could cause fallback issues",
        "description": "CSS custom properties are referenced but not defined in this file, which could cause fallback issues This implementation could impact application performance.",
        "suggestion": "Define fallback values for CSS custom properties or ensure liquid-glass.css is always loaded",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    outline: 2px solid var(--lg-accent, #0066cc);",
          "description": "Define fallback values for CSS custom properties or ensure liquid-glass.css is always loaded",
          "content": "    outline: 2px solid var(--lg-accent, #0066cc);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 42,
        "column": 16,
        "message": "CSS custom property without fallback value",
        "description": "CSS custom property without fallback value This implementation could impact application performance.",
        "suggestion": "Provide fallback value for better browser compatibility",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    background: var(--lg-accent, #0066cc);",
          "description": "Provide fallback value for better browser compatibility",
          "content": "    background: var(--lg-accent, #0066cc);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 58,
        "column": 16,
        "message": "CSS custom property without fallback value",
        "description": "CSS custom property without fallback value This implementation could impact application performance.",
        "suggestion": "Provide fallback value for better browser compatibility",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    background: var(--lg-grey, #cccccc);",
          "description": "Provide fallback value for better browser compatibility",
          "content": "    background: var(--lg-grey, #cccccc);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 63,
        "column": 16,
        "message": "CSS custom property without fallback value",
        "description": "CSS custom property without fallback value This implementation could impact application performance.",
        "suggestion": "Provide fallback value for better browser compatibility",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    background: var(--lg-accent, #0066cc);",
          "description": "Provide fallback value for better browser compatibility",
          "content": "    background: var(--lg-accent, #0066cc);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 67,
        "column": 1,
        "message": "Large number of atomic utility classes can lead to CSS bloat and maintenance issues",
        "description": "Large number of atomic utility classes can lead to CSS bloat and maintenance issues This implementation could impact application performance.",
        "suggestion": "Consider using a CSS framework like Tailwind CSS or reduce the number of utility classes by using more semantic CSS",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/index.css",
        "line": 230,
        "column": 1,
        "message": "Magic numbers used for spacing values - consider using CSS custom properties for consistency",
        "description": "Magic numbers used for spacing values - consider using CSS custom properties for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Define spacing scale using CSS custom properties at the root level",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  padding-bottom: 8px;",
          "description": "Define spacing scale using CSS custom properties at the root level",
          "content": "  padding-bottom: 8px;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 67,
        "column": 5,
        "message": "Focus outline should not be removed with outline: none without providing alternative focus indicators",
        "description": "Focus outline should not be removed with outline: none without providing alternative focus indicators This code works but could be improved for better maintainability.",
        "suggestion": "Remove outline: none or ensure proper focus indicators are always visible",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 15,
        "column": 5,
        "message": "Complex backdrop-filter and box-shadow combinations may cause performance issues on lower-end devices",
        "description": "Complex backdrop-filter and box-shadow combinations may cause performance issues on lower-end devices This implementation could impact application performance.",
        "suggestion": "Consider using CSS containment or will-change property for better performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    will-change: backdrop-filter, box-shadow;\n    contain: layout style paint;\n    backdrop-filter: var(--lg-filter-blur) saturate(150%) brightness(1.2);\n    background: rgba(255, 255, 255, 0.15);\n    border: 1px solid var(--lg-highlight);\n    box-shadow: var(--lg-shadow-main), var(--lg-specular-shadow);",
          "description": "Consider using CSS containment or will-change property for better performance",
          "content": "    will-change: backdrop-filter, box-shadow;\n    contain: layout style paint;\n    backdrop-filter: var(--lg-filter-blur) saturate(150%) brightness(1.2);\n    background: rgba(255, 255, 255, 0.15);\n    border: 1px solid var(--lg-highlight);\n    box-shadow: var(--lg-shadow-main), var(--lg-specular-shadow);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 193,
        "column": 1,
        "message": "Color-based states (success, error, warning) should include non-color indicators for colorblind users",
        "description": "Color-based states (success, error, warning) should include non-color indicators for colorblind users This code works but could be improved for better maintainability.",
        "suggestion": "Add icons or text labels to indicate state in addition to color changes",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 20,
        "column": 1,
        "message": "Pseudo-element ::after creates additional layers which may impact performance",
        "description": "Pseudo-element ::after creates additional layers which may impact performance This implementation could impact application performance.",
        "suggestion": "Consider using CSS masks or single background gradients where possible",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 160,
        "column": 1,
        "message": "Shimmer animation may trigger vestibular disorders even with reduced motion preferences",
        "description": "Shimmer animation may trigger vestibular disorders even with reduced motion preferences This code works but could be improved for better maintainability.",
        "suggestion": "Disable shimmer animation in reduced motion mode",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/* Respect user's motion preferences */\n@media (prefers-reduced-motion: reduce) {\n    .liquid-glass-core-pulse,\n    .liquid-glass-core-breathe,\n    .liquid-glass-core-loading::before {\n        animation: none;\n    }\n\n    .liquid-glass-core-loading::before {\n        display: none;\n    }\n\n    .liquid-glass-core-hover:hover,\n    .liquid-glass-core-active:active {\n        transform: none;\n        transition: none;\n    }\n}",
          "description": "Disable shimmer animation in reduced motion mode",
          "content": "/* Respect user's motion preferences */\n@media (prefers-reduced-motion: reduce) {\n    .liquid-glass-core-pulse,\n    .liquid-glass-core-breathe,\n    .liquid-glass-core-loading::before {\n        animation: none;\n    }\n\n    .liquid-glass-core-loading::before {\n        display: none;\n    }\n\n    .liquid-glass-core-hover:hover,\n    .liquid-glass-core-active:active {\n        transform: none;\n        transition: none;\n    }\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/styles/glass-core.css",
        "line": 39,
        "column": 9,
        "message": "Magic numbers used for opacity and transform values should be defined as CSS custom properties",
        "description": "Magic numbers used for opacity and transform values should be defined as CSS custom properties This violates code style conventions and may reduce readability.",
        "suggestion": "Define reusable custom properties for animation values",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx",
        "line": 38,
        "column": 7,
        "message": "Context validation check is incorrect - context will never be null since it has a default value",
        "description": "Context validation check is incorrect - context will never be null since it has a default value This code works but could be improved for better maintainability.",
        "suggestion": "Remove the null check or create context without default value and handle undefined case properly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function useGlobalConfig() {\n  const context = useContext(GlobalConfigContext);\n  return context;\n}",
          "description": "Remove the null check or create context without default value and handle undefined case properly",
          "content": "function useGlobalConfig() {\n  const context = useContext(GlobalConfigContext);\n  return context;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx-architecture-1",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx",
        "line": 36,
        "column": 1,
        "message": "Hook is not exported, making it unusable by consumers of this provider",
        "description": "Hook is not exported, making it unusable by consumers of this provider This code works but could be improved for better maintainability.",
        "suggestion": "Export the useGlobalConfig hook so it can be used by components",
        "rule": "architecture",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useGlobalConfig() {\n  const context = useContext(GlobalConfigContext);\n  return context;\n}",
          "description": "Export the useGlobalConfig hook so it can be used by components",
          "content": "export function useGlobalConfig() {\n  const context = useContext(GlobalConfigContext);\n  return context;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/global-config-provider.tsx",
        "line": 3,
        "column": 1,
        "message": "Configuration has both enableA11y and specific accessibility options (reducedMotion, highContrast) which could lead to conflicting states",
        "description": "Configuration has both enableA11y and specific accessibility options (reducedMotion, highContrast) which could lead to conflicting states This code works but could be improved for better maintainability.",
        "suggestion": "Consider restructuring to have accessibility options nested under an a11y object or remove the general enableA11y flag",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx",
        "line": 5,
        "column": 10,
        "message": "Component name starts with underscore, indicating private/internal use but used as public API",
        "description": "Component name starts with underscore, indicating private/internal use but used as public API This code works but could be improved for better maintainability.",
        "suggestion": "Consider using a proper public name without underscore prefix or mark it as internal if it's not meant for public use",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx",
        "line": 45,
        "column": 15,
        "message": "Component name starts with underscore, indicating private/internal use but used as public API",
        "description": "Component name starts with underscore, indicating private/internal use but used as public API This code works but could be improved for better maintainability.",
        "suggestion": "Consider using a proper public name without underscore prefix",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/glass-ui-provider.tsx",
        "line": 32,
        "column": 1,
        "message": "No validation for configuration objects passed to providers",
        "description": "No validation for configuration objects passed to providers This code works but could be improved for better maintainability.",
        "suggestion": "Add runtime validation for glassConfig and hapticConfig to ensure they contain valid values and prevent runtime errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx-convention-0",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx",
        "line": 40,
        "column": 1,
        "message": "Inconsistent export pattern - using default export with named export alias",
        "description": "Inconsistent export pattern - using default export with named export alias This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent export pattern - either export as default directly or use named exports",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export default ConfigProvider;",
          "description": "Use consistent export pattern - either export as default directly or use named exports",
          "content": "export default ConfigProvider;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx",
        "line": 43,
        "column": 7,
        "message": "Unused variable - LiquidifyProvider is declared but never used",
        "description": "Unused variable - LiquidifyProvider is declared but never used This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused variable or export it if it's meant to be used externally",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const LiquidifyProvider = ConfigProvider;",
          "description": "Remove unused variable or export it if it's meant to be used externally",
          "content": "export const LiquidifyProvider = ConfigProvider;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/providers/config-provider.tsx",
        "line": 21,
        "column": 1,
        "message": "No error boundaries or error handling for provider composition",
        "description": "No error boundaries or error handling for provider composition This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding error boundaries to handle potential provider initialization failures",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts-design-pattern-0",
        "type": "design-pattern",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts",
        "line": 14,
        "column": 1,
        "message": "Type definition issue: VariantProps type may not correctly extract variant keys for complex variant objects",
        "description": "Type definition issue: VariantProps type may not correctly extract variant keys for complex variant objects This code works but could be improved for better maintainability.",
        "suggestion": "The VariantProps type doesn't properly handle the case where T is the result of createVariants function. Consider using a more robust type definition.",
        "rule": "design-pattern",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts-design-pattern-1",
        "type": "design-pattern",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts",
        "line": 22,
        "column": 1,
        "message": "Redundant variant definitions: Both ComponentVariants and GlassVariants define similar properties, and intensity/blur serve similar purposes",
        "description": "Redundant variant definitions: Both ComponentVariants and GlassVariants define similar properties, and intensity/blur serve similar purposes This code works but could be improved for better maintainability.",
        "suggestion": "Consider consolidating blur and intensity properties or clearly differentiate their purposes to avoid confusion",
        "rule": "design-pattern",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts",
        "line": 79,
        "column": 1,
        "message": "Type mismatch: GlassVariantProps type refers to glassVariants but VariantProps expects the variants config object, not the function result",
        "description": "Type mismatch: GlassVariantProps type refers to glassVariants but VariantProps expects the variants config object, not the function result This will likely cause errors during execution.",
        "suggestion": "Define GlassVariantProps based on the variants config object passed to createVariants",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type GlassVariantProps = VariantProps<{\n  variant: {\n    default: string;\n    primary: string;\n    secondary: string;\n    destructive: string;\n    outline: string;\n    ghost: string;\n    link: string;\n  };\n  size: {\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  intensity: {\n    subtle: string;\n    medium: string;\n    strong: string;\n    extreme: string;\n  };\n  blur: {\n    none: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n}>;",
          "description": "Define GlassVariantProps based on the variants config object passed to createVariants",
          "content": "export type GlassVariantProps = VariantProps<{\n  variant: {\n    default: string;\n    primary: string;\n    secondary: string;\n    destructive: string;\n    outline: string;\n    ghost: string;\n    link: string;\n  };\n  size: {\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  intensity: {\n    subtle: string;\n    medium: string;\n    strong: string;\n    extreme: string;\n  };\n  blur: {\n    none: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n}>;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/lib/variant-system.ts",
        "line": 43,
        "column": 5,
        "message": "Potential performance issue: Object.entries creates new array on each call in createVariants function",
        "description": "Potential performance issue: Object.entries creates new array on each call in createVariants function This implementation could impact application performance.",
        "suggestion": "Consider caching the entries or using a more efficient iteration method for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 164,
        "column": 7,
        "message": "Infinite recursion: setTheme function calls itself instead of the state setter",
        "description": "Infinite recursion: setTheme function calls itself instead of the state setter This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Rename the parameter to avoid shadowing the state setter function",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    setTheme: (newTheme: Theme) => {\n      try {\n        if (typeof window !== \"undefined\" && window.localStorage) {\n          localStorage.setItem(storageKey, newTheme);\n        }\n      } catch {\n        // Logging disabled\n      }\n      setTheme(newTheme);\n    },",
          "description": "Rename the parameter to avoid shadowing the state setter function",
          "content": "    setTheme: (newTheme: Theme) => {\n      try {\n        if (typeof window !== \"undefined\" && window.localStorage) {\n          localStorage.setItem(storageKey, newTheme);\n        }\n      } catch {\n        // Logging disabled\n      }\n      setTheme(newTheme);\n    },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 52,
        "column": 5,
        "message": "Large object recreation on every render in useEffect",
        "description": "Large object recreation on every render in useEffect This implementation could impact application performance.",
        "suggestion": "Move themeProperties object outside the component or memoize it to avoid recreation on every theme change",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 146,
        "column": 7,
        "message": "Potentially expensive DOM manipulation on every theme change",
        "description": "Potentially expensive DOM manipulation on every theme change This implementation could impact application performance.",
        "suggestion": "Consider memoizing or optimizing the body className manipulation",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 151,
        "column": 5,
        "message": "Console.log statement should be removed in production code",
        "description": "Console.log statement should be removed in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Remove console.log or wrap it in a development-only condition",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    if (process.env.NODE_ENV === 'development') {\n      console.log(`🎨 Theme applied: ${theme}`, {\n        properties: Object.keys(themeProperties).length,\n        dataTheme: root.dataset.theme,\n      });\n    }",
          "description": "Remove console.log or wrap it in a development-only condition",
          "content": "    if (process.env.NODE_ENV === 'development') {\n      console.log(`🎨 Theme applied: ${theme}`, {\n        properties: Object.keys(themeProperties).length,\n        dataTheme: root.dataset.theme,\n      });\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 31,
        "column": 5,
        "message": "Silent error handling without any logging or fallback mechanism",
        "description": "Silent error handling without any logging or fallback mechanism This code works but could be improved for better maintainability.",
        "suggestion": "Consider logging errors in development or providing better error handling",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-theme.tsx",
        "line": 161,
        "column": 7,
        "message": "Silent error handling without any logging or fallback mechanism",
        "description": "Silent error handling without any logging or fallback mechanism This code works but could be improved for better maintainability.",
        "suggestion": "Consider logging errors in development or providing better error handling",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 149,
        "column": 9,
        "message": "useRef value is assigned but never used",
        "description": "useRef value is assigned but never used This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove unused variable or use it appropriately",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 45,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeDocument",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeDocument"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 62,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeNavigator",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeNavigator"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 82,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeLocalStorage",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeLocalStorage"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 124,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeSessionStorage",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeSessionStorage"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 166,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useHydrationSafe",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useHydrationSafe"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 188,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeMediaQuery",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeMediaQuery"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 210,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useNetworkStatus",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useNetworkStatus"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 266,
        "column": 1,
        "message": "Inconsistent function exports - some functions are not exported",
        "description": "Inconsistent function exports - some functions are not exported This violates code style conventions and may reduce readability.",
        "suggestion": "Export all utility functions or make them consistently private",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useSSRSafeAnimation",
          "description": "Export all utility functions or make them consistently private",
          "content": "export function useSSRSafeAnimation"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 25,
        "column": 5,
        "message": "Missing dependency in useEffect - selector function should be memoized to prevent unnecessary re-renders",
        "description": "Missing dependency in useEffect - selector function should be memoized to prevent unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Use useCallback for selector function or add proper dependencies",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Use useCallback for selector function or add proper dependencies",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-security-10",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 239,
        "column": 7,
        "message": "Type casting 'unknown' without proper type checking could lead to runtime errors",
        "description": "Type casting 'unknown' without proper type checking could lead to runtime errors This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Add proper type guards for connection object",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-bug-11",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 106,
        "column": 9,
        "message": "Stale closure issue - setValue function captures isClient value at creation time",
        "description": "Stale closure issue - setValue function captures isClient value at creation time This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move setValue function inside useCallback or check isClient inside the function",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const setValue = useCallback((value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to localStorage if client-side\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch {\n      // Logging disabled\n    }\n  }, [key]);",
          "description": "Move setValue function inside useCallback or check isClient inside the function",
          "content": "  const setValue = useCallback((value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to localStorage if client-side\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch {\n      // Logging disabled\n    }\n  }, [key]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts-bug-12",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe.ts",
        "line": 148,
        "column": 9,
        "message": "Stale closure issue - setValue function captures isClient value at creation time",
        "description": "Stale closure issue - setValue function captures isClient value at creation time This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move setValue function inside useCallback or check isClient inside the function",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const setValue = useCallback((value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to sessionStorage if client-side\n      if (typeof window !== \"undefined\") {\n        sessionStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch {\n      // Logging disabled\n    }\n  }, [key]);",
          "description": "Move setValue function inside useCallback or check isClient inside the function",
          "content": "  const setValue = useCallback((value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to sessionStorage if client-side\n      if (typeof window !== \"undefined\") {\n        sessionStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch {\n      // Logging disabled\n    }\n  }, [key]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 7,
        "column": 31,
        "message": "Test functions with underscore prefix suggest they may be private/internal APIs that shouldn't be tested directly",
        "description": "Test functions with underscore prefix suggest they may be private/internal APIs that shouldn't be tested directly This code works but could be improved for better maintainability.",
        "suggestion": "Consider testing public APIs instead of private/internal functions, or remove underscore prefix if these are meant to be public",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 42,
        "column": 16,
        "message": "Testing function.length property is unreliable for functions with default parameters or rest parameters",
        "description": "Testing function.length property is unreliable for functions with default parameters or rest parameters This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use TypeScript type checking or mock the function to test parameter requirements instead of relying on function.length",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 49,
        "column": 16,
        "message": "Testing function.length property is unreliable for functions with default parameters or rest parameters",
        "description": "Testing function.length property is unreliable for functions with default parameters or rest parameters This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use TypeScript type checking or mock the function to test parameter requirements instead of relying on function.length",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 56,
        "column": 16,
        "message": "Testing function.length property is unreliable for functions with default parameters or rest parameters",
        "description": "Testing function.length property is unreliable for functions with default parameters or rest parameters This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use TypeScript type checking or mock the function to test parameter requirements instead of relying on function.length",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 63,
        "column": 16,
        "message": "Testing function.length property is unreliable for functions with default parameters or rest parameters",
        "description": "Testing function.length property is unreliable for functions with default parameters or rest parameters This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use TypeScript type checking or mock the function to test parameter requirements instead of relying on function.length",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.validation.test.ts",
        "line": 40,
        "column": 7,
        "message": "Redundant test structure - the inner expect and function assignment don't add meaningful validation",
        "description": "Redundant test structure - the inner expect and function assignment don't add meaningful validation This violates code style conventions and may reduce readability.",
        "suggestion": "Simplify test to directly check function.length or use more meaningful validation approach",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    it(\"_useMediaQuery should accept string parameter\", () => {\n      // This test validates the function can be called with correct signature\n      // The actual execution would require DOM environment\n      expect(hooks._useMediaQuery.length).toBe(1); // Should accept 1 parameter\n    });",
          "description": "Simplify test to directly check function.length or use more meaningful validation approach",
          "content": "    it(\"_useMediaQuery should accept string parameter\", () => {\n      // This test validates the function can be called with correct signature\n      // The actual execution would require DOM environment\n      expect(hooks._useMediaQuery.length).toBe(1); // Should accept 1 parameter\n    });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts",
        "line": 17,
        "column": 7,
        "message": "useEffect dependency array missing callback dependency - could cause stale closures",
        "description": "useEffect dependency array missing callback dependency - could cause stale closures This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add callback to dependency array or wrap callback in useCallback",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const _useSSRSafe = (callback: () => void, deps: Array<unknown>) => {\n  const memoizedCallback = useCallback(callback, [callback]);\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      memoizedCallback();\n    }\n  }, [memoizedCallback, ...deps]);\n};",
          "description": "Add callback to dependency array or wrap callback in useCallback",
          "content": "const _useSSRSafe = (callback: () => void, deps: Array<unknown>) => {\n  const memoizedCallback = useCallback(callback, [callback]);\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      memoizedCallback();\n    }\n  }, [memoizedCallback, ...deps]);\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts",
        "line": 24,
        "column": 67,
        "message": "IntersectionObserver options object causes unnecessary re-renders due to object reference equality",
        "description": "IntersectionObserver options object causes unnecessary re-renders due to object reference equality This implementation could impact application performance.",
        "suggestion": "Memoize options object or use individual option values as dependencies",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const _useIntersectionObserver = <T extends HTMLElement>(\n  callback?: (entry: IntersectionObserverEntry) => void,\n  options: IntersectionObserverInit = {},\n): [React.RefObject<T>, IntersectionObserverEntry | null] => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry | null>(null);\n  const elementRef = useRef<T>(null);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  const memoizedCallback = useCallback((entry: IntersectionObserverEntry) => {\n    if (callback) {\n      callback(entry);\n    }\n  }, [callback]);\n\n  const memoizedOptions = useMemo(() => options, [options.root, options.rootMargin, options.threshold]);\n\n  useEffect(() => {\n    // Only run on client side\n    if (typeof window === \"undefined\" || !window.IntersectionObserver) {\n      return;\n    }\n\n    try {\n      // Cleanup previous observer\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      // Create new observer\n      observerRef.current = new IntersectionObserver((entries) => {\n        try {\n          const [firstEntry] = entries;\n          if (firstEntry) {\n            setEntry(firstEntry);\n            memoizedCallback(firstEntry);\n          }\n        } catch (error) {\n          console.warn(\"Error in intersection observer callback:\", error);\n        }\n      }, memoizedOptions);\n\n      // Observe element if it exists\n      const element = elementRef.current;\n      if (element) {\n        observerRef.current.observe(element);\n      }\n\n      // Cleanup on unmount\n      return () => {\n        try {\n          if (observerRef.current) {\n            observerRef.current.disconnect();\n          }\n        } catch (error) {\n          console.warn(\"Error disconnecting intersection observer:\", error);\n        }\n      };\n    } catch (error) {\n      console.warn(\"Error in useIntersectionObserver:\", error);\n      return;\n    }\n  }, [memoizedCallback, memoizedOptions]);\n\n  return [elementRef, entry];\n};",
          "description": "Memoize options object or use individual option values as dependencies",
          "content": "const _useIntersectionObserver = <T extends HTMLElement>(\n  callback?: (entry: IntersectionObserverEntry) => void,\n  options: IntersectionObserverInit = {},\n): [React.RefObject<T>, IntersectionObserverEntry | null] => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry | null>(null);\n  const elementRef = useRef<T>(null);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  const memoizedCallback = useCallback((entry: IntersectionObserverEntry) => {\n    if (callback) {\n      callback(entry);\n    }\n  }, [callback]);\n\n  const memoizedOptions = useMemo(() => options, [options.root, options.rootMargin, options.threshold]);\n\n  useEffect(() => {\n    // Only run on client side\n    if (typeof window === \"undefined\" || !window.IntersectionObserver) {\n      return;\n    }\n\n    try {\n      // Cleanup previous observer\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      // Create new observer\n      observerRef.current = new IntersectionObserver((entries) => {\n        try {\n          const [firstEntry] = entries;\n          if (firstEntry) {\n            setEntry(firstEntry);\n            memoizedCallback(firstEntry);\n          }\n        } catch (error) {\n          console.warn(\"Error in intersection observer callback:\", error);\n        }\n      }, memoizedOptions);\n\n      // Observe element if it exists\n      const element = elementRef.current;\n      if (element) {\n        observerRef.current.observe(element);\n      }\n\n      // Cleanup on unmount\n      return () => {\n        try {\n          if (observerRef.current) {\n            observerRef.current.disconnect();\n          }\n        } catch (error) {\n          console.warn(\"Error disconnecting intersection observer:\", error);\n        }\n      };\n    } catch (error) {\n      console.warn(\"Error in useIntersectionObserver:\", error);\n      return;\n    }\n  }, [memoizedCallback, memoizedOptions]);\n\n  return [elementRef, entry];\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts",
        "line": 1,
        "column": 1,
        "message": "Missing import for useMemo hook",
        "description": "Missing import for useMemo hook This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add useMemo to the React imports",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n} from \"react\";",
          "description": "Add useMemo to the React imports",
          "content": "import {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n} from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts",
        "line": 221,
        "column": 30,
        "message": "Hardcoded return values make hooks non-functional and potentially misleading",
        "description": "Hardcoded return values make hooks non-functional and potentially misleading This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Implement proper SSR-safe logic for these hooks",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const _useOnlineStatus = () => {\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || typeof navigator === \"undefined\") {\n      return;\n    }\n\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine ?? true);\n    };\n\n    updateOnlineStatus();\n    window.addEventListener(\"online\", updateOnlineStatus);\n    window.addEventListener(\"offline\", updateOnlineStatus);\n\n    return () => {\n      window.removeEventListener(\"online\", updateOnlineStatus);\n      window.removeEventListener(\"offline\", updateOnlineStatus);\n    };\n  }, []);\n\n  return isOnline;\n};\n\nconst _usePageVisibility = () => {\n  const [visibility, setVisibility] = useState<\"visible\" | \"hidden\">(\"visible\");\n\n  useEffect(() => {\n    if (typeof document === \"undefined\") {\n      return;\n    }\n\n    const handleVisibilityChange = () => {\n      setVisibility(document.hidden ? \"hidden\" : \"visible\");\n    };\n\n    handleVisibilityChange();\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n\n  return visibility;\n};\n\nconst _usePerformanceMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    loadTime: 0,\n    renderTime: 0,\n    domContentLoaded: 0,\n    firstPaint: 0,\n    firstContentfulPaint: 0,\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || !window.performance) {\n      return;\n    }\n\n    const navigation = window.performance.getEntriesByType(\"navigation\")[0] as PerformanceNavigationTiming;\n    const paint = window.performance.getEntriesByType(\"paint\");\n\n    if (navigation) {\n      setMetrics({\n        loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n        renderTime: navigation.domComplete - navigation.domLoading,\n        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n        firstPaint: paint.find(p => p.name === \"first-paint\")?.startTime || 0,\n        firstContentfulPaint: paint.find(p => p.name === \"first-contentful-paint\")?.startTime || 0,\n      });\n    }\n  }, []);\n\n  return metrics;\n};",
          "description": "Implement proper SSR-safe logic for these hooks",
          "content": "const _useOnlineStatus = () => {\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || typeof navigator === \"undefined\") {\n      return;\n    }\n\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine ?? true);\n    };\n\n    updateOnlineStatus();\n    window.addEventListener(\"online\", updateOnlineStatus);\n    window.addEventListener(\"offline\", updateOnlineStatus);\n\n    return () => {\n      window.removeEventListener(\"online\", updateOnlineStatus);\n      window.removeEventListener(\"offline\", updateOnlineStatus);\n    };\n  }, []);\n\n  return isOnline;\n};\n\nconst _usePageVisibility = () => {\n  const [visibility, setVisibility] = useState<\"visible\" | \"hidden\">(\"visible\");\n\n  useEffect(() => {\n    if (typeof document === \"undefined\") {\n      return;\n    }\n\n    const handleVisibilityChange = () => {\n      setVisibility(document.hidden ? \"hidden\" : \"visible\");\n    };\n\n    handleVisibilityChange();\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n\n  return visibility;\n};\n\nconst _usePerformanceMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    loadTime: 0,\n    renderTime: 0,\n    domContentLoaded: 0,\n    firstPaint: 0,\n    firstContentfulPaint: 0,\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || !window.performance) {\n      return;\n    }\n\n    const navigation = window.performance.getEntriesByType(\"navigation\")[0] as PerformanceNavigationTiming;\n    const paint = window.performance.getEntriesByType(\"paint\");\n\n    if (navigation) {\n      setMetrics({\n        loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n        renderTime: navigation.domComplete - navigation.domLoading,\n        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n        firstPaint: paint.find(p => p.name === \"first-paint\")?.startTime || 0,\n        firstContentfulPaint: paint.find(p => p.name === \"first-contentful-paint\")?.startTime || 0,\n      });\n    }\n  }, []);\n\n  return metrics;\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts-convention-4",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.ts",
        "line": 292,
        "column": 1,
        "message": "Inconsistent naming convention - functions with underscore prefix should not be exported",
        "description": "Inconsistent naming convention - functions with underscore prefix should not be exported This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix from exported functions or use different naming convention",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Export all hooks for testing\nexport {\n  _useSSRSafe as useSSRSafe,\n  _isSSR as isSSR,\n  _useIntersectionObserver as useIntersectionObserver,\n  _useMediaQuery as useMediaQuery,\n  _useNetworkStatus as useNetworkStatus,\n  _useWindowSize as useWindowSize,\n  _useOnlineStatus as useOnlineStatus,\n  _usePageVisibility as usePageVisibility,\n  _usePerformanceMetrics as usePerformanceMetrics,\n};",
          "description": "Remove underscore prefix from exported functions or use different naming convention",
          "content": "// Export all hooks for testing\nexport {\n  _useSSRSafe as useSSRSafe,\n  _isSSR as isSSR,\n  _useIntersectionObserver as useIntersectionObserver,\n  _useMediaQuery as useMediaQuery,\n  _useNetworkStatus as useNetworkStatus,\n  _useWindowSize as useWindowSize,\n  _useOnlineStatus as useOnlineStatus,\n  _usePageVisibility as usePageVisibility,\n  _usePerformanceMetrics as usePerformanceMetrics,\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 151,
        "column": 5,
        "message": "IntersectionObserver is first mocked then immediately set to undefined, making all tests fail",
        "description": "IntersectionObserver is first mocked then immediately set to undefined, making all tests fail This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the line that sets IntersectionObserver to undefined, or move it to specific test cases that need it",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove the line that sets IntersectionObserver to undefined, or move it to specific test cases that need it"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 28,
        "column": 7,
        "message": "Missing try-catch blocks around property access that could throw errors",
        "description": "Missing try-catch blocks around property access that could throw errors This code works but could be improved for better maintainability.",
        "suggestion": "Wrap property access in try-catch blocks to handle cases where properties might throw on access",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-memory-leak-2",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 421,
        "column": 5,
        "message": "Event listeners are stored in arrays but not properly cleaned up in all test scenarios",
        "description": "Event listeners are stored in arrays but not properly cleaned up in all test scenarios This code works but could be improved for better maintainability.",
        "suggestion": "Ensure all event listeners are properly removed in afterEach blocks",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 152,
        "column": 5,
        "message": "Inconsistent use of type assertions and @ts-ignore comments",
        "description": "Inconsistent use of type assertions and @ts-ignore comments This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent approach for type assertions or create proper type guards",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 139,
        "column": 5,
        "message": "Test setup creates circular references that might cause issues in cleanup",
        "description": "Test setup creates circular references that might cause issues in cleanup This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Break circular references in afterAll cleanup or use WeakRef/WeakMap",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 23,
        "column": 3,
        "message": "Complex mock setup is repeated for each test suite instead of being reusable",
        "description": "Complex mock setup is repeated for each test suite instead of being reusable This implementation could impact application performance.",
        "suggestion": "Extract mock setup into reusable utility functions",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 85,
        "column": 7,
        "message": "Inconsistent spacing and formatting in mock object definitions",
        "description": "Inconsistent spacing and formatting in mock object definitions This violates code style conventions and may reduce readability.",
        "suggestion": "Apply consistent formatting to object definitions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    global.window = {\n      innerWidth: 1024,\n      innerHeight: 768,\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      getComputedStyle: jest.fn(() => ({})),\n      matchMedia: jest.fn().mockImplementation((query) => ({\n        matches: false,\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      })),\n      location: { href: \"http://localhost\" },\n      history: { pushState: jest.fn(), replaceState: jest.fn() },\n      navigator: { userAgent: \"test\" },\n    } as any;",
          "description": "Apply consistent formatting to object definitions",
          "content": "    global.window = {\n      innerWidth: 1024,\n      innerHeight: 768,\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      getComputedStyle: jest.fn(() => ({})),\n      matchMedia: jest.fn().mockImplementation((query) => ({\n        matches: false,\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      })),\n      location: { href: \"http://localhost\" },\n      history: { pushState: jest.fn(), replaceState: jest.fn() },\n      navigator: { userAgent: \"test\" },\n    } as any;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx-naming-7",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.test.tsx",
        "line": 60,
        "column": 11,
        "message": "Variable names like 'mockElement' are used inconsistently across different contexts",
        "description": "Variable names like 'mockElement' are used inconsistently across different contexts This code works but could be improved for better maintainability.",
        "suggestion": "Use more specific names like 'createMockElement' for factory functions",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 53,
        "column": 7,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      (global as any).window = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "      (global as any).window = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 63,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).matchMedia = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).matchMedia = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 73,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).matchMedia = null;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).matchMedia = null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 105,
        "column": 7,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      (global as any).IntersectionObserver = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "      (global as any).IntersectionObserver = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 115,
        "column": 7,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      (global as any).IntersectionObserver = null;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "      (global as any).IntersectionObserver = null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 152,
        "column": 7,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      (global as any).navigator = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "      (global as any).navigator = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 189,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        delete (window as any).innerWidth;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        delete (window as any).innerWidth;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 191,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        delete (window as any).innerHeight;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        delete (window as any).innerHeight;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 202,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).innerWidth = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).innerWidth = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-9",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 204,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).innerHeight = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).innerHeight = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-10",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 246,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).addEventListener = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).addEventListener = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-style-11",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 248,
        "column": 9,
        "message": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues",
        "description": "Using @ts-ignore suppresses TypeScript type checking, which can hide potential issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        (window as any).removeEventListener = undefined;",
          "description": "Use proper type assertions or fix the underlying type issue instead of suppressing with @ts-ignore",
          "content": "        (window as any).removeEventListener = undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-error-handling-12",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 53,
        "column": 7,
        "message": "Global state modification in tests can cause test isolation issues and unpredictable test results",
        "description": "Global state modification in tests can cause test isolation issues and unpredictable test results This code works but could be improved for better maintainability.",
        "suggestion": "Consider using test utilities that provide isolated environments or mock implementations instead of modifying global objects",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx-performance-13",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.missing-apis.test.tsx",
        "line": 19,
        "column": 5,
        "message": "Repeatedly checking 'typeof window !== \"undefined\"' in test setup/teardown may impact test performance",
        "description": "Repeatedly checking 'typeof window !== \"undefined\"' in test setup/teardown may impact test performance This implementation could impact application performance.",
        "suggestion": "Extract window existence check to a helper function or use a constant",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const isWindowAvailable = typeof window !== \"undefined\";\n  \n  beforeEach(() => {\n    // Store originals for restoration\n    if (isWindowAvailable) {",
          "description": "Extract window existence check to a helper function or use a constant",
          "content": "  const isWindowAvailable = typeof window !== \"undefined\";\n  \n  beforeEach(() => {\n    // Store originals for restoration\n    if (isWindowAvailable) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 119,
        "column": 5,
        "message": "Missing error handling for DOM manipulation and event dispatching in test functions",
        "description": "Missing error handling for DOM manipulation and event dispatching in test functions This code works but could be improved for better maintainability.",
        "suggestion": "Wrap DOM operations in try-catch blocks to handle potential errors gracefully",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const testMediaQuery = () => {\n    const TestMediaQuery: React.FC = () => {\n      const matches = _useMediaQuery(\"(min-width: 500px)\");\n      const [testPassed, setTestPassed] = useState(false);\n\n      useEffect(() => {\n        try {\n          // Initial state\n          console.log(\"✓ Media query initial state:\", matches);\n\n          // Test that it responds to changes\n          const mediaQuery = window.matchMedia(\"(min-width: 500px)\");\n          const initialMatches = mediaQuery.matches;\n\n          // Simulate change\n          setTimeout(() => {\n            const event = new Event(\"change\");\n            Object.defineProperty(event, \"matches\", {\n              value: !initialMatches,\n              writable: false,\n            });\n            mediaQuery.dispatchEvent(event);\n            setTestPassed(true);\n          }, 100);\n        } catch (error) {\n          console.error(\"Media query test failed:\", error);\n        }\n      }, [matches]);\n\n      return <div>Media Query Test: {matches ? \"matches\" : \"no match\"}</div>;\n    };\n\n    // Would render in real test\n    console.log(\"✓ Media query hook created successfully\");\n  };",
          "description": "Wrap DOM operations in try-catch blocks to handle potential errors gracefully",
          "content": "  const testMediaQuery = () => {\n    const TestMediaQuery: React.FC = () => {\n      const matches = _useMediaQuery(\"(min-width: 500px)\");\n      const [testPassed, setTestPassed] = useState(false);\n\n      useEffect(() => {\n        try {\n          // Initial state\n          console.log(\"✓ Media query initial state:\", matches);\n\n          // Test that it responds to changes\n          const mediaQuery = window.matchMedia(\"(min-width: 500px)\");\n          const initialMatches = mediaQuery.matches;\n\n          // Simulate change\n          setTimeout(() => {\n            const event = new Event(\"change\");\n            Object.defineProperty(event, \"matches\", {\n              value: !initialMatches,\n              writable: false,\n            });\n            mediaQuery.dispatchEvent(event);\n            setTestPassed(true);\n          }, 100);\n        } catch (error) {\n          console.error(\"Media query test failed:\", error);\n        }\n      }, [matches]);\n\n      return <div>Media Query Test: {matches ? \"matches\" : \"no match\"}</div>;\n    };\n\n    // Would render in real test\n    console.log(\"✓ Media query hook created successfully\");\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 152,
        "column": 5,
        "message": "Missing error handling for window resize event dispatching",
        "description": "Missing error handling for window resize event dispatching This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block around event dispatching to handle potential errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const testWindowSize = () => {\n    try {\n      console.log(\"✓ Window size:\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n\n      // Test resize handling\n      const resizeEvent = new Event(\"resize\");\n      window.dispatchEvent(resizeEvent);\n      console.log(\"✓ Resize event dispatched successfully\");\n    } catch (error) {\n      console.error(\"Window size test failed:\", error);\n    }\n  };",
          "description": "Add try-catch block around event dispatching to handle potential errors",
          "content": "  const testWindowSize = () => {\n    try {\n      console.log(\"✓ Window size:\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n\n      // Test resize handling\n      const resizeEvent = new Event(\"resize\");\n      window.dispatchEvent(resizeEvent);\n      console.log(\"✓ Resize event dispatched successfully\");\n    } catch (error) {\n      console.error(\"Window size test failed:\", error);\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 167,
        "column": 5,
        "message": "Missing error handling for network status event dispatching",
        "description": "Missing error handling for network status event dispatching This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block around event dispatching to handle potential errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const testNetworkStatus = () => {\n    try {\n      console.log(\"✓ Online status:\", navigator.onLine);\n\n      // Test online/offline events\n      const onlineEvent = new Event(\"online\");\n      const offlineEvent = new Event(\"offline\");\n\n      window.dispatchEvent(offlineEvent);\n      console.log(\"✓ Offline event dispatched\");\n\n      window.dispatchEvent(onlineEvent);\n      console.log(\"✓ Online event dispatched\");\n    } catch (error) {\n      console.error(\"Network status test failed:\", error);\n    }\n  };",
          "description": "Add try-catch block around event dispatching to handle potential errors",
          "content": "  const testNetworkStatus = () => {\n    try {\n      console.log(\"✓ Online status:\", navigator.onLine);\n\n      // Test online/offline events\n      const onlineEvent = new Event(\"online\");\n      const offlineEvent = new Event(\"offline\");\n\n      window.dispatchEvent(offlineEvent);\n      console.log(\"✓ Offline event dispatched\");\n\n      window.dispatchEvent(onlineEvent);\n      console.log(\"✓ Online event dispatched\");\n    } catch (error) {\n      console.error(\"Network status test failed:\", error);\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 184,
        "column": 5,
        "message": "Missing error handling for IntersectionObserver lifecycle operations",
        "description": "Missing error handling for IntersectionObserver lifecycle operations This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block around IntersectionObserver operations to handle potential errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const testIntersectionObserver = () => {\n    if (typeof IntersectionObserver !== \"undefined\") {\n      try {\n        console.log(\"✓ IntersectionObserver is available\");\n\n        // Create a mock observer\n        const callback = (entries: IntersectionObserverEntry[]) => {\n          console.log(\n            \"✓ Intersection callback fired with\",\n            entries.length,\n            \"entries\",\n          );\n        };\n\n        const observer = new IntersectionObserver(callback);\n        const testElement = document.createElement(\"div\");\n        observer.observe(testElement);\n        observer.disconnect();\n\n        console.log(\"✓ IntersectionObserver lifecycle completed\");\n      } catch (error) {\n        console.error(\"IntersectionObserver test failed:\", error);\n      }\n    } else {\n      console.log(\"⚠ IntersectionObserver not available in test environment\");\n    }\n  };",
          "description": "Add try-catch block around IntersectionObserver operations to handle potential errors",
          "content": "  const testIntersectionObserver = () => {\n    if (typeof IntersectionObserver !== \"undefined\") {\n      try {\n        console.log(\"✓ IntersectionObserver is available\");\n\n        // Create a mock observer\n        const callback = (entries: IntersectionObserverEntry[]) => {\n          console.log(\n            \"✓ Intersection callback fired with\",\n            entries.length,\n            \"entries\",\n          );\n        };\n\n        const observer = new IntersectionObserver(callback);\n        const testElement = document.createElement(\"div\");\n        observer.observe(testElement);\n        observer.disconnect();\n\n        console.log(\"✓ IntersectionObserver lifecycle completed\");\n      } catch (error) {\n        console.error(\"IntersectionObserver test failed:\", error);\n      }\n    } else {\n      console.log(\"⚠ IntersectionObserver not available in test environment\");\n    }\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 132,
        "column": 11,
        "message": "Using setTimeout in useEffect without cleanup may cause memory leaks",
        "description": "Using setTimeout in useEffect without cleanup may cause memory leaks This implementation could impact application performance.",
        "suggestion": "Return a cleanup function from useEffect to clear the timeout",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      useEffect(() => {\n        try {\n          // Initial state\n          console.log(\"✓ Media query initial state:\", matches);\n\n          // Test that it responds to changes\n          const mediaQuery = window.matchMedia(\"(min-width: 500px)\");\n          const initialMatches = mediaQuery.matches;\n\n          // Simulate change\n          const timeoutId = setTimeout(() => {\n            const event = new Event(\"change\");\n            Object.defineProperty(event, \"matches\", {\n              value: !initialMatches,\n              writable: false,\n            });\n            mediaQuery.dispatchEvent(event);\n            setTestPassed(true);\n          }, 100);\n\n          return () => clearTimeout(timeoutId);\n        } catch (error) {\n          console.error(\"Media query test failed:\", error);\n        }\n      }, [matches]);",
          "description": "Return a cleanup function from useEffect to clear the timeout",
          "content": "      useEffect(() => {\n        try {\n          // Initial state\n          console.log(\"✓ Media query initial state:\", matches);\n\n          // Test that it responds to changes\n          const mediaQuery = window.matchMedia(\"(min-width: 500px)\");\n          const initialMatches = mediaQuery.matches;\n\n          // Simulate change\n          const timeoutId = setTimeout(() => {\n            const event = new Event(\"change\");\n            Object.defineProperty(event, \"matches\", {\n              value: !initialMatches,\n              writable: false,\n            });\n            mediaQuery.dispatchEvent(event);\n            setTestPassed(true);\n          }, 100);\n\n          return () => clearTimeout(timeoutId);\n        } catch (error) {\n          console.error(\"Media query test failed:\", error);\n        }\n      }, [matches]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 90,
        "column": 5,
        "message": "Global window object manipulation could affect other tests or application state",
        "description": "Global window object manipulation could affect other tests or application state This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use a more isolated approach or restore original state in a finally block",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  try {\n    // Temporarily make window undefined\n    const originalWindow = global.window;\n    Object.defineProperty(global, \"window\", {\n      value: undefined,\n      configurable: true,\n    });\n\n    try {\n      // Import and test functions should not throw\n      const isSSR = _isSSR();\n      console.log(\"✓ _isSSR in SSR:\", isSSR === true);\n    } finally {\n      // Restore window\n      Object.defineProperty(global, \"window\", {\n        value: originalWindow,\n        configurable: true,\n      });\n    }\n  } catch (error) {\n    console.error(\"✗ SSR test failed:\", error);\n  }",
          "description": "Use a more isolated approach or restore original state in a finally block",
          "content": "  try {\n    // Temporarily make window undefined\n    const originalWindow = global.window;\n    Object.defineProperty(global, \"window\", {\n      value: undefined,\n      configurable: true,\n    });\n\n    try {\n      // Import and test functions should not throw\n      const isSSR = _isSSR();\n      console.log(\"✓ _isSSR in SSR:\", isSSR === true);\n    } finally {\n      // Restore window\n      Object.defineProperty(global, \"window\", {\n        value: originalWindow,\n        configurable: true,\n      });\n    }\n  } catch (error) {\n    console.error(\"✗ SSR test failed:\", error);\n  }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-ssr-safe-hooks.integration.test.tsx",
        "line": 123,
        "column": 13,
        "message": "Unused variable 'testPassed' declared but never used",
        "description": "Unused variable 'testPassed' declared but never used This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused variable or implement its usage",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const TestMediaQuery: React.FC = () => {\n      const matches = _useMediaQuery(\"(min-width: 500px)\");",
          "description": "Remove unused variable or implement its usage",
          "content": "    const TestMediaQuery: React.FC = () => {\n      const matches = _useMediaQuery(\"(min-width: 500px)\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx",
        "line": 30,
        "column": 7,
        "message": "performanceMonitor object calls methods that don't exist on the mock object",
        "description": "performanceMonitor object calls methods that don't exist on the mock object This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add the missing trackComponent method to the performanceMonitor mock object",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Mock performance monitor since the module was removed\nconst performanceMonitor = {\n  startMeasure: (name: string) => ({ name, startTime: performance.now() }),\n  endMeasure: (measurement: any) => performance.now() - measurement.startTime,\n  recordMetric: (name: string, value: number) =>\n    console.debug(`Metric ${name}: ${value}ms`),\n  getMetrics: () => ({}),\n  trackComponent: (name: string, data: any) =>\n    console.debug(`Component ${name}:`, data),\n  startTiming: (name: string) => ({ name, startTime: performance.now() }),\n  endTiming: (name: string) => console.debug(`Timing ${name} completed`),\n  trackCustomMetric: (name: string, value: number) =>\n    console.debug(`Custom metric ${name}: ${value}`),\n  init: (options: any) => console.debug('Performance monitor initialized', options),\n};",
          "description": "Add the missing trackComponent method to the performanceMonitor mock object",
          "content": "// Mock performance monitor since the module was removed\nconst performanceMonitor = {\n  startMeasure: (name: string) => ({ name, startTime: performance.now() }),\n  endMeasure: (measurement: any) => performance.now() - measurement.startTime,\n  recordMetric: (name: string, value: number) =>\n    console.debug(`Metric ${name}: ${value}ms`),\n  getMetrics: () => ({}),\n  trackComponent: (name: string, data: any) =>\n    console.debug(`Component ${name}:`, data),\n  startTiming: (name: string) => ({ name, startTime: performance.now() }),\n  endTiming: (name: string) => console.debug(`Timing ${name} completed`),\n  trackCustomMetric: (name: string, value: number) =>\n    console.debug(`Custom metric ${name}: ${value}`),\n  init: (options: any) => console.debug('Performance monitor initialized', options),\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx",
        "line": 25,
        "column": 5,
        "message": "useEffect dependency on props object will cause re-execution on every render",
        "description": "useEffect dependency on props object will cause re-execution on every render This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize props or use a different approach to track prop changes",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx",
        "line": 36,
        "column": 5,
        "message": "useEffect dependency on renderCount causes infinite re-renders",
        "description": "useEffect dependency on renderCount causes infinite re-renders This implementation could impact application performance.",
        "suggestion": "Remove renderCount from dependencies and use a ref to track render count",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Track each render\n  useEffect(() => {\n    const renderTime = performance.now() - renderStartTime.current;\n\n    if (renderCount === 0) {\n      // First render is mount\n      performanceMonitor.trackComponent(componentName, {\n        mountTime: renderTime,\n        renderTime,\n        props: props || {},\n      });\n    } else {\n      // Subsequent renders are updates\n      performanceMonitor.trackComponent(componentName, {\n        updateTime: renderTime,\n        renderTime,\n        props: props || {},\n      });\n    }\n\n    setRenderCount((previous) => previous + 1);\n  });",
          "description": "Remove renderCount from dependencies and use a ref to track render count",
          "content": "  // Track each render\n  useEffect(() => {\n    const renderTime = performance.now() - renderStartTime.current;\n\n    if (renderCount === 0) {\n      // First render is mount\n      performanceMonitor.trackComponent(componentName, {\n        mountTime: renderTime,\n        renderTime,\n        props: props || {},\n      });\n    } else {\n      // Subsequent renders are updates\n      performanceMonitor.trackComponent(componentName, {\n        updateTime: renderTime,\n        renderTime,\n        props: props || {},\n      });\n    }\n\n    setRenderCount((previous) => previous + 1);\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx",
        "line": 122,
        "column": 76,
        "message": "Inconsistent null/undefined initialization",
        "description": "Inconsistent null/undefined initialization This violates code style conventions and may reduce readability.",
        "suggestion": "Use null instead of undefined for initial state",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const [memory, setMemory] = useState<{ used: number; limit: number } | null>(\n    null,\n  );",
          "description": "Use null instead of undefined for initial state",
          "content": "  const [memory, setMemory] = useState<{ used: number; limit: number } | null>(\n    null,\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-performance-monitoring.tsx",
        "line": 143,
        "column": 21,
        "message": "Unsafe type assertion for performance.memory",
        "description": "Unsafe type assertion for performance.memory This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper type checking instead of unknown type assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Measure memory if available\n      if ('memory' in performance) {\n        const memInfo = (performance as any).memory as {\n          usedJSHeapSize: number;\n          jsHeapSizeLimit: number;\n        };\n        setMemory({\n          used: Math.round(memInfo.usedJSHeapSize / 1_048_576), // Convert to MB\n          limit: Math.round(memInfo.jsHeapSizeLimit / 1_048_576),\n        });\n      }",
          "description": "Use proper type checking instead of unknown type assertion",
          "content": "      // Measure memory if available\n      if ('memory' in performance) {\n        const memInfo = (performance as any).memory as {\n          usedJSHeapSize: number;\n          jsHeapSizeLimit: number;\n        };\n        setMemory({\n          used: Math.round(memInfo.usedJSHeapSize / 1_048_576), // Convert to MB\n          limit: Math.round(memInfo.jsHeapSizeLimit / 1_048_576),\n        });\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 104,
        "column": 7,
        "message": "Property access on undefined object - liquidGlassTokens.colors does not have a 'glass' property",
        "description": "Property access on undefined object - liquidGlassTokens.colors does not have a 'glass' property This will likely cause errors during execution.",
        "suggestion": "Remove this code block or define the missing properties in liquidGlassTokens",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Set liquid glass color tokens\n    Object.entries(liquidGlassTokens.colors).forEach(([key, value]) => {\n      root.style.setProperty(`--liquid-glass-${key}`, `rgb(${value})`);\n    });",
          "description": "Remove this code block or define the missing properties in liquidGlassTokens",
          "content": "    // Set liquid glass color tokens\n    Object.entries(liquidGlassTokens.colors).forEach(([key, value]) => {\n      root.style.setProperty(`--liquid-glass-${key}`, `rgb(${value})`);\n    });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 108,
        "column": 7,
        "message": "Property access on undefined object - liquidGlassTokens does not have a 'shadows' property",
        "description": "Property access on undefined object - liquidGlassTokens does not have a 'shadows' property This will likely cause errors during execution.",
        "suggestion": "Remove this code block or define the missing 'shadows' property in liquidGlassTokens",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove this code block or define the missing 'shadows' property in liquidGlassTokens"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 114,
        "column": 7,
        "message": "Property access on undefined object - liquidGlassTokens does not have an 'animation' property",
        "description": "Property access on undefined object - liquidGlassTokens does not have an 'animation' property This will likely cause errors during execution.",
        "suggestion": "Remove this code block or define the missing 'animation' property in liquidGlassTokens",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "delete",
          "oldCode": "",
          "newCode": "",
          "description": "Remove this code block or define the missing 'animation' property in liquidGlassTokens"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-bug-3",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 56,
        "column": 2,
        "message": "Type assertion bypasses type safety - casting defaultConfig to unknown in context creation",
        "description": "Type assertion bypasses type safety - casting defaultConfig to unknown in context creation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Provide proper default values for all required properties including updateGlassStyle",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const LiquidGlassContext = createContext<\n  LiquidGlassConfig & {\n    contentAnalysis?: ContentAnalysis;\n    updateGlassStyle: (_analysis: ContentAnalysis) => void;\n  }\n>({\n  ...defaultConfig,\n  updateGlassStyle: () => {},\n});",
          "description": "Provide proper default values for all required properties including updateGlassStyle",
          "content": "const LiquidGlassContext = createContext<\n  LiquidGlassConfig & {\n    contentAnalysis?: ContentAnalysis;\n    updateGlassStyle: (_analysis: ContentAnalysis) => void;\n  }\n>({\n  ...defaultConfig,\n  updateGlassStyle: () => {},\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 213,
        "column": 10,
        "message": "Function can return null but return type doesn't indicate this",
        "description": "Function can return null but return type doesn't indicate this This code works but could be improved for better maintainability.",
        "suggestion": "Update return type to include null or ensure function always returns a value",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function analyzeColor(colorString: string): ContentAnalysis | null {",
          "description": "Update return type to include null or ensure function always returns a value",
          "content": "function analyzeColor(colorString: string): ContentAnalysis | null {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 219,
        "column": 7,
        "message": "Inconsistent return - function returns undefined instead of null in some cases",
        "description": "Inconsistent return - function returns undefined instead of null in some cases This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the function's return type",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Return null explicitly to match the function's return type",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 248,
        "column": 13,
        "message": "Inconsistent return - function returns undefined instead of null",
        "description": "Inconsistent return - function returns undefined instead of null This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Return null explicitly to match the function's return type",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      return null;",
          "description": "Return null explicitly to match the function's return type",
          "content": "      return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-naming-7",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 135,
        "column": 7,
        "message": "Function name starts with underscore indicating private/internal use but is defined at module level",
        "description": "Function name starts with underscore indicating private/internal use but is defined at module level This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or move to internal scope if truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const useContentAwareGlass = (contentRef: React.RefObject<HTMLElement>) => {",
          "description": "Remove underscore prefix or move to internal scope if truly private",
          "content": "const useContentAwareGlass = (contentRef: React.RefObject<HTMLElement>) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 185,
        "column": 5,
        "message": "Expensive DOM operations in useEffect without proper cleanup may cause memory leaks",
        "description": "Expensive DOM operations in useEffect without proper cleanup may cause memory leaks This implementation could impact application performance.",
        "suggestion": "Add cleanup for DOM style properties when component unmounts",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx-security-9",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-liquid-glass.tsx",
        "line": 74,
        "column": 7,
        "message": "Direct DOM manipulation without sanitization could be vulnerable to XSS",
        "description": "Direct DOM manipulation without sanitization could be vulnerable to XSS This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Validate and sanitize values before setting CSS properties",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);",
          "description": "Validate and sanitize values before setting CSS properties",
          "content": "    // FIX: Sanitize user input before rendering\n    const sanitized = escapeHtml(searchTerm);\n    res.send(`<h1>Search results for: ${sanitized}</h1>`);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 367,
        "column": 57,
        "message": "Incorrect context default value - using 'undefined' instead of null/undefined type",
        "description": "Incorrect context default value - using 'undefined' instead of null/undefined type This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change default value from 'undefined' to null to match the type",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const HapticContext = createContext<HapticContextValue | null>(null);",
          "description": "Change default value from 'undefined' to null to match the type",
          "content": "const HapticContext = createContext<HapticContextValue | null>(null);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 225,
        "column": 29,
        "message": "Missing return type annotation in async function",
        "description": "Missing return type annotation in async function This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit return type Promise<AudioBuffer | null>",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const loadAudio = async (url: string): Promise<AudioBuffer | null> => {",
          "description": "Add explicit return type Promise<AudioBuffer | null>",
          "content": "    const loadAudio = async (url: string): Promise<AudioBuffer | null> => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 234,
        "column": 16,
        "message": "Missing explicit return statement in error cases",
        "description": "Missing explicit return statement in error cases This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit return null statement",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        return null;",
          "description": "Add explicit return null statement",
          "content": "        return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 231,
        "column": 20,
        "message": "Missing explicit return statement in error cases",
        "description": "Missing explicit return statement in error cases This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit return null statement",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          return null;",
          "description": "Add explicit return null statement",
          "content": "          return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-memory-leak-4",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 89,
        "column": 1,
        "message": "Audio context not properly cleaned up, potential memory leak",
        "description": "Audio context not properly cleaned up, potential memory leak This code works but could be improved for better maintainability.",
        "suggestion": "Add cleanup function to properly dispose of audio context",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 203,
        "column": 20,
        "message": "Unnecessary object spread in every render",
        "description": "Unnecessary object spread in every render This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize the merged configuration",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config,\n  }), [config]);\n  \n  configRef.current = mergedConfig;",
          "description": "Use useMemo to memoize the merged configuration",
          "content": "  const mergedConfig = useMemo(() => ({\n    ...DEFAULT_CONFIG,\n    ...config,\n  }), [config]);\n  \n  configRef.current = mergedConfig;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 175,
        "column": 1,
        "message": "No reduced motion preference check for visual feedback animations",
        "description": "No reduced motion preference check for visual feedback animations This code works but could be improved for better maintainability.",
        "suggestion": "Add prefers-reduced-motion media query check before applying animations",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function applyVisualFeedback(\n  element: HTMLElement,\n  config: VisualFeedbackConfig,\n): () => void {\n  if (!config.enabled || typeof window === \"undefined\") {\n    return () => {};\n  }\n\n  // Check for reduced motion preference\n  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  if (prefersReducedMotion) {\n    return () => {};\n  }",
          "description": "Add prefers-reduced-motion media query check before applying animations",
          "content": "function applyVisualFeedback(\n  element: HTMLElement,\n  config: VisualFeedbackConfig,\n): () => void {\n  if (!config.enabled || typeof window === \"undefined\") {\n    return () => {};\n  }\n\n  // Check for reduced motion preference\n  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  if (prefersReducedMotion) {\n    return () => {};\n  }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-naming-7",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 387,
        "column": 10,
        "message": "Unused function with underscore prefix should be removed or used",
        "description": "Unused function with underscore prefix should be removed or used This code works but could be improved for better maintainability.",
        "suggestion": "Remove unused function or export it if it's meant to be public",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-naming-8",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 395,
        "column": 10,
        "message": "Unused function with underscore prefix should be removed or used",
        "description": "Unused function with underscore prefix should be removed or used This code works but could be improved for better maintainability.",
        "suggestion": "Remove unused function or export it if it's meant to be public",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx-error-handling-9",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-haptic-feedback.tsx",
        "line": 305,
        "column": 21,
        "message": "Potential null reference when accessing buffer from Map",
        "description": "Potential null reference when accessing buffer from Map This code works but could be improved for better maintainability.",
        "suggestion": "Add null check for buffer before using it",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const buffer = safeMapGet(audioCache.current, soundUrl);\n      if (!buffer) {\n        // Logging disabled\n        return;\n      }",
          "description": "Add null check for buffer before using it",
          "content": "      const buffer = safeMapGet(audioCache.current, soundUrl);\n      if (!buffer) {\n        // Logging disabled\n        return;\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 124,
        "column": 13,
        "message": "Incorrect use of setTimeout to store RAF cancel function - setTimeout expects a function but cancelRAF is likely a number",
        "description": "Incorrect use of setTimeout to store RAF cancel function - setTimeout expects a function but cancelRAF is likely a number This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Store the cancelRAF directly in a ref or use a different approach to track the RAF ID",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          // Store the RAF ID for cleanup\n          if (cancelRAF && typeof cancelRAF === 'number') {\n            timeoutRef.current = cancelRAF as any;\n          }",
          "description": "Store the cancelRAF directly in a ref or use a different approach to track the RAF ID",
          "content": "          // Store the RAF ID for cleanup\n          if (cancelRAF && typeof cancelRAF === 'number') {\n            timeoutRef.current = cancelRAF as any;\n          }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 128,
        "column": 9,
        "message": "Duplicate RAF request and incorrect cleanup handling",
        "description": "Duplicate RAF request and incorrect cleanup handling This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the duplicate RAF request outside the updateProgress function",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        // Start progress tracking\n        const cancelRAF = safeRequestAnimationFrame(updateProgress);",
          "description": "Remove the duplicate RAF request outside the updateProgress function",
          "content": "        // Start progress tracking\n        const cancelRAF = safeRequestAnimationFrame(updateProgress);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 158,
        "column": 7,
        "message": "Memory leak potential - clearTimeout called on RAF ID instead of timeout ID",
        "description": "Memory leak potential - clearTimeout called on RAF ID instead of timeout ID This implementation could impact application performance.",
        "suggestion": "Use separate refs for timeout and RAF IDs, or use cancelAnimationFrame for RAF IDs",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    if (timeoutRef.current) {\n      if (typeof timeoutRef.current === 'number' && timeoutRef.current > 0) {\n        cancelAnimationFrame(timeoutRef.current);\n      }\n      timeoutRef.current = null;\n    }",
          "description": "Use separate refs for timeout and RAF IDs, or use cancelAnimationFrame for RAF IDs",
          "content": "    if (timeoutRef.current) {\n      if (typeof timeoutRef.current === 'number' && timeoutRef.current > 0) {\n        cancelAnimationFrame(timeoutRef.current);\n      }\n      timeoutRef.current = null;\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 178,
        "column": 3,
        "message": "Unused parameter prefixed with underscore should not be used in function body",
        "description": "Unused parameter prefixed with underscore should not be used in function body This violates code style conventions and may reduce readability.",
        "suggestion": "Remove underscore prefix if parameter is used, or remove the parameter entirely",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useGlassStateTransitions(\n  timing: AnimationTiming = \"normal\",\n  intensity: GlassIntensity = \"medium\",\n) {",
          "description": "Remove underscore prefix if parameter is used, or remove the parameter entirely",
          "content": "export function useGlassStateTransitions(\n  timing: AnimationTiming = \"normal\",\n  intensity: GlassIntensity = \"medium\",\n) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 354,
        "column": 3,
        "message": "Unused parameter prefixed with underscore",
        "description": "Unused parameter prefixed with underscore This violates code style conventions and may reduce readability.",
        "suggestion": "Remove underscore prefix if parameter is used, or remove the parameter entirely",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useRippleEffect(\n  timing: AnimationTiming = \"normal\",\n  color = \"rgba(255, 255, 255, 0.3)\",\n) {",
          "description": "Remove underscore prefix if parameter is used, or remove the parameter entirely",
          "content": "export function useRippleEffect(\n  timing: AnimationTiming = \"normal\",\n  color = \"rgba(255, 255, 255, 0.3)\",\n) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 105,
        "column": 11,
        "message": "Animation effect nullability check may not work as expected",
        "description": "Animation effect nullability check may not work as expected This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Check animation.effect.getTiming() or use a more reliable method to get duration",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 273,
        "column": 5,
        "message": "Potential memory leak - event listeners not cleaned up properly in all error cases",
        "description": "Potential memory leak - event listeners not cleaned up properly in all error cases This implementation could impact application performance.",
        "suggestion": "Add cleanup in error handling or use AbortController for better cleanup",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/hooks/use-glass-animations.ts",
        "line": 203,
        "column": 1,
        "message": "Magnetic hover effect may cause accessibility issues for users with motion sensitivity",
        "description": "Magnetic hover effect may cause accessibility issues for users with motion sensitivity This code works but could be improved for better maintainability.",
        "suggestion": "Add prefers-reduced-motion media query check to disable magnetic effects when requested",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleMouseMove = useCallback(\n    (event: MouseEvent) => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      // Respect user's motion preferences\n      if (typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n        return;\n      }\n\n      try {",
          "description": "Add prefers-reduced-motion media query check to disable magnetic effects when requested",
          "content": "  const handleMouseMove = useCallback(\n    (event: MouseEvent) => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      // Respect user's motion preferences\n      if (typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n        return;\n      }\n\n      try {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 338,
        "column": 19,
        "message": "Missing import for ReactElement type",
        "description": "Missing import for ReactElement type This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import ReactElement from React",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useCallback, useEffect, useRef, useState, ReactElement } from \"react\";",
          "description": "Import ReactElement from React",
          "content": "import React, { useCallback, useEffect, useRef, useState, ReactElement } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 355,
        "column": 29,
        "message": "Incorrect type declaration for itemReferences",
        "description": "Incorrect type declaration for itemReferences This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change type to Array<HTMLElement | null>",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const itemReferences = useRef<Array<HTMLElement | null>>([]);",
          "description": "Change type to Array<HTMLElement | null>",
          "content": "  const itemReferences = useRef<Array<HTMLElement | null>>([]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 48,
        "column": 10,
        "message": "Unused variable _loop - variable is destructured but not used",
        "description": "Unused variable _loop - variable is destructured but not used This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use the variable or rename with underscore prefix if intentionally unused",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    loop = true,",
          "description": "Use the variable or rename with underscore prefix if intentionally unused",
          "content": "    loop = true,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 86,
        "column": 5,
        "message": "Unused variable loop in findNextEnabledIndex - loop option is not being used in the navigation logic",
        "description": "Unused variable loop in findNextEnabledIndex - loop option is not being used in the navigation logic This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Implement loop logic or remove the parameter if not needed",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 59,
        "column": 3,
        "message": "Inefficient DOM manipulation in useEffect - setting tabindex on every render",
        "description": "Inefficient DOM manipulation in useEffect - setting tabindex on every render This implementation could impact application performance.",
        "suggestion": "Only update changed elements instead of all elements",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-5",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 132,
        "column": 7,
        "message": "Memory leak - timeout not cleared on unmount",
        "description": "Memory leak - timeout not cleared on unmount This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add cleanup in useEffect to clear timeout on unmount",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Add cleanup effect\n  useEffect(() => {\n    return () => {\n      if (typeaheadTimerRef.current) {\n        clearTimeout(typeaheadTimerRef.current);\n      }\n    };\n  }, []);\n\n  const handleTypeahead = useCallback(",
          "description": "Add cleanup in useEffect to clear timeout on unmount",
          "content": "  // Add cleanup effect\n  useEffect(() => {\n    return () => {\n      if (typeaheadTimerRef.current) {\n        clearTimeout(typeaheadTimerRef.current);\n      }\n    };\n  }, []);\n\n  const handleTypeahead = useCallback("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 506,
        "column": 9,
        "message": "Missing ARIA attributes for grid navigation",
        "description": "Missing ARIA attributes for grid navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-rowcount, aria-colcount, and role='grid' attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-7",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 426,
        "column": 10,
        "message": "Function _useGridRovingTabindex is declared but never used",
        "description": "Function _useGridRovingTabindex is declared but never used This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Export the function or remove if not needed",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export function useGridRovingTabindex(options: GridRovingTabindexOptions) {",
          "description": "Export the function or remove if not needed",
          "content": "export function useGridRovingTabindex(options: GridRovingTabindexOptions) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-8",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 432,
        "column": 5,
        "message": "Unused variables in _useGridRovingTabindex",
        "description": "Unused variables in _useGridRovingTabindex This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove unused variables _loop2 and _typeaheadTimeout",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    loop = true,",
          "description": "Remove unused variables _loop2 and _typeaheadTimeout",
          "content": "    loop = true,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx-bug-9",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/roving-tabindex.tsx",
        "line": 435,
        "column": 5,
        "message": "Inconsistent variable naming with underscore prefix",
        "description": "Inconsistent variable naming with underscore prefix This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove underscore prefix for actually used variables",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    typeaheadTimeout = 500,",
          "description": "Remove underscore prefix for actually used variables",
          "content": "    typeaheadTimeout = 500,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 14,
        "column": 6,
        "message": "Type name should start with uppercase letter for consistency",
        "description": "Type name should start with uppercase letter for consistency This code works but could be improved for better maintainability.",
        "suggestion": "Rename 'ComponentSize' to follow exported naming convention or make it non-exported like other similar types",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type ComponentSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";",
          "description": "Rename 'ComponentSize' to follow exported naming convention or make it non-exported like other similar types",
          "content": "export type ComponentSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 24,
        "column": 6,
        "message": "Type name should start with uppercase letter for consistency",
        "description": "Type name should start with uppercase letter for consistency This code works but could be improved for better maintainability.",
        "suggestion": "Rename 'GlassIntensity' to follow exported naming convention or make it non-exported like other similar types",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type GlassIntensity = \"subtle\" | \"medium\" | \"strong\";",
          "description": "Rename 'GlassIntensity' to follow exported naming convention or make it non-exported like other similar types",
          "content": "export type GlassIntensity = \"subtle\" | \"medium\" | \"strong\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-2",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 27,
        "column": 6,
        "message": "Type name should start with uppercase letter for consistency",
        "description": "Type name should start with uppercase letter for consistency This code works but could be improved for better maintainability.",
        "suggestion": "Rename 'AnimationTiming' to follow exported naming convention or make it non-exported like other similar types",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type AnimationTiming = \"instant\" | \"fast\" | \"normal\" | \"slow\" | \"slower\";",
          "description": "Rename 'AnimationTiming' to follow exported naming convention or make it non-exported like other similar types",
          "content": "export type AnimationTiming = \"instant\" | \"fast\" | \"normal\" | \"slow\" | \"slower\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 30,
        "column": 11,
        "message": "Interface should be exported for consistency with other similar interfaces",
        "description": "Interface should be exported for consistency with other similar interfaces This code works but could be improved for better maintainability.",
        "suggestion": "Export 'GlassEffectConfig' interface to maintain consistency with other public interfaces",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface GlassEffectConfig {",
          "description": "Export 'GlassEffectConfig' interface to maintain consistency with other public interfaces",
          "content": "export interface GlassEffectConfig {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-4",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 44,
        "column": 11,
        "message": "Interface should be exported for consistency with other similar interfaces",
        "description": "Interface should be exported for consistency with other similar interfaces This code works but could be improved for better maintainability.",
        "suggestion": "Export 'BaseGlassProps' interface to maintain consistency with other public interfaces",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface BaseGlassProps {",
          "description": "Export 'BaseGlassProps' interface to maintain consistency with other public interfaces",
          "content": "export interface BaseGlassProps {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-5",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 66,
        "column": 11,
        "message": "Interface should be exported for consistency with other similar interfaces",
        "description": "Interface should be exported for consistency with other similar interfaces This code works but could be improved for better maintainability.",
        "suggestion": "Export 'InteractiveGlassProps' interface to maintain consistency with other public interfaces",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface InteractiveGlassProps extends BaseGlassProps {",
          "description": "Export 'InteractiveGlassProps' interface to maintain consistency with other public interfaces",
          "content": "export interface InteractiveGlassProps extends BaseGlassProps {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-naming-6",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 80,
        "column": 11,
        "message": "Interface should be exported for consistency with other similar interfaces",
        "description": "Interface should be exported for consistency with other similar interfaces This code works but could be improved for better maintainability.",
        "suggestion": "Export 'CompoundComponentProps' interface to maintain consistency with other public interfaces",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface CompoundComponentProps {",
          "description": "Export 'CompoundComponentProps' interface to maintain consistency with other public interfaces",
          "content": "export interface CompoundComponentProps {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts-structure-7",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/base-component.ts",
        "line": 1,
        "column": 1,
        "message": "Missing React import for React.ReactNode and React.RefObject types",
        "description": "Missing React import for React.ReactNode and React.RefObject types This code works but could be improved for better maintainability.",
        "suggestion": "Add React import to resolve React namespace types",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Base Component System - Unified interfaces and types for all Glass UI components\n *\n * This module provides the foundational interfaces and types that all Glass UI components\n * share to ensure consistency and proper composition.\n */\n\nimport React from \"react\";\nimport type {\n  ComponentPropsWithoutRef,\n  ForwardRefExoticComponent,\n  HTMLAttributes,\n  RefAttributes,\n} from \"react\";",
          "description": "Add React import to resolve React namespace types",
          "content": "/**\n * Base Component System - Unified interfaces and types for all Glass UI components\n *\n * This module provides the foundational interfaces and types that all Glass UI components\n * share to ensure consistency and proper composition.\n */\n\nimport React from \"react\";\nimport type {\n  ComponentPropsWithoutRef,\n  ForwardRefExoticComponent,\n  HTMLAttributes,\n  RefAttributes,\n} from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/navigation.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/navigation.ts",
        "line": 15,
        "column": 1,
        "message": "Empty comment section for type exports - either add actual type exports or remove the comment",
        "description": "Empty comment section for type exports - either add actual type exports or remove the comment This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the empty 'Type exports' comment section or add actual type exports if needed",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/navigation.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/navigation.ts",
        "line": 13,
        "column": 1,
        "message": "Components are not grouped alphabetically within their categories - glass-command should come before glass-skip-navigation",
        "description": "Components are not grouped alphabetically within their categories - glass-command should come before glass-skip-navigation This code works but could be improved for better maintainability.",
        "suggestion": "Reorder exports alphabetically within the 'Command and Search Components' category",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Command and Search Components\nexport * from \"../components/glass-command\";\nexport * from \"../components/glass-skip-navigation\";",
          "description": "Reorder exports alphabetically within the 'Command and Search Components' category",
          "content": "// Command and Search Components\nexport * from \"../components/glass-command\";\nexport * from \"../components/glass-skip-navigation\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts",
        "line": 7,
        "column": 1,
        "message": "Bundle naming mismatch: file named 'layout.ts' but includes button components which are not layout-related",
        "description": "Bundle naming mismatch: file named 'layout.ts' but includes button components which are not layout-related This code works but could be improved for better maintainability.",
        "suggestion": "Move button components to a separate bundle or rename this bundle to better reflect its contents",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts",
        "line": 7,
        "column": 1,
        "message": "Inconsistent component organization: mixing UI components (buttons, cards) with utility components (portal, dropdown) in a layout bundle",
        "description": "Inconsistent component organization: mixing UI components (buttons, cards) with utility components (portal, dropdown) in a layout bundle This code works but could be improved for better maintainability.",
        "suggestion": "Reorganize exports into more cohesive bundles based on functionality rather than mixing different component types",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/layout.ts",
        "line": 25,
        "column": 1,
        "message": "Empty comment section for 'Type exports' with no actual type exports",
        "description": "Empty comment section for 'Type exports' with no actual type exports This code works but could be improved for better maintainability.",
        "suggestion": "Remove empty comment section or add actual type exports if needed",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/forms.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/forms.ts",
        "line": 26,
        "column": 1,
        "message": "Empty comment section for type exports - should either contain exports or be removed",
        "description": "Empty comment section for type exports - should either contain exports or be removed This violates code style conventions and may reduce readability.",
        "suggestion": "Either add type exports or remove the empty comment section",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/forms.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/forms.ts",
        "line": 2,
        "column": 1,
        "message": "Bundle size claim in comment cannot be verified without actual component sizes",
        "description": "Bundle size claim in comment cannot be verified without actual component sizes This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding build-time bundle size verification or remove the specific size claim",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/feedback.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/feedback.ts",
        "line": 21,
        "column": 1,
        "message": "Empty comment line at end of file should be removed",
        "description": "Empty comment line at end of file should be removed This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the empty '// Type exports' comment as it has no content",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/feedback.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/feedback.ts",
        "line": 21,
        "column": 1,
        "message": "Bundle file claims to export types but has no type exports",
        "description": "Bundle file claims to export types but has no type exports This code works but could be improved for better maintainability.",
        "suggestion": "Either add type exports or remove the empty '// Type exports' comment section",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/data-display.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/data-display.ts",
        "line": 18,
        "column": 1,
        "message": "Empty comment section for type exports should be removed or have content",
        "description": "Empty comment section for type exports should be removed or have content This violates code style conventions and may reduce readability.",
        "suggestion": "Either add type exports or remove the empty comment section",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/data-display.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/data-display.ts",
        "line": 1,
        "column": 1,
        "message": "Bundle exports components but doesn't expose their TypeScript types",
        "description": "Bundle exports components but doesn't expose their TypeScript types This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type exports for better TypeScript support and IntelliSense",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts",
        "line": 17,
        "column": 18,
        "message": "Unnecessary semicolon after comment",
        "description": "Unnecessary semicolon after comment This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the semicolon after the comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Type exports",
          "description": "Remove the semicolon after the comment",
          "content": "// Type exports"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts",
        "line": 18,
        "column": 1,
        "message": "Trailing empty lines should be removed",
        "description": "Trailing empty lines should be removed This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty line",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts-structure-2",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/core.ts",
        "line": 17,
        "column": 1,
        "message": "Empty export section with comment indicates incomplete implementation",
        "description": "Empty export section with comment indicates incomplete implementation This code works but could be improved for better maintainability.",
        "suggestion": "Either add type exports or remove the empty comment section",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/accessibility.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/accessibility.ts",
        "line": 16,
        "column": 1,
        "message": "Empty comment section for type exports should be removed or populated",
        "description": "Empty comment section for type exports should be removed or populated This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the empty 'Type exports' comment section or add actual type exports",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/accessibility.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/bundles/accessibility.ts",
        "line": 7,
        "column": 1,
        "message": "Bundle file exports components that may not exist - potential broken imports",
        "description": "Bundle file exports components that may not exist - potential broken imports This code works but could be improved for better maintainability.",
        "suggestion": "Verify that all exported components exist at their specified paths and consider adding error handling for missing modules",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 117,
        "column": 21,
        "message": "Input labels are associated with incorrect or non-existent input IDs",
        "description": "Input labels are associated with incorrect or non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Ensure htmlFor attributes match actual input IDs or use proper form association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Email Input\n                    </label>\n                    <GlassInput\n                      id=\"email-input\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      icon={<Mail className=\"h-4 w-4\" />}\n                    />",
          "description": "Ensure htmlFor attributes match actual input IDs or use proper form association",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Email Input\n                    </label>\n                    <GlassInput\n                      id=\"email-input\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      icon={<Mail className=\"h-4 w-4\" />}\n                    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 125,
        "column": 21,
        "message": "Input labels are associated with incorrect or non-existent input IDs",
        "description": "Input labels are associated with incorrect or non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Ensure htmlFor attributes match actual input IDs or use proper form association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Search Input\n                    </label>\n                    <GlassInput\n                      id=\"search-input\"\n                      type=\"search\"\n                      placeholder=\"Search...\"\n                      value={search}\n                      onChange={(e) => setSearch(e.target.value)}\n                      icon={<Search className=\"h-4 w-4\" />}\n                    />",
          "description": "Ensure htmlFor attributes match actual input IDs or use proper form association",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Search Input\n                    </label>\n                    <GlassInput\n                      id=\"search-input\"\n                      type=\"search\"\n                      placeholder=\"Search...\"\n                      value={search}\n                      onChange={(e) => setSearch(e.target.value)}\n                      icon={<Search className=\"h-4 w-4\" />}\n                    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 135,
        "column": 21,
        "message": "Input labels are associated with incorrect or non-existent input IDs",
        "description": "Input labels are associated with incorrect or non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Ensure htmlFor attributes match actual input IDs or use proper form association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Disabled Input\n                    </label>\n                    <GlassInput\n                      id=\"disabled-input\"\n                      disabled\n                      placeholder=\"This input is disabled\"\n                    />",
          "description": "Ensure htmlFor attributes match actual input IDs or use proper form association",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Disabled Input\n                    </label>\n                    <GlassInput\n                      id=\"disabled-input\"\n                      disabled\n                      placeholder=\"This input is disabled\"\n                    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 144,
        "column": 21,
        "message": "Label has htmlFor attribute but associated form control may not have matching ID",
        "description": "Label has htmlFor attribute but associated form control may not have matching ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the form control has a matching ID attribute",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"font-medium text-sm\">\n                      Enable notifications\n                    </label>\n                    <GlassSwitch\n                      id=\"enable-notifications\"\n                      checked={switchOn}\n                      onChange={setSwitchOn}\n                    />",
          "description": "Ensure the form control has a matching ID attribute",
          "content": "                    <label className=\"font-medium text-sm\">\n                      Enable notifications\n                    </label>\n                    <GlassSwitch\n                      id=\"enable-notifications\"\n                      checked={switchOn}\n                      onChange={setSwitchOn}\n                    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 153,
        "column": 21,
        "message": "Label has htmlFor attribute but associated form control may not have matching ID",
        "description": "Label has htmlFor attribute but associated form control may not have matching ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the checkbox has a matching ID attribute",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <GlassCheckbox\n                      id=\"agree-terms\"\n                      checked={checked}\n                      onChange={setChecked}\n                    />\n                    <label htmlFor=\"agree-terms\" className=\"text-sm\">\n                      I agree to the terms\n                    </label>",
          "description": "Ensure the checkbox has a matching ID attribute",
          "content": "                    <GlassCheckbox\n                      id=\"agree-terms\"\n                      checked={checked}\n                      onChange={setChecked}\n                    />\n                    <label htmlFor=\"agree-terms\" className=\"text-sm\">\n                      I agree to the terms\n                    </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 161,
        "column": 21,
        "message": "Label has htmlFor attribute but associated form control may not have matching ID",
        "description": "Label has htmlFor attribute but associated form control may not have matching ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the progress component has a matching ID attribute",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Progress ({progress}%)\n                    </label>\n                    <GlassProgress id=\"progress\" value={progress} />",
          "description": "Ensure the progress component has a matching ID attribute",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Progress ({progress}%)\n                    </label>\n                    <GlassProgress id=\"progress\" value={progress} />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 168,
        "column": 21,
        "message": "Label has htmlFor attribute but associated form control may not have matching ID",
        "description": "Label has htmlFor attribute but associated form control may not have matching ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the slider component has a matching ID attribute",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Volume ({slider})\n                    </label>\n                    <GlassSlider\n                      id=\"volume-slider\"\n                      value={slider}\n                      onChange={setSlider}\n                      min={0}\n                      max={100}\n                    />",
          "description": "Ensure the slider component has a matching ID attribute",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\">\n                      Volume ({slider})\n                    </label>\n                    <GlassSlider\n                      id=\"volume-slider\"\n                      value={slider}\n                      onChange={setSlider}\n                      min={0}\n                      max={100}\n                    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 31,
        "column": 5,
        "message": "Direct DOM manipulation in useEffect could cause performance issues",
        "description": "Direct DOM manipulation in useEffect could cause performance issues This implementation could impact application performance.",
        "suggestion": "Consider using CSS-in-JS or a more React-friendly approach for theme switching",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx-convention-8",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/theme-showcase.stories.tsx",
        "line": 24,
        "column": 38,
        "message": "Variable name uses underscore prefix indicating unused parameter",
        "description": "Variable name uses underscore prefix indicating unused parameter This code works but could be improved for better maintainability.",
        "suggestion": "Remove the underscore prefix if the variable is used, or replace with _ if truly unused",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [progress] = React.useState(65);",
          "description": "Remove the underscore prefix if the variable is used, or replace with _ if truly unused",
          "content": "    const [progress] = React.useState(65);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 259,
        "column": 1,
        "message": "Direct DOM manipulation can lead to security issues and conflicts with React's virtual DOM",
        "description": "Direct DOM manipulation can lead to security issues and conflicts with React's virtual DOM This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Move CSS keyframes to a CSS file or use CSS-in-JS solutions instead of direct DOM manipulation",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Move this to your global CSS file or use styled-components\n// @keyframes slide {\n//   from { transform: translateX(0); }\n//   to { transform: translateX(calc(100% - 3rem)); }\n// }",
          "description": "Move CSS keyframes to a CSS file or use CSS-in-JS solutions instead of direct DOM manipulation",
          "content": "// Move this to your global CSS file or use styled-components\n// @keyframes slide {\n//   from { transform: translateX(0); }\n//   to { transform: translateX(calc(100% - 3rem)); }\n// }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 29,
        "column": 21,
        "message": "Inline styles in render functions can cause performance issues due to object recreation on every render",
        "description": "Inline styles in render functions can cause performance issues due to object recreation on every render This implementation could impact application performance.",
        "suggestion": "Extract static styles to CSS classes or memoize dynamic styles",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 54,
        "column": 19,
        "message": "Inline styles in render functions can cause performance issues due to object recreation on every render",
        "description": "Inline styles in render functions can cause performance issues due to object recreation on every render This implementation could impact application performance.",
        "suggestion": "Extract static styles to CSS classes or memoize dynamic styles",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 234,
        "column": 5,
        "message": "Color swatches lack proper accessibility attributes for screen readers",
        "description": "Color swatches lack proper accessibility attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role, aria-label, and other accessibility attributes to color swatches",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div\n        className=\"h-12 w-12 rounded-lg border border-gray-300 dark:border-gray-600\"\n        role=\"img\"\n        aria-label={`Color swatch for ${label}: ${color}`}\n        style={{\n          background: color,\n          ...(isGradient ? {} : { backgroundColor: color }),\n        }}\n      />",
          "description": "Add role, aria-label, and other accessibility attributes to color swatches",
          "content": "      <div\n        className=\"h-12 w-12 rounded-lg border border-gray-300 dark:border-gray-600\"\n        role=\"img\"\n        aria-label={`Color swatch for ${label}: ${color}`}\n        style={{\n          background: color,\n          ...(isGradient ? {} : { backgroundColor: color }),\n        }}\n      />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 184,
        "column": 15,
        "message": "Interactive animation elements should have proper ARIA labels and keyboard navigation support",
        "description": "Interactive animation elements should have proper ARIA labels and keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add ARIA labels and keyboard interaction support for animated elements",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 206,
        "column": 11,
        "message": "Magic numbers used for blur values should be defined as constants",
        "description": "Magic numbers used for blur values should be defined as constants This violates code style conventions and may reduce readability.",
        "suggestion": "Define blur values as named constants at the top of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Add at the top of the file after imports\nconst BLUR_VALUES = [0, 4, 8, 12, 16, 20, 24, 32] as const;\n\n// Then use in the component:\n{BLUR_VALUES.map((blur) => (",
          "description": "Define blur values as named constants at the top of the file",
          "content": "// Add at the top of the file after imports\nconst BLUR_VALUES = [0, 4, 8, 12, 16, 20, 24, 32] as const;\n\n// Then use in the component:\n{BLUR_VALUES.map((blur) => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/design-tokens.stories.tsx",
        "line": 162,
        "column": 11,
        "message": "Animation timing configuration should be extracted to avoid object recreation",
        "description": "Animation timing configuration should be extracted to avoid object recreation This implementation could impact application performance.",
        "suggestion": "Move animation configuration to a constant outside the component",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Add at the top of the file\nconst ANIMATION_CONFIGS = [\n  { name: \"Fast\", duration: \"150ms\", easing: \"ease-out\" },\n  { name: \"Normal\", duration: \"300ms\", easing: \"ease-in-out\" },\n  { name: \"Slow\", duration: \"500ms\", easing: \"ease-in-out\" },\n  {\n    name: \"Spring\",\n    duration: \"700ms\",\n    easing: \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\",\n  },\n] as const;\n\n// Then use in component:\n{ANIMATION_CONFIGS.map(({ name, duration, easing }) => (",
          "description": "Move animation configuration to a constant outside the component",
          "content": "// Add at the top of the file\nconst ANIMATION_CONFIGS = [\n  { name: \"Fast\", duration: \"150ms\", easing: \"ease-out\" },\n  { name: \"Normal\", duration: \"300ms\", easing: \"ease-in-out\" },\n  { name: \"Slow\", duration: \"500ms\", easing: \"ease-in-out\" },\n  {\n    name: \"Spring\",\n    duration: \"700ms\",\n    easing: \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\",\n  },\n] as const;\n\n// Then use in component:\n{ANIMATION_CONFIGS.map(({ name, duration, easing }) => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 84,
        "column": 9,
        "message": "Interactive element missing accessible label",
        "description": "Interactive element missing accessible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or title attribute to describe the animation purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <motion.div\n          className=\"h-16 w-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 cursor-pointer\"\n          animate={\n            isAnimating ? { scale: [1, 1.2, 1], rotate: [0, 180, 360] } : {}\n          }\n          transition={{ type: \"spring\", ...spring }}\n          onClick={handleClick}\n          aria-label={`Click to see ${title} animation`}\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              handleClick();\n            }\n          }}\n        />",
          "description": "Add aria-label or title attribute to describe the animation purpose",
          "content": "        <motion.div\n          className=\"h-16 w-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 cursor-pointer\"\n          animate={\n            isAnimating ? { scale: [1, 1.2, 1], rotate: [0, 180, 360] } : {}\n          }\n          transition={{ type: \"spring\", ...spring }}\n          onClick={handleClick}\n          aria-label={`Click to see ${title} animation`}\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              handleClick();\n            }\n          }}\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 84,
        "column": 9,
        "message": "Motion animation without reduced motion preference check",
        "description": "Motion animation without reduced motion preference check This code works but could be improved for better maintainability.",
        "suggestion": "Check user's motion preferences before applying animations",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 79,
        "column": 5,
        "message": "setTimeout without cleanup in component",
        "description": "setTimeout without cleanup in component This implementation could impact application performance.",
        "suggestion": "Clear timeout on component unmount to prevent memory leaks",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const handleClick = () => {\n    setIsAnimating(true);\n    const timeoutId = setTimeout(() => setIsAnimating(false), 1000);\n    return () => clearTimeout(timeoutId);\n  };",
          "description": "Clear timeout on component unmount to prevent memory leaks",
          "content": "  const handleClick = () => {\n    setIsAnimating(true);\n    const timeoutId = setTimeout(() => setIsAnimating(false), 1000);\n    return () => clearTimeout(timeoutId);\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 153,
        "column": 9,
        "message": "Interactive elements in hover grid missing keyboard navigation",
        "description": "Interactive elements in hover grid missing keyboard navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add keyboard event handlers and proper focus management",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {([\"scale\", \"lift\", \"rotate\", \"glow\"] as const).map((type) => (\n          <motion.div\n            key={type}\n            {...createHoverAnimation(type)}\n            className=\"aspect-square\"\n            tabIndex={0}\n            role=\"button\"\n            aria-label={`Hover effect: ${type}`}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                // Trigger hover effect programmatically\n              }\n            }}\n          >\n            <GlassCard\n              className={`flex h-full cursor-pointer items-center justify-center ${type === \"glow\" ? \"border-2 border-transparent transition-colors\" : \"\"}`}\n            >\n              <span className=\"font-medium text-sm capitalize\">{type}</span>\n            </GlassCard>\n          </motion.div>\n        ))}",
          "description": "Add keyboard event handlers and proper focus management",
          "content": "        {([\"scale\", \"lift\", \"rotate\", \"glow\"] as const).map((type) => (\n          <motion.div\n            key={type}\n            {...createHoverAnimation(type)}\n            className=\"aspect-square\"\n            tabIndex={0}\n            role=\"button\"\n            aria-label={`Hover effect: ${type}`}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                // Trigger hover effect programmatically\n              }\n            }}\n          >\n            <GlassCard\n              className={`flex h-full cursor-pointer items-center justify-center ${type === \"glow\" ? \"border-2 border-transparent transition-colors\" : \"\"}`}\n            >\n              <span className=\"font-medium text-sm capitalize\">{type}</span>\n            </GlassCard>\n          </motion.div>\n        ))}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 228,
        "column": 15,
        "message": "Button missing proper accessible label for heart animation",
        "description": "Button missing proper accessible label for heart animation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the current state and action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <motion.button\n                onClick={() => setLiked(!liked)}\n                whileTap={{ scale: 0.8 }}\n                className=\"p-4\"\n                aria-label={liked ? \"Unlike\" : \"Like\"}\n                aria-pressed={liked}\n              >",
          "description": "Add aria-label to describe the current state and action",
          "content": "              <motion.button\n                onClick={() => setLiked(!liked)}\n                whileTap={{ scale: 0.8 }}\n                className=\"p-4\"\n                aria-label={liked ? \"Unlike\" : \"Like\"}\n                aria-pressed={liked}\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 212,
        "column": 7,
        "message": "setTimeout without cleanup in sparkle handler",
        "description": "setTimeout without cleanup in sparkle handler This implementation could impact application performance.",
        "suggestion": "Store timeout reference for cleanup",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const handleSparkleClick = () => {\n      setSparkles(true);\n      const timeoutId = setTimeout(() => setSparkles(false), 1000);\n      // Note: Consider using useEffect with cleanup for proper timeout management\n    };",
          "description": "Store timeout reference for cleanup",
          "content": "    const handleSparkleClick = () => {\n      setSparkles(true);\n      const timeoutId = setTimeout(() => setSparkles(false), 1000);\n      // Note: Consider using useEffect with cleanup for proper timeout management\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/design-system/animation-patterns.stories.tsx",
        "line": 351,
        "column": 9,
        "message": "Page transition content lacks proper ARIA live region",
        "description": "Page transition content lacks proper ARIA live region This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live region to announce page changes to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div className=\"relative h-64 overflow-hidden\" aria-live=\"polite\">\n          <motion.div\n            key={page}\n            initial={{ x: 300, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: -300, opacity: 0 }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            className=\"absolute inset-0\"\n            role=\"tabpanel\"\n            aria-labelledby={`tab-${page}`}\n          >\n            <GlassCard className=\"flex h-full items-center justify-center\">\n              <div className=\"text-center\">\n                <h3 className=\"mb-4 font-bold text-3xl\" id={`tab-${page}`}>{pages[page]}</h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  This is the {pages[page].toLowerCase()} page content\n                </p>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </div>",
          "description": "Add aria-live region to announce page changes to screen readers",
          "content": "        <div className=\"relative h-64 overflow-hidden\" aria-live=\"polite\">\n          <motion.div\n            key={page}\n            initial={{ x: 300, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: -300, opacity: 0 }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            className=\"absolute inset-0\"\n            role=\"tabpanel\"\n            aria-labelledby={`tab-${page}`}\n          >\n            <GlassCard className=\"flex h-full items-center justify-center\">\n              <div className=\"text-center\">\n                <h3 className=\"mb-4 font-bold text-3xl\" id={`tab-${page}`}>{pages[page]}</h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  This is the {pages[page].toLowerCase()} page content\n                </p>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 96,
        "column": 17,
        "message": "Missing htmlFor attribute on label element to properly associate with the GlassInput",
        "description": "Missing htmlFor attribute on label element to properly associate with the GlassInput This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to associate the label with the input element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <GlassVisuallyHidden as=\"label\" htmlFor=\"username\">\n                  Search for products\n                </GlassVisuallyHidden>",
          "description": "Add htmlFor attribute to associate the label with the input element",
          "content": "                <GlassVisuallyHidden as=\"label\" htmlFor=\"username\">\n                  Search for products\n                </GlassVisuallyHidden>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 115,
        "column": 29,
        "message": "Using sr-only class which may not be defined in the current CSS framework",
        "description": "Using sr-only class which may not be defined in the current CSS framework This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent visually hidden approach with GlassVisuallyHidden component instead of sr-only class",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                className=\"focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded focus:bg-blue-500 focus:px-4 focus:py-2 focus:text-white focus:block\"",
          "description": "Use consistent visually hidden approach with GlassVisuallyHidden component instead of sr-only class",
          "content": "                className=\"focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded focus:bg-blue-500 focus:px-4 focus:py-2 focus:text-white focus:block\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 236,
        "column": 15,
        "message": "Table caption uses sr-only class instead of proper visually hidden component",
        "description": "Table caption uses sr-only class instead of proper visually hidden component This code works but could be improved for better maintainability.",
        "suggestion": "Use GlassVisuallyHidden component for consistency",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassVisuallyHidden as=\"caption\">\n                Team member list showing name, role, and current status\n              </GlassVisuallyHidden>",
          "description": "Use GlassVisuallyHidden component for consistency",
          "content": "              <GlassVisuallyHidden as=\"caption\">\n                Team member list showing name, role, and current status\n              </GlassVisuallyHidden>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 141,
        "column": 21,
        "message": "Potential performance issue with object spread in onChange handler inside render",
        "description": "Potential performance issue with object spread in onChange handler inside render This implementation could impact application performance.",
        "suggestion": "Move onChange handlers outside of render or use useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 156,
        "column": 21,
        "message": "Potential performance issue with object spread in onChange handler inside render",
        "description": "Potential performance issue with object spread in onChange handler inside render This implementation could impact application performance.",
        "suggestion": "Move onChange handlers outside of render or use useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-visually-hidden.stories.tsx",
        "line": 178,
        "column": 21,
        "message": "Potential performance issue with object spread in onChange handler inside render",
        "description": "Potential performance issue with object spread in onChange handler inside render This implementation could impact application performance.",
        "suggestion": "Move onChange handlers outside of render or use useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx",
        "line": 164,
        "column": 13,
        "message": "Interactive elements should have accessible labels for screen readers",
        "description": "Interactive elements should have accessible labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby attributes to GlassTreeView components for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassTreeView\n            nodes={fileSystemNodes}\n            selectedNodeId={selectedNodeId}\n            onNodeSelect={(node) => setSelectedNodeId(node.id)}\n            aria-label=\"File explorer tree view\"\n          />",
          "description": "Add aria-label or aria-labelledby attributes to GlassTreeView components for better accessibility",
          "content": "          <GlassTreeView\n            nodes={fileSystemNodes}\n            selectedNodeId={selectedNodeId}\n            onNodeSelect={(node) => setSelectedNodeId(node.id)}\n            aria-label=\"File explorer tree view\"\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx",
        "line": 344,
        "column": 9,
        "message": "Interactive elements should have accessible labels for screen readers",
        "description": "Interactive elements should have accessible labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to GlassTreeView component for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassTreeView\n          nodes={nodes}\n          selectedNodeId={selectedNodeId}\n          onNodeSelect={(node) => setSelectedNodeId(node.id)}\n          showIcons\n          aria-label=\"Interactive file tree view\"\n        />",
          "description": "Add aria-label to GlassTreeView component for better accessibility",
          "content": "        <GlassTreeView\n          nodes={nodes}\n          selectedNodeId={selectedNodeId}\n          onNodeSelect={(node) => setSelectedNodeId(node.id)}\n          showIcons\n          aria-label=\"Interactive file tree view\"\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx",
        "line": 302,
        "column": 20,
        "message": "Using Date.now() in render function can cause unnecessary re-renders and performance issues",
        "description": "Using Date.now() in render function can cause unnecessary re-renders and performance issues This implementation could impact application performance.",
        "suggestion": "Use a more predictable ID generation method or move the ID generation outside the render cycle",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        id: `new-file-${nodes.length + 1}`,",
          "description": "Use a more predictable ID generation method or move the ID generation outside the render cycle",
          "content": "        id: `new-file-${nodes.length + 1}`,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx",
        "line": 5,
        "column": 10,
        "message": "Unused import detected",
        "description": "Unused import detected This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused GlassButton import or use it in the code",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-tree-view.stories.tsx",
        "line": 61,
        "column": 12,
        "message": "React components are being recreated on every render inside data structures",
        "description": "React components are being recreated on every render inside data structures This implementation could impact application performance.",
        "suggestion": "Move icon components outside of the data structure or memoize them to prevent recreation",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx",
        "line": 175,
        "column": 9,
        "message": "Missing role attribute for interactive div element",
        "description": "Missing role attribute for interactive div element This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button' and tabIndex={0} to make the interactive div properly accessible",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div\n          className=\"cursor-pointer rounded-lg p-3 transition-colors hover:bg-white/5\"\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => setSelectedItem(item.id)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              e.preventDefault();\n              setSelectedItem(item.id);\n            }\n          }}\n        >",
          "description": "Add role='button' and tabIndex={0} to make the interactive div properly accessible",
          "content": "        <div\n          className=\"cursor-pointer rounded-lg p-3 transition-colors hover:bg-white/5\"\n          role=\"button\"\n          tabIndex={0}\n          onClick={() => setSelectedItem(item.id)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              e.preventDefault();\n              setSelectedItem(item.id);\n            }\n          }}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx",
        "line": 181,
        "column": 15,
        "message": "Unnecessary IIFE wrapper in onKeyDown event handler",
        "description": "Unnecessary IIFE wrapper in onKeyDown event handler This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the unnecessary IIFE wrapper and call setSelectedItem directly",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              setSelectedItem(item.id);",
          "description": "Remove the unnecessary IIFE wrapper and call setSelectedItem directly",
          "content": "              setSelectedItem(item.id);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-timeline.stories.tsx",
        "line": 196,
        "column": 19,
        "message": "Array.find() called multiple times with same predicate in render",
        "description": "Array.find() called multiple times with same predicate in render This implementation could impact application performance.",
        "suggestion": "Cache the found item to avoid multiple Array.find() calls",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            {selectedItem ? (\n              (() => {\n                const foundItem = sampleItems.find((i) => i.id === selectedItem);\n                return foundItem ? (\n                  <div>\n                    <h4 className=\"mb-2 font-bold\">\n                      {foundItem.title}\n                    </h4>\n                    <p className=\"text-[var(--text-secondary)]\">\n                      {foundItem.description}\n                    </p>\n                    <p className=\"mt-4 text-sm\">\n                      Date: {foundItem.date}\n                    </p>\n                  </div>\n                ) : null;\n              })()\n            ) : (",
          "description": "Cache the found item to avoid multiple Array.find() calls",
          "content": "            {selectedItem ? (\n              (() => {\n                const foundItem = sampleItems.find((i) => i.id === selectedItem);\n                return foundItem ? (\n                  <div>\n                    <h4 className=\"mb-2 font-bold\">\n                      {foundItem.title}\n                    </h4>\n                    <p className=\"text-[var(--text-secondary)]\">\n                      {foundItem.description}\n                    </p>\n                    <p className=\"mt-4 text-sm\">\n                      Date: {foundItem.date}\n                    </p>\n                  </div>\n                ) : null;\n              })()\n            ) : ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 46,
        "column": 13,
        "message": "Modal lacks proper ARIA attributes and keyboard navigation support",
        "description": "Modal lacks proper ARIA attributes and keyboard navigation support This will likely cause errors during execution.",
        "suggestion": "Add role='dialog', aria-labelledby, aria-modal, and implement focus management with useEffect",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"portal-title\">",
          "description": "Add role='dialog', aria-labelledby, aria-modal, and implement focus management with useEffect",
          "content": "              <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"portal-title\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 53,
        "column": 21,
        "message": "Close button lacks accessible label for screen readers",
        "description": "Close button lacks accessible label for screen readers This will likely cause errors during execution.",
        "suggestion": "Add aria-label to provide context for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <button\n                      type=\"button\"\n                      onClick={() => setShowPortal(false)}\n                      className=\"rounded-lg p-1 transition-colors hover:bg-white/10\"\n                      aria-label=\"Close modal\"\n                    >",
          "description": "Add aria-label to provide context for screen readers",
          "content": "                    <button\n                      type=\"button\"\n                      onClick={() => setShowPortal(false)}\n                      className=\"rounded-lg p-1 transition-colors hover:bg-white/10\"\n                      aria-label=\"Close modal\"\n                    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 30,
        "column": 11,
        "message": "Missing focus management - modal should trap focus and restore focus on close",
        "description": "Missing focus management - modal should trap focus and restore focus on close This code works but could be improved for better maintainability.",
        "suggestion": "Implement focus trapping using useEffect to manage focus within the modal",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 46,
        "column": 13,
        "message": "Missing keyboard event handling - modal should close on Escape key",
        "description": "Missing keyboard event handling - modal should close on Escape key This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown event handler to close modal on Escape key press",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 47,
        "column": 17,
        "message": "Modal backdrop click area lacks proper keyboard accessibility",
        "description": "Modal backdrop click area lacks proper keyboard accessibility This will likely cause errors during execution.",
        "suggestion": "Add role and keyboard event handlers to backdrop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <div\n                  className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n                  onClick={() => setShowPortal(false)}\n                  role=\"button\"\n                  tabIndex={-1}\n                  aria-label=\"Close modal\"\n                />",
          "description": "Add role and keyboard event handlers to backdrop",
          "content": "                <div\n                  className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n                  onClick={() => setShowPortal(false)}\n                  role=\"button\"\n                  tabIndex={-1}\n                  aria-label=\"Close modal\"\n                />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 154,
        "column": 15,
        "message": "Tooltip lacks proper ARIA attributes for screen readers",
        "description": "Tooltip lacks proper ARIA attributes for screen readers This will likely cause errors during execution.",
        "suggestion": "Add aria-describedby to button and id to tooltip for proper association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <div\n                className=\"pointer-events-none fixed z-50\"\n                style={{\n                  left: tooltipPosition.x,\n                  top: tooltipPosition.y,\n                  transform: \"translate(-50%, -100%)\",\n                }}\n                role=\"tooltip\"\n                id=\"hover-tooltip\"\n              >",
          "description": "Add aria-describedby to button and id to tooltip for proper association",
          "content": "              <div\n                className=\"pointer-events-none fixed z-50\"\n                style={{\n                  left: tooltipPosition.x,\n                  top: tooltipPosition.y,\n                  transform: \"translate(-50%, -100%)\",\n                }}\n                role=\"tooltip\"\n                id=\"hover-tooltip\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 143,
        "column": 9,
        "message": "Button should have aria-describedby to reference tooltip",
        "description": "Button should have aria-describedby to reference tooltip This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby attribute to associate button with tooltip",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          ref={buttonRef}\n          type=\"button\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          aria-describedby={showTooltip ? \"hover-tooltip\" : undefined}\n        >",
          "description": "Add aria-describedby attribute to associate button with tooltip",
          "content": "        <GlassButton\n          ref={buttonRef}\n          type=\"button\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          aria-describedby={showTooltip ? \"hover-tooltip\" : undefined}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 45,
        "column": 11,
        "message": "Multiple portal instances may cause performance issues with frequent re-renders",
        "description": "Multiple portal instances may cause performance issues with frequent re-renders This implementation could impact application performance.",
        "suggestion": "Consider memoizing portal content or using a portal manager for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-memory-leak-8",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 133,
        "column": 33,
        "message": "Event listeners in tooltip example may not be properly cleaned up",
        "description": "Event listeners in tooltip example may not be properly cleaned up This code works but could be improved for better maintainability.",
        "suggestion": "Add cleanup in useEffect for any global event listeners if added later",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx-style-9",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-portal.stories.tsx",
        "line": 46,
        "column": 51,
        "message": "Inconsistent z-index values across modals could cause stacking issues",
        "description": "Inconsistent z-index values across modals could cause stacking issues This violates code style conventions and may reduce readability.",
        "suggestion": "Define consistent z-index scale using CSS custom properties or constants",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 73,
        "column": 19,
        "message": "Unnecessary IIFE wrapper around function call in onKeyDown handler",
        "description": "Unnecessary IIFE wrapper around function call in onKeyDown handler This code works but could be improved for better maintainability.",
        "suggestion": "Remove the IIFE wrapper and call the function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  setIsLive(!isLive);",
          "description": "Remove the IIFE wrapper and call the function directly",
          "content": "                  setIsLive(!isLive);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 182,
        "column": 23,
        "message": "Unnecessary IIFE wrapper around function call in onKeyDown handler",
        "description": "Unnecessary IIFE wrapper around function call in onKeyDown handler This code works but could be improved for better maintainability.",
        "suggestion": "Remove the IIFE wrapper and call the function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      setSelectedMetric(metric.id);",
          "description": "Remove the IIFE wrapper and call the function directly",
          "content": "                      setSelectedMetric(metric.id);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 234,
        "column": 23,
        "message": "Unnecessary IIFE wrapper around function call in onKeyDown handler",
        "description": "Unnecessary IIFE wrapper around function call in onKeyDown handler This code works but could be improved for better maintainability.",
        "suggestion": "Remove the IIFE wrapper and call the function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      setChartType(type);",
          "description": "Remove the IIFE wrapper and call the function directly",
          "content": "                      setChartType(type);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 283,
        "column": 47,
        "message": "Math.random() called directly in JSX render causing unnecessary re-renders",
        "description": "Math.random() called directly in JSX render causing unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move random value generation to useState or useMemo to prevent recalculation on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Move random value generation to useState or useMemo to prevent recalculation on every render",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 158,
        "column": 17,
        "message": "Button missing accessible name or aria-label",
        "description": "Button missing accessible name or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text content to button for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <button\n                  type=\"button\"\n                  key={metric.id}\n                  onClick={() => setSelectedMetric(metric.id)}\n                  aria-label={`Select ${metric.label} metric`}\n                  className={`rounded-lg px-4 py-2 transition-all ${\n                    selectedMetric === metric.id\n                      ? `bg-${metric.color}-500/20 text-${metric.color}-400 border border-${metric.color}-500/50`\n                      : \"bg-white/5 text-white/70 hover:bg-white/10\"\n                  }`}",
          "description": "Add aria-label or accessible text content to button for screen readers",
          "content": "                <button\n                  type=\"button\"\n                  key={metric.id}\n                  onClick={() => setSelectedMetric(metric.id)}\n                  aria-label={`Select ${metric.label} metric`}\n                  className={`rounded-lg px-4 py-2 transition-all ${\n                    selectedMetric === metric.id\n                      ? `bg-${metric.color}-500/20 text-${metric.color}-400 border border-${metric.color}-500/50`\n                      : \"bg-white/5 text-white/70 hover:bg-white/10\"\n                  }`}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 374,
        "column": 21,
        "message": "Button missing accessible name or aria-label for dismiss functionality",
        "description": "Button missing accessible name or aria-label for dismiss functionality This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to dismiss button for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setAlerts((prev) =>\n                          prev.filter((a) => a.id !== alert.id),\n                        )\n                      }\n                      aria-label=\"Dismiss alert\"\n                      className=\"text-white/50 hover:text-white\"",
          "description": "Add aria-label to dismiss button for screen readers",
          "content": "                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setAlerts((prev) =>\n                          prev.filter((a) => a.id !== alert.id),\n                        )\n                      }\n                      aria-label=\"Dismiss alert\"\n                      className=\"text-white/50 hover:text-white\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 278,
        "column": 15,
        "message": "Range input missing accessible label",
        "description": "Range input missing accessible label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a label element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"4\"\n                value={columns}\n                onChange={(e) => setColumns(Number(e.target.value))}\n                aria-label=\"Select number of grid columns\"\n                className=\"flex-1\"",
          "description": "Add aria-label or associate with a label element",
          "content": "              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"4\"\n                value={columns}\n                onChange={(e) => setColumns(Number(e.target.value))}\n                aria-label=\"Select number of grid columns\"\n                className=\"flex-1\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx-memory-leak-7",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-performance-dashboard.stories.tsx",
        "line": 311,
        "column": 9,
        "message": "setInterval not cleared on component unmount in useEffect",
        "description": "setInterval not cleared on component unmount in useEffect This code works but could be improved for better maintainability.",
        "suggestion": "The cleanup function correctly clears the interval, but ensure this component is properly unmounted",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 80,
        "column": 12,
        "message": "Using alert() can be blocked by popup blockers and is not user-friendly",
        "description": "Using alert() can be blocked by popup blockers and is not user-friendly This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace alert() with a proper notification system or toast component",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 85,
        "column": 12,
        "message": "Using alert() can be blocked by popup blockers and is not user-friendly",
        "description": "Using alert() can be blocked by popup blockers and is not user-friendly This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Replace alert() with a proper notification system or toast component",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 44,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <Home className=\"h-5 w-5\" aria-label=\"Home\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <Home className=\"h-5 w-5\" aria-label=\"Home\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 49,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <User className=\"h-5 w-5\" aria-label=\"Profile\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <User className=\"h-5 w-5\" aria-label=\"Profile\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 62,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <FileText className=\"h-5 w-5\" aria-label=\"Documentation\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <FileText className=\"h-5 w-5\" aria-label=\"Documentation\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 75,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <Settings className=\"h-5 w-5\" aria-label=\"Settings\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <Settings className=\"h-5 w-5\" aria-label=\"Settings\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 79,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <HelpCircle className=\"h-5 w-5\" aria-label=\"Help and Support\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <HelpCircle className=\"h-5 w-5\" aria-label=\"Help and Support\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 84,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <LogOut className=\"h-5 w-5\" aria-label=\"Logout\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <LogOut className=\"h-5 w-5\" aria-label=\"Logout\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 189,
        "column": 13,
        "message": "Missing alt text or aria-label for icon elements used in navigation",
        "description": "Missing alt text or aria-label for icon elements used in navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or alt attributes to icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "icon: <Menu className=\"h-5 w-5\" aria-label=\"Products menu\" />",
          "description": "Add aria-label or alt attributes to icons for screen readers",
          "content": "icon: <Menu className=\"h-5 w-5\" aria-label=\"Products menu\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-mobile-nav.stories.tsx",
        "line": 228,
        "column": 11,
        "message": "React component being recreated on every render in InteractiveDemo story",
        "description": "React component being recreated on every render in InteractiveDemo story This implementation could impact application performance.",
        "suggestion": "Move items mapping outside the render function or use useMemo to prevent unnecessary recreations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const items = React.useMemo(() => \n      navigationItems.map((item) => ({\n        ...item,\n        action: () => setLastAction(`Clicked: ${item.label}`),\n      }))\n    , []);",
          "description": "Move items mapping outside the render function or use useMemo to prevent unnecessary recreations",
          "content": "    const items = React.useMemo(() => \n      navigationItems.map((item) => ({\n        ...item,\n        action: () => setLastAction(`Clicked: ${item.label}`),\n      }))\n    , []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 134,
        "column": 15,
        "message": "Form labels should be properly associated with their inputs using htmlFor attribute",
        "description": "Form labels should be properly associated with their inputs using htmlFor attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to label and id attribute to corresponding input",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label htmlFor=\"email-input\" className=\"mb-2 block font-medium text-sm\">Email</label>\n              <GlassInput\n                id=\"email-input\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                className={errors.email ? \"border-red-500\" : \"\"}\n              />",
          "description": "Add htmlFor attribute to label and id attribute to corresponding input",
          "content": "              <label htmlFor=\"email-input\" className=\"mb-2 block font-medium text-sm\">Email</label>\n              <GlassInput\n                id=\"email-input\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                className={errors.email ? \"border-red-500\" : \"\"}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 148,
        "column": 15,
        "message": "Form labels should be properly associated with their inputs using htmlFor attribute",
        "description": "Form labels should be properly associated with their inputs using htmlFor attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to label and id attribute to corresponding input",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label htmlFor=\"password-input\" className=\"mb-2 block font-medium text-sm\">Password</label>\n              <GlassInput\n                id=\"password-input\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                className={errors.password ? \"border-red-500\" : \"\"}\n              />",
          "description": "Add htmlFor attribute to label and id attribute to corresponding input",
          "content": "              <label htmlFor=\"password-input\" className=\"mb-2 block font-medium text-sm\">Password</label>\n              <GlassInput\n                id=\"password-input\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                className={errors.password ? \"border-red-500\" : \"\"}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 135,
        "column": 15,
        "message": "Error messages should be associated with their inputs using aria-describedby",
        "description": "Error messages should be associated with their inputs using aria-describedby This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby to input when error exists and id to error message",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassInput\n                id=\"email-input\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                className={errors.email ? \"border-red-500\" : \"\"}\n                aria-describedby={errors.email ? \"email-error\" : undefined}\n                aria-invalid={!!errors.email}\n              />\n              {errors.email && (\n                <p id=\"email-error\" className=\"mt-1 text-red-500 text-sm\" role=\"alert\">{errors.email}</p>\n              )}",
          "description": "Add aria-describedby to input when error exists and id to error message",
          "content": "              <GlassInput\n                id=\"email-input\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                className={errors.email ? \"border-red-500\" : \"\"}\n                aria-describedby={errors.email ? \"email-error\" : undefined}\n                aria-invalid={!!errors.email}\n              />\n              {errors.email && (\n                <p id=\"email-error\" className=\"mt-1 text-red-500 text-sm\" role=\"alert\">{errors.email}</p>\n              )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 149,
        "column": 15,
        "message": "Error messages should be associated with their inputs using aria-describedby",
        "description": "Error messages should be associated with their inputs using aria-describedby This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby to input when error exists and id to error message",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassInput\n                id=\"password-input\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                className={errors.password ? \"border-red-500\" : \"\"}\n                aria-describedby={errors.password ? \"password-error\" : undefined}\n                aria-invalid={!!errors.password}\n              />\n              {errors.password && (\n                <p id=\"password-error\" className=\"mt-1 text-red-500 text-sm\" role=\"alert\">{errors.password}</p>\n              )}",
          "description": "Add aria-describedby to input when error exists and id to error message",
          "content": "              <GlassInput\n                id=\"password-input\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                className={errors.password ? \"border-red-500\" : \"\"}\n                aria-describedby={errors.password ? \"password-error\" : undefined}\n                aria-invalid={!!errors.password}\n              />\n              {errors.password && (\n                <p id=\"password-error\" className=\"mt-1 text-red-500 text-sm\" role=\"alert\">{errors.password}</p>\n              )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 252,
        "column": 13,
        "message": "Progress bar should have proper ARIA attributes for screen readers",
        "description": "Progress bar should have proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role, aria-valuenow, aria-valuemin, aria-valuemax, and aria-label attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div \n              className=\"h-2 w-full rounded-full bg-white/10\"\n              role=\"progressbar\"\n              aria-valuenow={progress}\n              aria-valuemin={0}\n              aria-valuemax={100}\n              aria-label=\"Progress\"\n            >\n              <div\n                className=\"h-full rounded-full bg-blue-500 transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>",
          "description": "Add role, aria-valuenow, aria-valuemin, aria-valuemax, and aria-label attributes",
          "content": "            <div \n              className=\"h-2 w-full rounded-full bg-white/10\"\n              role=\"progressbar\"\n              aria-valuenow={progress}\n              aria-valuemin={0}\n              aria-valuemax={100}\n              aria-label=\"Progress\"\n            >\n              <div\n                className=\"h-full rounded-full bg-blue-500 transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 213,
        "column": 23,
        "message": "Memory leak potential: setInterval is not cleared when component unmounts",
        "description": "Memory leak potential: setInterval is not cleared when component unmounts This implementation could impact application performance.",
        "suggestion": "Use useEffect with cleanup to properly manage the interval",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [progress, setProgress] = React.useState(0);\n    const [isRunning, setIsRunning] = React.useState(false);\n    const intervalRef = React.useRef<NodeJS.Timeout | null>(null);\n\n    React.useEffect(() => {\n      return () => {\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n      };\n    }, []);\n\n    const startProgress = () => {\n      setIsRunning(true);\n      setProgress(0);\n      announcer.announce(\"Progress started\", { priority: \"medium\" });\n\n      intervalRef.current = setInterval(() => {\n        setProgress((prev) => {\n          const newProgress = prev + 10;\n\n          // Announce progress milestones\n          if (newProgress === 50) {\n            announcer.announce(\"Progress: 50% complete\", { priority: \"low\" });\n          } else if (newProgress === 100) {\n            announcer.announce(\"Progress completed successfully!\", {\n              priority: \"high\",\n            });\n            setIsRunning(false);\n            if (intervalRef.current) {\n              clearInterval(intervalRef.current);\n              intervalRef.current = null;\n            }\n          }\n\n          return newProgress;\n        });\n      }, 500);\n    };\n\n    const resetProgress = () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      setProgress(0);\n      setIsRunning(false);\n      announcer.announce(\"Progress reset\", { priority: \"low\" });\n    };",
          "description": "Use useEffect with cleanup to properly manage the interval",
          "content": "    const [progress, setProgress] = React.useState(0);\n    const [isRunning, setIsRunning] = React.useState(false);\n    const intervalRef = React.useRef<NodeJS.Timeout | null>(null);\n\n    React.useEffect(() => {\n      return () => {\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n      };\n    }, []);\n\n    const startProgress = () => {\n      setIsRunning(true);\n      setProgress(0);\n      announcer.announce(\"Progress started\", { priority: \"medium\" });\n\n      intervalRef.current = setInterval(() => {\n        setProgress((prev) => {\n          const newProgress = prev + 10;\n\n          // Announce progress milestones\n          if (newProgress === 50) {\n            announcer.announce(\"Progress: 50% complete\", { priority: \"low\" });\n          } else if (newProgress === 100) {\n            announcer.announce(\"Progress completed successfully!\", {\n              priority: \"high\",\n            });\n            setIsRunning(false);\n            if (intervalRef.current) {\n              clearInterval(intervalRef.current);\n              intervalRef.current = null;\n            }\n          }\n\n          return newProgress;\n        });\n      }, 500);\n    };\n\n    const resetProgress = () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      setProgress(0);\n      setIsRunning(false);\n      announcer.announce(\"Progress reset\", { priority: \"low\" });\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 307,
        "column": 11,
        "message": "Dynamic list should have proper ARIA attributes and live region announcements",
        "description": "Dynamic list should have proper ARIA attributes and live region announcements This code works but could be improved for better maintainability.",
        "suggestion": "Add role and aria-label to the list container",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"mb-4 space-y-2\" role=\"list\" aria-label=\"Dynamic items list\">",
          "description": "Add role and aria-label to the list container",
          "content": "          <div className=\"mb-4 space-y-2\" role=\"list\" aria-label=\"Dynamic items list\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-live-region.stories.tsx",
        "line": 309,
        "column": 15,
        "message": "List items should have proper role attribute",
        "description": "List items should have proper role attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add role='listitem' to list item containers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <div\n                key={index}\n                className=\"flex items-center justify-between rounded-lg bg-white/5 p-3\"\n                role=\"listitem\"\n              >",
          "description": "Add role='listitem' to list item containers",
          "content": "              <div\n                key={index}\n                className=\"flex items-center justify-between rounded-lg bg-white/5 p-3\"\n                role=\"listitem\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 111,
        "column": 13,
        "message": "Missing aria-label or aria-labelledby on modal dialog overlay",
        "description": "Missing aria-label or aria-labelledby on modal dialog overlay This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the modal overlay for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div\n              className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n              onClick={() => setShowModal(false)}\n              aria-label=\"Close modal overlay\"\n            />",
          "description": "Add aria-label to describe the modal overlay for screen readers",
          "content": "            <div\n              className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n              onClick={() => setShowModal(false)}\n              aria-label=\"Close modal overlay\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 123,
        "column": 15,
        "message": "Modal dialog missing required ARIA attributes (role, aria-modal, aria-labelledby)",
        "description": "Modal dialog missing required ARIA attributes (role, aria-modal, aria-labelledby) This will likely cause errors during execution.",
        "suggestion": "Add role='dialog', aria-modal='true', and aria-labelledby attributes to the modal card",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassCard \n                className=\"relative z-10 w-full max-w-lg p-8\"\n                role=\"dialog\"\n                aria-modal=\"true\"\n                aria-labelledby=\"modal-title\"\n              >",
          "description": "Add role='dialog', aria-modal='true', and aria-labelledby attributes to the modal card",
          "content": "              <GlassCard \n                className=\"relative z-10 w-full max-w-lg p-8\"\n                role=\"dialog\"\n                aria-modal=\"true\"\n                aria-labelledby=\"modal-title\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 124,
        "column": 17,
        "message": "Modal title should have an id for aria-labelledby reference",
        "description": "Modal title should have an id for aria-labelledby reference This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to modal title for proper ARIA labeling",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <h2 className=\"mb-4 font-bold text-2xl\" id=\"modal-title\">Modal Dialog</h2>",
          "description": "Add id attribute to modal title for proper ARIA labeling",
          "content": "                <h2 className=\"mb-4 font-bold text-2xl\" id=\"modal-title\">Modal Dialog</h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 132,
        "column": 21,
        "message": "Form inputs should have proper labels associated with htmlFor attribute",
        "description": "Form inputs should have proper labels associated with htmlFor attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to label and corresponding id to input",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\" htmlFor=\"name-input\">\n                      Name\n                    </label>\n                    <GlassInput placeholder=\"Enter your name\" id=\"name-input\" />",
          "description": "Add htmlFor attribute to label and corresponding id to input",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\" htmlFor=\"name-input\">\n                      Name\n                    </label>\n                    <GlassInput placeholder=\"Enter your name\" id=\"name-input\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 137,
        "column": 21,
        "message": "Form inputs should have proper labels associated with htmlFor attribute",
        "description": "Form inputs should have proper labels associated with htmlFor attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add htmlFor attribute to label and corresponding id to input",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <label className=\"mb-2 block font-medium text-sm\" htmlFor=\"email-input\">\n                      Email\n                    </label>\n                    <GlassInput type=\"email\" placeholder=\"Enter your email\" id=\"email-input\" />",
          "description": "Add htmlFor attribute to label and corresponding id to input",
          "content": "                    <label className=\"mb-2 block font-medium text-sm\" htmlFor=\"email-input\">\n                      Email\n                    </label>\n                    <GlassInput type=\"email\" placeholder=\"Enter your email\" id=\"email-input\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 55,
        "column": 9,
        "message": "Conditional rendering with logical AND may cause performance issues with frequent re-renders",
        "description": "Conditional rendering with logical AND may cause performance issues with frequent re-renders This implementation could impact application performance.",
        "suggestion": "Consider using a ternary operator or useMemo for complex conditional rendering",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 149,
        "column": 23,
        "message": "Multiple state updates in event handlers may cause unnecessary re-renders",
        "description": "Multiple state updates in event handlers may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Consider using useCallback to memoize event handlers or batch state updates",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useCallback to memoize event handlers or batch state updates",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-trap.stories.tsx",
        "line": 50,
        "column": 23,
        "message": "Inconsistent spacing in CSS custom property usage",
        "description": "Inconsistent spacing in CSS custom property usage This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent spacing around CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <p className=\"mb-4 text-[var(--text-secondary)]\">\n            Click the button below to activate the focus trap. Use Tab and\n            Shift+Tab to navigate.\n          </p>",
          "description": "Use consistent spacing around CSS custom properties",
          "content": "          <p className=\"mb-4 text-[var(--text-secondary)]\">\n            Click the button below to activate the focus trap. Use Tab and\n            Shift+Tab to navigate.\n          </p>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx",
        "line": 134,
        "column": 17,
        "message": "Skip links have hardcoded fragment identifiers that may not exist on the page",
        "description": "Skip links have hardcoded fragment identifiers that may not exist on the page This code works but could be improved for better maintainability.",
        "suggestion": "Ensure corresponding elements with ids 'main-content' and 'navigation' exist, or make these functional examples",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx",
        "line": 189,
        "column": 11,
        "message": "Modal lacks proper focus trapping implementation and keyboard event handling",
        "description": "Modal lacks proper focus trapping implementation and keyboard event handling This code works but could be improved for better maintainability.",
        "suggestion": "Implement proper focus trapping with useEffect to handle Escape key and focus management",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {showModal && (\n          <div \n            className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"modal-title\"\n            onKeyDown={(e) => {\n              if (e.key === 'Escape') {\n                setShowModal(false);\n              }\n            }}\n          >\n            <div\n              className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n              onClick={() => setShowModal(false)}\n            />\n            <GlassCard className=\"relative z-10 w-full max-w-md p-6\">\n              <h3 id=\"modal-title\" className=\"mb-4 font-bold text-lg\">Modal Dialog</h3>\n              <p className=\"mb-4 text-[var(--text-secondary)] text-sm\">\n                Focus is trapped within this modal. Use Tab to navigate between\n                the buttons below, or press Escape to close.\n              </p>\n              <div className=\"flex justify-end gap-2\">\n                <GlassButton\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => setShowModal(false)}\n                >\n                  Cancel\n                </GlassButton>\n                <GlassButton\n                  type=\"button\"\n                  variant=\"primary\"\n                  onClick={() => setShowModal(false)}\n                  autoFocus\n                >\n                  Confirm\n                </GlassButton>\n              </div>\n            </GlassCard>\n          </div>\n        )}",
          "description": "Implement proper focus trapping with useEffect to handle Escape key and focus management",
          "content": "        {showModal && (\n          <div \n            className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"modal-title\"\n            onKeyDown={(e) => {\n              if (e.key === 'Escape') {\n                setShowModal(false);\n              }\n            }}\n          >\n            <div\n              className=\"absolute inset-0 bg-black/20 backdrop-blur-sm\"\n              onClick={() => setShowModal(false)}\n            />\n            <GlassCard className=\"relative z-10 w-full max-w-md p-6\">\n              <h3 id=\"modal-title\" className=\"mb-4 font-bold text-lg\">Modal Dialog</h3>\n              <p className=\"mb-4 text-[var(--text-secondary)] text-sm\">\n                Focus is trapped within this modal. Use Tab to navigate between\n                the buttons below, or press Escape to close.\n              </p>\n              <div className=\"flex justify-end gap-2\">\n                <GlassButton\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => setShowModal(false)}\n                >\n                  Cancel\n                </GlassButton>\n                <GlassButton\n                  type=\"button\"\n                  variant=\"primary\"\n                  onClick={() => setShowModal(false)}\n                  autoFocus\n                >\n                  Confirm\n                </GlassButton>\n              </div>\n            </GlassCard>\n          </div>\n        )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx",
        "line": 197,
        "column": 15,
        "message": "Modal backdrop click handler may cause accessibility issues for keyboard users",
        "description": "Modal backdrop click handler may cause accessibility issues for keyboard users This code works but could be improved for better maintainability.",
        "suggestion": "Add keyboard event handling or use a proper button element for the backdrop",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-focus-demo.stories.tsx",
        "line": 166,
        "column": 11,
        "message": "Missing useEffect for focus management and cleanup in FocusTrapping story",
        "description": "Missing useEffect for focus management and cleanup in FocusTrapping story This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add useEffect to handle focus management when modal opens/closes and cleanup on unmount",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  render: () => {\n    const [showModal, setShowModal] = React.useState(false);\n\n    React.useEffect(() => {\n      if (showModal) {\n        const previouslyFocusedElement = document.activeElement as HTMLElement;\n        return () => {\n          if (previouslyFocusedElement) {\n            previouslyFocusedElement.focus();\n          }\n        };\n      }\n    }, [showModal]);\n\n    React.useEffect(() => {\n      const handleEscape = (e: KeyboardEvent) => {\n        if (e.key === 'Escape' && showModal) {\n          setShowModal(false);\n        }\n      };\n\n      if (showModal) {\n        document.addEventListener('keydown', handleEscape);\n        return () => document.removeEventListener('keydown', handleEscape);\n      }\n    }, [showModal]);",
          "description": "Add useEffect to handle focus management when modal opens/closes and cleanup on unmount",
          "content": "  render: () => {\n    const [showModal, setShowModal] = React.useState(false);\n\n    React.useEffect(() => {\n      if (showModal) {\n        const previouslyFocusedElement = document.activeElement as HTMLElement;\n        return () => {\n          if (previouslyFocusedElement) {\n            previouslyFocusedElement.focus();\n          }\n        };\n      }\n    }, [showModal]);\n\n    React.useEffect(() => {\n      const handleEscape = (e: KeyboardEvent) => {\n        if (e.key === 'Escape' && showModal) {\n          setShowModal(false);\n        }\n      };\n\n      if (showModal) {\n        document.addEventListener('keydown', handleEscape);\n        return () => document.removeEventListener('keydown', handleEscape);\n      }\n    }, [showModal]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx",
        "line": 53,
        "column": 5,
        "message": "Async error thrown in useEffect will not be caught by standard error boundary and may cause unhandled promise rejection",
        "description": "Async error thrown in useEffect will not be caught by standard error boundary and may cause unhandled promise rejection This code works but could be improved for better maintainability.",
        "suggestion": "Wrap async operations in try-catch or use proper async error handling mechanisms",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      try {\n        throw new Error(\"Async error after 2 seconds!\");\n      } catch (error) {\n        // In a real app, you'd want to handle this properly\n        console.error('Async error:', error);\n      }\n    }, 2000);\n\n    return () => clearTimeout(timeoutId);\n  }, []);",
          "description": "Wrap async operations in try-catch or use proper async error handling mechanisms",
          "content": "  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      try {\n        throw new Error(\"Async error after 2 seconds!\");\n      } catch (error) {\n        // In a real app, you'd want to handle this properly\n        console.error('Async error:', error);\n      }\n    }, 2000);\n\n    return () => clearTimeout(timeoutId);\n  }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx",
        "line": 54,
        "column": 5,
        "message": "Missing cleanup for setTimeout can cause memory leaks",
        "description": "Missing cleanup for setTimeout can cause memory leaks This implementation could impact application performance.",
        "suggestion": "Return cleanup function from useEffect to clear timeout",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const timeoutId = setTimeout(() => {\n      throw new Error(\"Async error after 2 seconds!\");\n    }, 2000);\n\n    return () => clearTimeout(timeoutId);",
          "description": "Return cleanup function from useEffect to clear timeout",
          "content": "    const timeoutId = setTimeout(() => {\n      throw new Error(\"Async error after 2 seconds!\");\n    }, 2000);\n\n    return () => clearTimeout(timeoutId);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx",
        "line": 78,
        "column": 13,
        "message": "Button elements should have proper ARIA labels for screen readers when the action is destructive",
        "description": "Button elements should have proper ARIA labels for screen readers when the action is destructive This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby to describe the destructive action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassButton\n              type=\"button\"\n              variant=\"danger\"\n              onClick={() => setShouldCrash(true)}\n              aria-label=\"Trigger an intentional error to demonstrate error boundary\"\n            >\n              Trigger Error\n            </GlassButton>",
          "description": "Add aria-label or aria-describedby to describe the destructive action",
          "content": "            <GlassButton\n              type=\"button\"\n              variant=\"danger\"\n              onClick={() => setShouldCrash(true)}\n              aria-label=\"Trigger an intentional error to demonstrate error boundary\"\n            >\n              Trigger Error\n            </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx",
        "line": 84,
        "column": 13,
        "message": "Button elements should have proper ARIA labels for screen readers when performing reset actions",
        "description": "Button elements should have proper ARIA labels for screen readers when performing reset actions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the reset action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassButton\n              type=\"button\"\n              variant=\"primary\"\n              onClick={() => {\n                setShouldCrash(false);\n                setResetKey((prev) => prev + 1);\n              }}\n              aria-label=\"Reset the error boundary demo to initial state\"\n            >\n              Reset Demo\n            </GlassButton>",
          "description": "Add aria-label to describe the reset action",
          "content": "            <GlassButton\n              type=\"button\"\n              variant=\"primary\"\n              onClick={() => {\n                setShouldCrash(false);\n                setResetKey((prev) => prev + 1);\n              }}\n              aria-label=\"Reset the error boundary demo to initial state\"\n            >\n              Reset Demo\n            </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-error-boundary.stories.tsx",
        "line": 119,
        "column": 13,
        "message": "Error boundary fallback function parameters should be properly typed",
        "description": "Error boundary fallback function parameters should be properly typed This code works but could be improved for better maintainability.",
        "suggestion": "Add proper TypeScript types for error and errorInfo parameters",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            fallback={(error: Error, _errorInfo: React.ErrorInfo) => (",
          "description": "Add proper TypeScript types for error and errorInfo parameters",
          "content": "            fallback={(error: Error, _errorInfo: React.ErrorInfo) => ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx",
        "line": 156,
        "column": 9,
        "message": "Missing semantic HTML structure for banner content - using div instead of section or article for complex content",
        "description": "Missing semantic HTML structure for banner content - using div instead of section or article for complex content This code works but could be improved for better maintainability.",
        "suggestion": "Use semantic HTML elements like <section> or <article> for structured content within banners",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx",
        "line": 89,
        "column": 11,
        "message": "Missing aria-live attribute for dynamically appearing/dismissing banners",
        "description": "Missing aria-live attribute for dynamically appearing/dismissing banners This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' or aria-live='assertive' to banners that appear/dismiss dynamically to announce changes to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx",
        "line": 295,
        "column": 7,
        "message": "Potential memory leak with setTimeout in AnimatedAppearance story - timeout is not cleared if component unmounts",
        "description": "Potential memory leak with setTimeout in AnimatedAppearance story - timeout is not cleared if component unmounts This implementation could impact application performance.",
        "suggestion": "Store timeout ID and clear it on component unmount using useEffect cleanup",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const addBanner = () => {\n      const id = nextId.current++;\n      setBanners((prev) => [...prev, { id, message: `Dynamic banner #${id}` }]);\n      const timeoutId = setTimeout(() => {\n        setBanners((prev) => prev.filter((b) => b.id !== id));\n      }, 5000);\n      // Store timeout for potential cleanup\n      return timeoutId;\n    };",
          "description": "Store timeout ID and clear it on component unmount using useEffect cleanup",
          "content": "    const addBanner = () => {\n      const id = nextId.current++;\n      setBanners((prev) => [...prev, { id, message: `Dynamic banner #${id}` }]);\n      const timeoutId = setTimeout(() => {\n        setBanners((prev) => prev.filter((b) => b.id !== id));\n      }, 5000);\n      // Store timeout for potential cleanup\n      return timeoutId;\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx",
        "line": 30,
        "column": 11,
        "message": "Inconsistent spacing in className - using 'space-y-2' vs 'space-y-4' without clear pattern",
        "description": "Inconsistent spacing in className - using 'space-y-2' vs 'space-y-4' without clear pattern This violates code style conventions and may reduce readability.",
        "suggestion": "Establish consistent spacing patterns or document the reasoning for different spacing values",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "},",
          "description": "Establish consistent spacing patterns or document the reasoning for different spacing values",
          "content": "},"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-banner.stories.tsx",
        "line": 78,
        "column": 25,
        "message": "Inline object creation in render function causes unnecessary re-renders",
        "description": "Inline object creation in render function causes unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move static data outside render function or use useMemo for complex objects",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const Dismissible: Story = {\n  render: () => {\n    const initialBanners = React.useMemo(() => [\n      {\n        id: 1,\n        variant: \"info\" as const,\n        message: \"This banner can be dismissed\",\n      },\n      {\n        id: 2,\n        variant: \"success\" as const,\n        message: \"Operation completed successfully\",\n      },\n      {\n        id: 3,\n        variant: \"warning\" as const,\n        message: \"Your session will expire soon\",\n      },\n    ], []);\n    const [banners, setBanners] = React.useState(initialBanners);",
          "description": "Move static data outside render function or use useMemo for complex objects",
          "content": "export const Dismissible: Story = {\n  render: () => {\n    const initialBanners = React.useMemo(() => [\n      {\n        id: 1,\n        variant: \"info\" as const,\n        message: \"This banner can be dismissed\",\n      },\n      {\n        id: 2,\n        variant: \"success\" as const,\n        message: \"Operation completed successfully\",\n      },\n      {\n        id: 3,\n        variant: \"warning\" as const,\n        message: \"Your session will expire soon\",\n      },\n    ], []);\n    const [banners, setBanners] = React.useState(initialBanners);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 30,
        "column": 9,
        "message": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure",
        "description": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure This code works but could be improved for better maintainability.",
        "suggestion": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <h2 className=\"mb-2 font-bold text-3xl\">Accessibility Manager Demo</h2>",
          "description": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
          "content": "        <h2 className=\"mb-2 font-bold text-3xl\">Accessibility Manager Demo</h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 182,
        "column": 11,
        "message": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure",
        "description": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure This code works but could be improved for better maintainability.",
        "suggestion": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <h2 className=\"mb-2 font-bold text-3xl\">Dark Mode Accessibility</h2>",
          "description": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
          "content": "          <h2 className=\"mb-2 font-bold text-3xl\">Dark Mode Accessibility</h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 205,
        "column": 11,
        "message": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure",
        "description": "Missing semantic HTML structure - h1 element should not be nested inside stories without proper document structure This code works but could be improved for better maintainability.",
        "suggestion": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <h2 className=\"mb-2 font-bold text-3xl\">Dark Mode Accessibility</h2>",
          "description": "Use h2 or lower heading levels in component stories to maintain proper heading hierarchy",
          "content": "          <h2 className=\"mb-2 font-bold text-3xl\">Dark Mode Accessibility</h2>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 108,
        "column": 15,
        "message": "Button elements should have accessible names or aria-label attributes for better screen reader support",
        "description": "Button elements should have accessible names or aria-label attributes for better screen reader support This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or ensure button text is always visible to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                key={tab.id}\n                onClick={() => setActiveFeature(tab.id)}\n                aria-label={`Show ${tab.label} accessibility features`}\n                className={`rounded-lg px-4 py-2 transition-all ${\n                  activeFeature === tab.id\n                    ? \"bg-blue-500/20 font-medium text-blue-500\"\n                    : \"hover:bg-white/10\"\n                }`}\n              >",
          "description": "Add aria-label or ensure button text is always visible to screen readers",
          "content": "              <button\n                type=\"button\"\n                key={tab.id}\n                onClick={() => setActiveFeature(tab.id)}\n                aria-label={`Show ${tab.label} accessibility features`}\n                className={`rounded-lg px-4 py-2 transition-all ${\n                  activeFeature === tab.id\n                    ? \"bg-blue-500/20 font-medium text-blue-500\"\n                    : \"hover:bg-white/10\"\n                }`}\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 108,
        "column": 15,
        "message": "Interactive tab buttons should have proper ARIA attributes for tab functionality",
        "description": "Interactive tab buttons should have proper ARIA attributes for tab functionality This code works but could be improved for better maintainability.",
        "suggestion": "Add role='tab', aria-selected, and aria-controls attributes for proper tab semantics",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                key={tab.id}\n                onClick={() => setActiveFeature(tab.id)}\n                role=\"tab\"\n                aria-selected={activeFeature === tab.id}\n                aria-controls={`panel-${tab.id}`}\n                aria-label={`Show ${tab.label} accessibility features`}\n                className={`rounded-lg px-4 py-2 transition-all ${\n                  activeFeature === tab.id\n                    ? \"bg-blue-500/20 font-medium text-blue-500\"\n                    : \"hover:bg-white/10\"\n                }`}\n              >",
          "description": "Add role='tab', aria-selected, and aria-controls attributes for proper tab semantics",
          "content": "              <button\n                type=\"button\"\n                key={tab.id}\n                onClick={() => setActiveFeature(tab.id)}\n                role=\"tab\"\n                aria-selected={activeFeature === tab.id}\n                aria-controls={`panel-${tab.id}`}\n                aria-label={`Show ${tab.label} accessibility features`}\n                className={`rounded-lg px-4 py-2 transition-all ${\n                  activeFeature === tab.id\n                    ? \"bg-blue-500/20 font-medium text-blue-500\"\n                    : \"hover:bg-white/10\"\n                }`}\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 123,
        "column": 11,
        "message": "Tab panel content should have proper ARIA attributes and role",
        "description": "Tab panel content should have proper ARIA attributes and role This code works but could be improved for better maintainability.",
        "suggestion": "Add role='tabpanel', aria-labelledby, and id attributes for proper tab panel semantics",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div \n            className=\"glass-effect rounded-lg p-4\"\n            role=\"tabpanel\"\n            id={`panel-${activeFeature}`}\n            aria-labelledby={`tab-${activeFeature}`}\n          >",
          "description": "Add role='tabpanel', aria-labelledby, and id attributes for proper tab panel semantics",
          "content": "          <div \n            className=\"glass-effect rounded-lg p-4\"\n            role=\"tabpanel\"\n            id={`panel-${activeFeature}`}\n            aria-labelledby={`tab-${activeFeature}`}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/stories/components/glass-accessible-demo.stories.tsx",
        "line": 4,
        "column": 10,
        "message": "Unused import - GlassCard is imported but used inconsistently across stories",
        "description": "Unused import - GlassCard is imported but used inconsistently across stories This violates code style conventions and may reduce readability.",
        "suggestion": "Ensure all imports are necessary and used consistently",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts",
        "line": 44,
        "column": 10,
        "message": "Private function should not use underscore prefix, use proper export visibility instead",
        "description": "Private function should not use underscore prefix, use proper export visibility instead This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix and either export the function or keep it truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function generateNestedKey(...parts: Array<string | number>): string {",
          "description": "Remove underscore prefix and either export the function or keep it truly private",
          "content": "function generateNestedKey(...parts: Array<string | number>): string {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts",
        "line": 52,
        "column": 10,
        "message": "Private function should not use underscore prefix, use proper export visibility instead",
        "description": "Private function should not use underscore prefix, use proper export visibility instead This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix and either export the function or keep it truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function generateTimestampKey(prefix: string, useTimestamp = false): string {",
          "description": "Remove underscore prefix and either export the function or keep it truly private",
          "content": "function generateTimestampKey(prefix: string, useTimestamp = false): string {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts-architecture-2",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts",
        "line": 44,
        "column": 1,
        "message": "Unused private functions that are neither exported nor used internally",
        "description": "Unused private functions that are neither exported nor used internally This code works but could be improved for better maintainability.",
        "suggestion": "Either export these functions if they're meant to be used, or remove them if they're dead code",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts",
        "line": 54,
        "column": 18,
        "message": "Using Date.now() for key generation can cause performance issues and is not truly stable",
        "description": "Using Date.now() for key generation can cause performance issues and is not truly stable This implementation could impact application performance.",
        "suggestion": "Consider using a more predictable identifier instead of timestamp for stable keys",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/stable-key.ts",
        "line": 17,
        "column": 9,
        "message": "Function checks for string type but doesn't handle other valid key types like numbers",
        "description": "Function checks for string type but doesn't handle other valid key types like numbers This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Accept both string and number types for stable properties",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    if (item[prop] && (typeof item[prop] === \"string\" || typeof item[prop] === \"number\")) {",
          "description": "Accept both string and number types for stable properties",
          "content": "    if (item[prop] && (typeof item[prop] === \"string\" || typeof item[prop] === \"number\")) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 241,
        "column": 1,
        "message": "Import statement should be at the top of the file",
        "description": "Import statement should be at the top of the file This code works but could be improved for better maintainability.",
        "suggestion": "Move React import to the top of the file with other imports",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "move",
          "oldCode": "",
          "newCode": "import * as React from \"react\";",
          "description": "Move React import to the top of the file with other imports",
          "content": "import * as React from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 124,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function matchesBreakpoint(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function matchesBreakpoint("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-2",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 154,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function createResponsiveClasses(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function createResponsiveClasses("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 171,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function containerQuery(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function containerQuery("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-4",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 187,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function aspectRatio(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function aspectRatio("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-5",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 207,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function fluidTypography(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function fluidTypography("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-6",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 219,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function responsiveGrid(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function responsiveGrid("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-7",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 235,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function useMediaQuery(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function useMediaQuery("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-8",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 255,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function useBreakpoint(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function useBreakpoint("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-naming-9",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 277,
        "column": 10,
        "message": "Function name starts with underscore indicating private but is in module scope",
        "description": "Function name starts with underscore indicating private but is in module scope This code works but could be improved for better maintainability.",
        "suggestion": "Remove underscore prefix or make function truly private",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function responsiveVisibility(",
          "description": "Remove underscore prefix or make function truly private",
          "content": "function responsiveVisibility("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-bug-10",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 97,
        "column": 17,
        "message": "Redundant condition check - window is already checked above",
        "description": "Redundant condition check - window is already checked above This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove redundant window check since it's already handled above",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const width = window.innerWidth;",
          "description": "Remove redundant window check since it's already handled above",
          "content": "  const width = window.innerWidth;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts-bug-11",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/responsive.ts",
        "line": 131,
        "column": 17,
        "message": "Redundant condition check - window is already checked above",
        "description": "Redundant condition check - window is already checked above This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove redundant window check since it's already handled above",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const width = window.innerWidth;",
          "description": "Remove redundant window check since it's already handled above",
          "content": "  const width = window.innerWidth;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 33,
        "column": 5,
        "message": "GlassVariant type definition doesn't match the values being checked in mapComponentVariantToGlassVariant",
        "description": "GlassVariant type definition doesn't match the values being checked in mapComponentVariantToGlassVariant This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Update GlassVariant type to include 'elevated', 'floating', 'card', 'modal' or fix the mapping logic",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type GlassVariant =\n  | \"default\"\n  | \"elevated\"\n  | \"floating\"\n  | \"card\"\n  | \"modal\";",
          "description": "Update GlassVariant type to include 'elevated', 'floating', 'card', 'modal' or fix the mapping logic",
          "content": "export type GlassVariant =\n  | \"default\"\n  | \"elevated\"\n  | \"floating\"\n  | \"card\"\n  | \"modal\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 62,
        "column": 10,
        "message": "mapIntensity function handles 'none' and 'intense' cases but GlassIntensity type doesn't include these values",
        "description": "mapIntensity function handles 'none' and 'intense' cases but GlassIntensity type doesn't include these values This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Update GlassIntensity type to include 'none' and 'intense' or remove these cases",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type GlassIntensity = \"none\" | \"subtle\" | \"medium\" | \"strong\" | \"intense\" | \"extreme\";",
          "description": "Update GlassIntensity type to include 'none' and 'intense' or remove these cases",
          "content": "export type GlassIntensity = \"none\" | \"subtle\" | \"medium\" | \"strong\" | \"intense\" | \"extreme\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 45,
        "column": 3,
        "message": "ComponentVariant mapping assumes specific variants that may not exist in the imported type",
        "description": "ComponentVariant mapping assumes specific variants that may not exist in the imported type This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add type safety check or make the mapping more defensive",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const variantMap: Partial<Record<ComponentVariant, GlassVariant>> = {\n    primary: \"elevated\",\n    secondary: \"default\",\n    tertiary: \"floating\",\n    ghost: \"default\",\n    destructive: \"elevated\",\n    apple: \"card\",\n  };\n\n  return variantMap[variant as ComponentVariant] ?? \"default\";",
          "description": "Add type safety check or make the mapping more defensive",
          "content": "  const variantMap: Partial<Record<ComponentVariant, GlassVariant>> = {\n    primary: \"elevated\",\n    secondary: \"default\",\n    tertiary: \"floating\",\n    ghost: \"default\",\n    destructive: \"elevated\",\n    apple: \"card\",\n  };\n\n  return variantMap[variant as ComponentVariant] ?? \"default\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 198,
        "column": 1,
        "message": "Unused function _applyGlassPreset with underscore prefix suggests private but is exported",
        "description": "Unused function _applyGlassPreset with underscore prefix suggests private but is exported This violates code style conventions and may reduce readability.",
        "suggestion": "Either remove the underscore prefix or make it truly private/unexported",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "function applyGlassPreset(preset: GlassPreset) {\n  return createGlassStyle(GLASS_PRESETS[preset]);\n}",
          "description": "Either remove the underscore prefix or make it truly private/unexported",
          "content": "function applyGlassPreset(preset: GlassPreset) {\n  return createGlassStyle(GLASS_PRESETS[preset]);\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 142,
        "column": 5,
        "message": "Redundant string conversion and calculations performed multiple times",
        "description": "Redundant string conversion and calculations performed multiple times This implementation could impact application performance.",
        "suggestion": "Cache calculated values to avoid redundant computations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const intensityValue = mapIntensity(intensity);\n  const defaultBlur = 4 + intensityValue * 20;\n  const defaultSaturation = 1 + intensityValue * 0.4;\n\n  // Convert boolean values to numbers\n  const blur =\n    typeof blurValue === \"boolean\"\n      ? blurValue\n        ? defaultBlur\n        : 0\n      : blurValue;\n\n  const saturation =\n    typeof saturationValue === \"boolean\"\n      ? saturationValue\n        ? defaultSaturation\n        : 1\n      : saturationValue;",
          "description": "Cache calculated values to avoid redundant computations",
          "content": "  const intensityValue = mapIntensity(intensity);\n  const defaultBlur = 4 + intensityValue * 20;\n  const defaultSaturation = 1 + intensityValue * 0.4;\n\n  // Convert boolean values to numbers\n  const blur =\n    typeof blurValue === \"boolean\"\n      ? blurValue\n        ? defaultBlur\n        : 0\n      : blurValue;\n\n  const saturation =\n    typeof saturationValue === \"boolean\"\n      ? saturationValue\n        ? defaultSaturation\n        : 1\n      : saturationValue;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/glass-effects.ts",
        "line": 83,
        "column": 1,
        "message": "Inconsistent return type - some functions return objects, others return strings",
        "description": "Inconsistent return type - some functions return objects, others return strings This violates code style conventions and may reduce readability.",
        "suggestion": "Consider consistent return types across utility functions",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-convention-0",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 25,
        "column": 1,
        "message": "Private/internal functions should not be exposed or should follow consistent naming conventions",
        "description": "Private/internal functions should not be exposed or should follow consistent naming conventions This code works but could be improved for better maintainability.",
        "suggestion": "Either export this function if it's meant to be public, or move it to internal utilities section",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-convention-1",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 40,
        "column": 1,
        "message": "Private/internal functions should not be exposed or should follow consistent naming conventions",
        "description": "Private/internal functions should not be exposed or should follow consistent naming conventions This code works but could be improved for better maintainability.",
        "suggestion": "Either export this function if it's meant to be public, or move it to internal utilities section",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 116,
        "column": 1,
        "message": "Private/internal functions should not be exposed or should follow consistent naming conventions",
        "description": "Private/internal functions should not be exposed or should follow consistent naming conventions This code works but could be improved for better maintainability.",
        "suggestion": "Either export this function if it's meant to be public, or move it to internal utilities section",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-convention-3",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 145,
        "column": 1,
        "message": "Private/internal functions should not be exposed or should follow consistent naming conventions",
        "description": "Private/internal functions should not be exposed or should follow consistent naming conventions This code works but could be improved for better maintainability.",
        "suggestion": "Either export this function if it's meant to be public, or move it to internal utilities section",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 95,
        "column": 5,
        "message": "Hard-coded focus ring colors may not provide sufficient contrast in all themes",
        "description": "Hard-coded focus ring colors may not provide sufficient contrast in all themes This code works but could be improved for better maintainability.",
        "suggestion": "Consider using CSS custom properties or theme-aware colors for focus rings to ensure proper contrast ratios",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 28,
        "column": 5,
        "message": "Object.entries and filter operations in variant class creation could be optimized for frequent calls",
        "description": "Object.entries and filter operations in variant class creation could be optimized for frequent calls This implementation could impact application performance.",
        "suggestion": "Consider memoizing the result or pre-computing variant combinations for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/utils/classname.ts",
        "line": 129,
        "column": 1,
        "message": "Inconsistent export pattern - some functions are exported, others are private but not clearly marked",
        "description": "Inconsistent export pattern - some functions are exported, others are private but not clearly marked This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent naming and export patterns for public vs private utilities",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Micro-interaction utility\n * Provides subtle interaction feedback\n */\nexport function createMicroInteraction(\n  type: \"hover\" | \"active\" | \"focus\" = \"hover\",\n): string {\n  const interactions = {\n    hover: \"hover:scale-[1.02] hover:shadow-lg transition-all duration-200\",\n    active: \"active:scale-[0.98] transition-all duration-100\",\n    focus: \"focus:scale-[1.01] focus:shadow-md transition-all duration-150\",\n  };\n\n  return interactions[type];\n}\n\n// Create microInteraction object with both function and properties\nexport const microInteraction = Object.assign(createMicroInteraction, {\n  gentle: createMicroInteraction(\"hover\"),\n  interactive: \"hover:scale-[1.02] hover:shadow-lg transition-all duration-200\",\n  smooth: \"hover:scale-[1.01] transition-all duration-150\",\n});",
          "description": "Use consistent naming and export patterns for public vs private utilities",
          "content": "/**\n * Micro-interaction utility\n * Provides subtle interaction feedback\n */\nexport function createMicroInteraction(\n  type: \"hover\" | \"active\" | \"focus\" = \"hover\",\n): string {\n  const interactions = {\n    hover: \"hover:scale-[1.02] hover:shadow-lg transition-all duration-200\",\n    active: \"active:scale-[0.98] transition-all duration-100\",\n    focus: \"focus:scale-[1.01] focus:shadow-md transition-all duration-150\",\n  };\n\n  return interactions[type];\n}\n\n// Create microInteraction object with both function and properties\nexport const microInteraction = Object.assign(createMicroInteraction, {\n  gentle: createMicroInteraction(\"hover\"),\n  interactive: \"hover:scale-[1.02] hover:shadow-lg transition-all duration-200\",\n  smooth: \"hover:scale-[1.01] transition-all duration-150\",\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-0",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 17,
        "column": 7,
        "message": "Inconsistent export pattern - private constants (prefixed with _) are defined but never exported, while some public constants lack exports",
        "description": "Inconsistent export pattern - private constants (prefixed with _) are defined but never exported, while some public constants lack exports This code works but could be improved for better maintainability.",
        "suggestion": "Either export all constants consistently or remove unused private constants. Consider exporting _GLASS_BLUR_VALUES, _SPRING_CONFIGS, _PADDING_VALUES, _Z_INDEX if they should be public",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-1",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 9,
        "column": 7,
        "message": "Missing export for GLASS_INTENSITY_VALUES constant that appears to be public (no underscore prefix)",
        "description": "Missing export for GLASS_INTENSITY_VALUES constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for GLASS_INTENSITY_VALUES",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const GLASS_INTENSITY_VALUES = {",
          "description": "Add export statement for GLASS_INTENSITY_VALUES",
          "content": "export const GLASS_INTENSITY_VALUES = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 25,
        "column": 7,
        "message": "Missing export for ANIMATION_DURATIONS constant that appears to be public (no underscore prefix)",
        "description": "Missing export for ANIMATION_DURATIONS constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for ANIMATION_DURATIONS",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const ANIMATION_DURATIONS = {",
          "description": "Add export statement for ANIMATION_DURATIONS",
          "content": "export const ANIMATION_DURATIONS = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-3",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 39,
        "column": 7,
        "message": "Missing export for SIZE_VALUES constant that appears to be public (no underscore prefix)",
        "description": "Missing export for SIZE_VALUES constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for SIZE_VALUES",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const SIZE_VALUES = {",
          "description": "Add export statement for SIZE_VALUES",
          "content": "export const SIZE_VALUES = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-4",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 55,
        "column": 7,
        "message": "Missing export for BORDER_RADIUS_VALUES constant that appears to be public (no underscore prefix)",
        "description": "Missing export for BORDER_RADIUS_VALUES constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for BORDER_RADIUS_VALUES",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const BORDER_RADIUS_VALUES = {",
          "description": "Add export statement for BORDER_RADIUS_VALUES",
          "content": "export const BORDER_RADIUS_VALUES = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-5",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 80,
        "column": 7,
        "message": "Missing export for GLASS_COLORS constant that appears to be public (no underscore prefix)",
        "description": "Missing export for GLASS_COLORS constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for GLASS_COLORS",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const GLASS_COLORS = {",
          "description": "Add export statement for GLASS_COLORS",
          "content": "export const GLASS_COLORS = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-6",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 119,
        "column": 7,
        "message": "Missing export for ERROR_TYPES constant that appears to be public (no underscore prefix)",
        "description": "Missing export for ERROR_TYPES constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for ERROR_TYPES",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const ERROR_TYPES = {",
          "description": "Add export statement for ERROR_TYPES",
          "content": "export const ERROR_TYPES = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-7",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 135,
        "column": 7,
        "message": "Missing export for CLASS_PREFIXES constant that appears to be public (no underscore prefix)",
        "description": "Missing export for CLASS_PREFIXES constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for CLASS_PREFIXES",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const CLASS_PREFIXES = {",
          "description": "Add export statement for CLASS_PREFIXES",
          "content": "export const CLASS_PREFIXES = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-8",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 144,
        "column": 7,
        "message": "Missing export for EASING_FUNCTIONS constant that appears to be public (no underscore prefix)",
        "description": "Missing export for EASING_FUNCTIONS constant that appears to be public (no underscore prefix) This code works but could be improved for better maintainability.",
        "suggestion": "Add export statement for EASING_FUNCTIONS",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const EASING_FUNCTIONS = {",
          "description": "Add export statement for EASING_FUNCTIONS",
          "content": "export const EASING_FUNCTIONS = {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts-convention-9",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/core/constants/index.ts",
        "line": 155,
        "column": 1,
        "message": "Type definitions are defined but not exported, making them unusable by consumers of this module",
        "description": "Type definitions are defined but not exported, making them unusable by consumers of this module This code works but could be improved for better maintainability.",
        "suggestion": "Export the type definitions to make them available for use",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export type GlassIntensityKey = keyof typeof GLASS_INTENSITY_VALUES;\nexport type AnimationDurationKey = keyof typeof ANIMATION_DURATIONS;\nexport type ComponentSizeKey = keyof typeof SIZE_VALUES;\nexport type BorderRadiusKey = keyof typeof BORDER_RADIUS_VALUES;\nexport type BreakpointKey = keyof typeof BREAKPOINTS;\nexport type GlassColorKey = keyof typeof GLASS_COLORS;\nexport type ErrorTypeKey = keyof typeof ERROR_TYPES;\nexport type ClassPrefixKey = keyof typeof CLASS_PREFIXES;\nexport type EasingFunctionKey = keyof typeof EASING_FUNCTIONS;",
          "description": "Export the type definitions to make them available for use",
          "content": "export type GlassIntensityKey = keyof typeof GLASS_INTENSITY_VALUES;\nexport type AnimationDurationKey = keyof typeof ANIMATION_DURATIONS;\nexport type ComponentSizeKey = keyof typeof SIZE_VALUES;\nexport type BorderRadiusKey = keyof typeof BORDER_RADIUS_VALUES;\nexport type BreakpointKey = keyof typeof BREAKPOINTS;\nexport type GlassColorKey = keyof typeof GLASS_COLORS;\nexport type ErrorTypeKey = keyof typeof ERROR_TYPES;\nexport type ClassPrefixKey = keyof typeof CLASS_PREFIXES;\nexport type EasingFunctionKey = keyof typeof EASING_FUNCTIONS;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx",
        "line": 8,
        "column": 5,
        "message": "Button lacks accessible name and ARIA attributes for screen readers",
        "description": "Button lacks accessible name and ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and aria-pressed attributes to make the toggle button accessible",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <button\n      type=\"button\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      className=\"glass-effect btn-scale rounded-lg p-2 transition-all duration-200 hover:bg-opacity-80\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n      aria-pressed={theme === \"dark\"}\n    >",
          "description": "Add aria-label and aria-pressed attributes to make the toggle button accessible",
          "content": "    <button\n      type=\"button\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      className=\"glass-effect btn-scale rounded-lg p-2 transition-all duration-200 hover:bg-opacity-80\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n      aria-pressed={theme === \"dark\"}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx",
        "line": 10,
        "column": 18,
        "message": "Inline arrow function in onClick prop creates new function on every render",
        "description": "Inline arrow function in onClick prop creates new function on every render This implementation could impact application performance.",
        "suggestion": "Extract the onClick handler to a useCallback hook to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Moon, Sun } from \"lucide-react\";\nimport { useCallback } from \"react\";\n\nimport { useTheme } from \"@/hooks/use-theme\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const handleToggle = useCallback(() => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  }, [theme, setTheme]);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleToggle}\n      className=\"glass-effect btn-scale rounded-lg p-2 transition-all duration-200 hover:bg-opacity-80\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n      aria-pressed={theme === \"dark\"}\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5 text-primary\" />\n      ) : (\n        <Sun className=\"h-5 w-5 text-primary\" />\n      )}\n    </button>\n  );\n}",
          "description": "Extract the onClick handler to a useCallback hook to prevent unnecessary re-renders",
          "content": "import { Moon, Sun } from \"lucide-react\";\nimport { useCallback } from \"react\";\n\nimport { useTheme } from \"@/hooks/use-theme\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const handleToggle = useCallback(() => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  }, [theme, setTheme]);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleToggle}\n      className=\"glass-effect btn-scale rounded-lg p-2 transition-all duration-200 hover:bg-opacity-80\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} theme`}\n      aria-pressed={theme === \"dark\"}\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5 text-primary\" />\n      ) : (\n        <Sun className=\"h-5 w-5 text-primary\" />\n      )}\n    </button>\n  );\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/theme-toggle.tsx",
        "line": 14,
        "column": 9,
        "message": "Icons lack alternative text for screen readers",
        "description": "Icons lack alternative text for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden to decorative icons and rely on button's aria-label for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      ) : (\n        <Sun className=\"h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      )}",
          "description": "Add aria-hidden to decorative icons and rely on button's aria-label for accessibility",
          "content": "      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      ) : (\n        <Sun className=\"h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-toggle/index.ts",
        "line": 3,
        "column": 1,
        "message": "Unnecessary trailing newline at end of file",
        "description": "Unnecessary trailing newline at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export { ThemeToggle } from \"./theme-toggle\";",
          "description": "Remove the trailing empty line",
          "content": "export { ThemeToggle } from \"./theme-toggle\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx",
        "line": 27,
        "column": 5,
        "message": "Accessing localStorage during initial state calculation can cause hydration mismatch in SSR environments",
        "description": "Accessing localStorage during initial state calculation can cause hydration mismatch in SSR environments This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Initialize with defaultTheme and handle localStorage access in useEffect to prevent SSR hydration issues",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const [theme, setTheme] = useState<Theme>(defaultTheme);",
          "description": "Initialize with defaultTheme and handle localStorage access in useEffect to prevent SSR hydration issues",
          "content": "  const [theme, setTheme] = useState<Theme>(defaultTheme);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx",
        "line": 31,
        "column": 5,
        "message": "Accessing window during initial state calculation can cause hydration mismatch in SSR environments",
        "description": "Accessing window during initial state calculation can cause hydration mismatch in SSR environments This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Initialize with default value and handle window access in useEffect to prevent SSR hydration issues",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const [actualTheme, setActualTheme] = useState<\"light\" | \"dark\">(\"light\");",
          "description": "Initialize with default value and handle window access in useEffect to prevent SSR hydration issues",
          "content": "  const [actualTheme, setActualTheme] = useState<\"light\" | \"dark\">(\"light\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx",
        "line": 42,
        "column": 3,
        "message": "Missing window undefined check before accessing localStorage and window properties",
        "description": "Missing window undefined check before accessing localStorage and window properties This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add window undefined checks and initialize theme from localStorage in useEffect",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    \n    // Initialize theme from localStorage\n    const storedTheme = localStorage?.getItem(storageKey) as Theme;\n    if (storedTheme && storedTheme !== theme) {\n      setTheme(storedTheme);\n      return;\n    }\n    \n    const root = window.document.documentElement;\n\n    root.removeAttribute(\"data-theme\");\n    root.classList.remove(\"light\", \"dark\");\n\n    let resolvedTheme: \"light\" | \"dark\" =\n      theme === \"system\"\n        ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n          ? \"dark\"\n          : \"light\"\n        : theme;\n\n    setActualTheme(resolvedTheme);\n\n    if (attribute === \"class\") {\n      root.classList.add(resolvedTheme);\n    } else {\n      root.setAttribute(attribute, resolvedTheme);\n    }\n\n    if (disableTransitionOnChange) {\n      const css = document.createElement(\"style\");\n      css.appendChild(\n        document.createTextNode(\n          \"*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\",\n        ),\n      );\n      document.head.appendChild(css);\n\n      return () => {\n        // Force reflow\n        (() => window.getComputedStyle(document.body))();\n\n        // Wait for next tick before removing\n        setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      };\n    }\n  }, [theme, attribute, disableTransitionOnChange, storageKey]);",
          "description": "Add window undefined checks and initialize theme from localStorage in useEffect",
          "content": "  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    \n    // Initialize theme from localStorage\n    const storedTheme = localStorage?.getItem(storageKey) as Theme;\n    if (storedTheme && storedTheme !== theme) {\n      setTheme(storedTheme);\n      return;\n    }\n    \n    const root = window.document.documentElement;\n\n    root.removeAttribute(\"data-theme\");\n    root.classList.remove(\"light\", \"dark\");\n\n    let resolvedTheme: \"light\" | \"dark\" =\n      theme === \"system\"\n        ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n          ? \"dark\"\n          : \"light\"\n        : theme;\n\n    setActualTheme(resolvedTheme);\n\n    if (attribute === \"class\") {\n      root.classList.add(resolvedTheme);\n    } else {\n      root.setAttribute(attribute, resolvedTheme);\n    }\n\n    if (disableTransitionOnChange) {\n      const css = document.createElement(\"style\");\n      css.appendChild(\n        document.createTextNode(\n          \"*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\",\n        ),\n      );\n      document.head.appendChild(css);\n\n      return () => {\n        // Force reflow\n        (() => window.getComputedStyle(document.body))();\n\n        // Wait for next tick before removing\n        setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      };\n    }\n  }, [theme, attribute, disableTransitionOnChange, storageKey]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx-memory-leak-3",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx",
        "line": 68,
        "column": 10,
        "message": "Potential memory leak if CSS element removal fails due to element not being in DOM",
        "description": "Potential memory leak if CSS element removal fails due to element not being in DOM This code works but could be improved for better maintainability.",
        "suggestion": "Add safety check before removing CSS element to prevent errors",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        setTimeout(() => {\n          if (css.parentNode) {\n            document.head.removeChild(css);\n          }\n        }, 1);",
          "description": "Add safety check before removing CSS element to prevent errors",
          "content": "        setTimeout(() => {\n          if (css.parentNode) {\n            document.head.removeChild(css);\n          }\n        }, 1);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/theme-provider.tsx",
        "line": 76,
        "column": 3,
        "message": "Redundant DOM manipulation in system theme change handler that duplicates main useEffect logic",
        "description": "Redundant DOM manipulation in system theme change handler that duplicates main useEffect logic This implementation could impact application performance.",
        "suggestion": "Extract DOM manipulation logic to a separate function to avoid duplication and improve maintainability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing blank line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * theme-provider Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./theme-provider\";",
          "description": "Remove the trailing blank line",
          "content": "/**\n * theme-provider Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./theme-provider\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/theme-provider/index.ts",
        "line": 5,
        "column": 1,
        "message": "Re-export statement could fail if the target module doesn't exist",
        "description": "Re-export statement could fail if the target module doesn't exist This will likely cause errors during execution.",
        "suggestion": "Ensure the './theme-provider' module exists and exports are properly defined",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 128,
        "column": 9,
        "message": "Missing import for UnifiedGlassEffect component",
        "description": "Missing import for UnifiedGlassEffect component This will likely cause errors during execution.",
        "suggestion": "Import the UnifiedGlassEffect component from its module",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 101,
        "column": 25,
        "message": "Window resize event not handled - mobile detection in useEffect only runs once",
        "description": "Window resize event not handled - mobile detection in useEffect only runs once This implementation could impact application performance.",
        "suggestion": "Add resize event listener or use a responsive approach with CSS media queries",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 206,
        "column": 11,
        "message": "Missing keyboard navigation support for overlay close",
        "description": "Missing keyboard navigation support for overlay close This code works but could be improved for better maintainability.",
        "suggestion": "Add keyboard event handlers or make the overlay focusable with proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div\n            className=\"fixed inset-0 bg-black/50 transition-opacity md:hidden\"\n            style={{ zIndex: zIndex - 1 }}\n            onClick={\n              closeOnOverlayClick ? () => handleOpenChange(false) : undefined\n            }\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                if (closeOnOverlayClick) handleOpenChange(false);\n              }\n            }}\n            aria-label=\"Close sidebar\"\n          />",
          "description": "Add keyboard event handlers or make the overlay focusable with proper ARIA attributes",
          "content": "          <div\n            className=\"fixed inset-0 bg-black/50 transition-opacity md:hidden\"\n            style={{ zIndex: zIndex - 1 }}\n            onClick={\n              closeOnOverlayClick ? () => handleOpenChange(false) : undefined\n            }\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                if (closeOnOverlayClick) handleOpenChange(false);\n              }\n            }}\n            aria-label=\"Close sidebar\"\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 128,
        "column": 7,
        "message": "Sidebar missing proper ARIA attributes for screen readers",
        "description": "Sidebar missing proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role, aria-label, and aria-hidden attributes for proper accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <UnifiedGlassEffect\n        ref={ref}\n        className={cn(\n          \"h-full flex flex-col\",\n          positionClasses[position].rounded,\n          className,\n        )}\n        variant=\"default\"\n        blur=\"md\"\n        role=\"navigation\"\n        aria-label=\"Sidebar navigation\"\n        aria-hidden={!open}\n      >",
          "description": "Add role, aria-label, and aria-hidden attributes for proper accessibility",
          "content": "      <UnifiedGlassEffect\n        ref={ref}\n        className={cn(\n          \"h-full flex flex-col\",\n          positionClasses[position].rounded,\n          className,\n        )}\n        variant=\"default\"\n        blur=\"md\"\n        role=\"navigation\"\n        aria-label=\"Sidebar navigation\"\n        aria-hidden={!open}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 188,
        "column": 15,
        "message": "Inconsistent dynamic class name generation may cause issues with CSS purging",
        "description": "Inconsistent dynamic class name generation may cause issues with CSS purging This violates code style conventions and may reduce readability.",
        "suggestion": "Use predefined classes or ensure dynamic classes are whitelisted",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 106,
        "column": 17,
        "message": "Memory leak potential - cleanup function not properly scoped",
        "description": "Memory leak potential - cleanup function not properly scoped This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move cleanup function outside of conditional to ensure it always returns a function",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    useEffect(() => {\n      if (!overlay || !open) return;\n\n      const isMobile = window.innerWidth < 768;\n      if (isMobile) {\n        document.body.style.overflow = \"hidden\";\n      }\n      \n      return () => {\n        if (isMobile) {\n          document.body.style.overflow = \"\";\n        }\n      };\n    }, [overlay, open]);",
          "description": "Move cleanup function outside of conditional to ensure it always returns a function",
          "content": "    useEffect(() => {\n      if (!overlay || !open) return;\n\n      const isMobile = window.innerWidth < 768;\n      if (isMobile) {\n        document.body.style.overflow = \"hidden\";\n      }\n      \n      return () => {\n        if (isMobile) {\n          document.body.style.overflow = \"\";\n        }\n      };\n    }, [overlay, open]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 88,
        "column": 7,
        "message": "Missing dependency in useEffect hook",
        "description": "Missing dependency in useEffect hook This implementation could impact application performance.",
        "suggestion": "Add handleOpenChange to dependency array or use useCallback to memoize the function",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/sidebar.tsx",
        "line": 272,
        "column": 9,
        "message": "SidebarItem component lacks proper ARIA attributes for navigation items",
        "description": "SidebarItem component lacks proper ARIA attributes for navigation items This code works but could be improved for better maintainability.",
        "suggestion": "Add proper ARIA attributes like aria-current for active items and role attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Component\n          ref={ref as any}\n          href={href}\n          onClick={onClick}\n          disabled={disabled}\n          role={href ? undefined : \"menuitem\"}\n          aria-current={active ? \"page\" : undefined}\n          aria-expanded={children ? !collapsed : undefined}\n          className={cn(\n            \"w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm transition-all\",\n            \"hover:bg-white/10 active:bg-white/20\",\n            active && \"bg-white/15 text-primary font-medium\",\n            disabled && \"opacity-50 cursor-not-allowed\",\n            !active && !disabled && \"text-gray-700 dark:text-gray-300\",\n            className,\n          )}\n        >",
          "description": "Add proper ARIA attributes like aria-current for active items and role attributes",
          "content": "        <Component\n          ref={ref as any}\n          href={href}\n          onClick={onClick}\n          disabled={disabled}\n          role={href ? undefined : \"menuitem\"}\n          aria-current={active ? \"page\" : undefined}\n          aria-expanded={children ? !collapsed : undefined}\n          className={cn(\n            \"w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm transition-all\",\n            \"hover:bg-white/10 active:bg-white/20\",\n            active && \"bg-white/15 text-primary font-medium\",\n            disabled && \"opacity-50 cursor-not-allowed\",\n            !active && !disabled && \"text-gray-700 dark:text-gray-300\",\n            className,\n          )}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/index.ts",
        "line": 8,
        "column": 1,
        "message": "Empty line at end of file should be removed for consistency",
        "description": "Empty line at end of file should be removed for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * sidebar Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./sidebar\";",
          "description": "Remove trailing empty line",
          "content": "/**\n * sidebar Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./sidebar\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/index.ts-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/sidebar/index.ts",
        "line": 6,
        "column": 15,
        "message": "Potential module resolution issue - './sidebar' file may not exist",
        "description": "Potential module resolution issue - './sidebar' file may not exist This will likely cause errors during execution.",
        "suggestion": "Verify that './sidebar.ts' or './sidebar/index.ts' exists, or update the import path",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 82,
        "column": 9,
        "message": "UnifiedGlassEffect component is used but not imported",
        "description": "UnifiedGlassEffect component is used but not imported This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import the UnifiedGlassEffect component or replace with a standard div element",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 88,
        "column": 13,
        "message": "Dynamic CSS class generation with template literal may not work with CSS purging",
        "description": "Dynamic CSS class generation with template literal may not work with CSS purging This violates code style conventions and may reduce readability.",
        "suggestion": "Use predefined CSS classes or ensure dynamic classes are included in safelist",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 122,
        "column": 5,
        "message": "NavbarItem component lacks proper ARIA attributes for navigation items",
        "description": "NavbarItem component lacks proper ARIA attributes for navigation items This code works but could be improved for better maintainability.",
        "suggestion": "Add role='menuitem' or appropriate ARIA attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <Component\n      ref={ref as any}\n      href={href}\n      onClick={onClick}\n      disabled={disabled}\n      role={href ? undefined : \"button\"}\n      aria-current={active && href ? \"page\" : undefined}\n      className={cn(\n        \"px-3 py-2 rounded-lg text-sm font-medium transition-all\",\n        \"hover:bg-white/10 active:bg-white/20\",\n        active && \"bg-white/15 text-primary\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        !active && !disabled && \"text-gray-700 dark:text-gray-300\",\n        className,\n      )}\n    >",
          "description": "Add role='menuitem' or appropriate ARIA attributes for better screen reader support",
          "content": "    <Component\n      ref={ref as any}\n      href={href}\n      onClick={onClick}\n      disabled={disabled}\n      role={href ? undefined : \"button\"}\n      aria-current={active && href ? \"page\" : undefined}\n      className={cn(\n        \"px-3 py-2 rounded-lg text-sm font-medium transition-all\",\n        \"hover:bg-white/10 active:bg-white/20\",\n        active && \"bg-white/15 text-primary\",\n        disabled && \"opacity-50 cursor-not-allowed\",\n        !active && !disabled && \"text-gray-700 dark:text-gray-300\",\n        className,\n      )}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 74,
        "column": 7,
        "message": "Main navigation lacks proper semantic structure and ARIA landmarks",
        "description": "Main navigation lacks proper semantic structure and ARIA landmarks This code works but could be improved for better maintainability.",
        "suggestion": "Add role='navigation' and aria-label for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <nav\n        ref={ref}\n        role=\"navigation\"\n        aria-label=\"Main navigation\"\n        className={cn(\n          \"w-full transition-all duration-300\",\n          heightMap[height],\n          positionClasses[position],\n          hidden && \"-translate-y-full\",\n          className,\n        )}\n        style={{ zIndex }}\n      >",
          "description": "Add role='navigation' and aria-label for better screen reader support",
          "content": "      <nav\n        ref={ref}\n        role=\"navigation\"\n        aria-label=\"Main navigation\"\n        className={cn(\n          \"w-full transition-all duration-300\",\n          heightMap[height],\n          positionClasses[position],\n          hidden && \"-translate-y-full\",\n          className,\n        )}\n        style={{ zIndex }}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 49,
        "column": 7,
        "message": "Scroll event listener without throttling may cause performance issues",
        "description": "Scroll event listener without throttling may cause performance issues This implementation could impact application performance.",
        "suggestion": "Consider throttling or debouncing the scroll event handler for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/navbar.tsx",
        "line": 123,
        "column": 13,
        "message": "Type assertion 'as any' reduces type safety",
        "description": "Type assertion 'as any' reduces type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper TypeScript typing instead of 'as any'",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      ref={ref as React.ForwardedRef<HTMLAnchorElement & HTMLButtonElement>}",
          "description": "Use proper TypeScript typing instead of 'as any'",
          "content": "      ref={ref as React.ForwardedRef<HTMLAnchorElement & HTMLButtonElement>}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/navbar/index.ts",
        "line": 7,
        "column": 1,
        "message": "Trailing empty line at end of file should be removed for consistency",
        "description": "Trailing empty line at end of file should be removed for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * navbar Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./navbar\";",
          "description": "Remove the trailing empty line at the end of the file",
          "content": "/**\n * navbar Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./navbar\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/index.ts",
        "line": 6,
        "column": 1,
        "message": "Empty line at end of file should be removed",
        "description": "Empty line at end of file should be removed This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-tree-view Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-tree-view\";",
          "description": "Remove the trailing empty line",
          "content": "/**\n * glass-tree-view Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-tree-view\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx",
        "line": 120,
        "column": 13,
        "message": "Invalid JSX element '_span' - should be 'span'",
        "description": "Invalid JSX element '_span' - should be 'span' This will likely cause errors during execution.",
        "suggestion": "Replace '_span' with 'span' and '_className' with 'className'",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <span className=\"text-[var(--text-secondary)]\">\n              {isExpanded ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </span>",
          "description": "Replace '_span' with 'span' and '_className' with 'className'",
          "content": "            <span className=\"text-[var(--text-secondary)]\">\n              {isExpanded ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx",
        "line": 113,
        "column": 11,
        "message": "Missing aria-level attribute for tree items",
        "description": "Missing aria-level attribute for tree items This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-level attribute to indicate the hierarchical level of the tree item",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          role=\"treeitem\"\n          aria-level={level + 1}\n          aria-expanded={hasChildren ? isExpanded : undefined}\n          aria-selected={isSelected}",
          "description": "Add aria-level attribute to indicate the hierarchical level of the tree item",
          "content": "          role=\"treeitem\"\n          aria-level={level + 1}\n          aria-expanded={hasChildren ? isExpanded : undefined}\n          aria-selected={isSelected}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx",
        "line": 153,
        "column": 5,
        "message": "Tree container should have aria-label or aria-labelledby for screen readers",
        "description": "Tree container should have aria-label or aria-labelledby for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to the tree container to provide an accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx",
        "line": 51,
        "column": 19,
        "message": "Creating new Set on every render when controlledExpandedIds is provided",
        "description": "Creating new Set on every render when controlledExpandedIds is provided This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize the expandedIds Set creation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const expandedIds = React.useMemo(\n    () => controlledExpandedIds\n      ? new Set(controlledExpandedIds)\n      : internalExpandedIds,\n    [controlledExpandedIds, internalExpandedIds]\n  );",
          "description": "Use useMemo to memoize the expandedIds Set creation",
          "content": "  const expandedIds = React.useMemo(\n    () => controlledExpandedIds\n      ? new Set(controlledExpandedIds)\n      : internalExpandedIds,\n    [controlledExpandedIds, internalExpandedIds]\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tree-view/glass-tree-view.tsx",
        "line": 74,
        "column": 19,
        "message": "renderNode function recreated on every render, potentially causing unnecessary re-renders",
        "description": "renderNode function recreated on every render, potentially causing unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Use useCallback to memoize the renderNode function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const renderNode = React.useCallback((node: TreeNode, level = 0): React.ReactNode => {",
          "description": "Use useCallback to memoize the renderNode function",
          "content": "  const renderNode = React.useCallback((node: TreeNode, level = 0): React.ReactNode => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary trailing empty line at end of file",
        "description": "Unnecessary trailing empty line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-toast Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-toast\";",
          "description": "Remove the trailing empty line",
          "content": "/**\n * glass-toast Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-toast\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 21,
        "column": 52,
        "message": "ToastContext is created with undefined instead of null, but useContext can return undefined",
        "description": "ToastContext is created with undefined instead of null, but useContext can return undefined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change undefined to null to match the type definition",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const ToastContext = createContext<ToastContextType | null>(null);",
          "description": "Change undefined to null to match the type definition",
          "content": "const ToastContext = createContext<ToastContextType | null>(null);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 42,
        "column": 15,
        "message": "Using Math.random() for ID generation is not cryptographically secure and may cause collisions",
        "description": "Using Math.random() for ID generation is not cryptographically secure and may cause collisions This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Use crypto.randomUUID() or a more robust ID generation method",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const id = crypto.randomUUID();",
          "description": "Use crypto.randomUUID() or a more robust ID generation method",
          "content": "    const id = crypto.randomUUID();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-memory-leak-2",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 46,
        "column": 5,
        "message": "setTimeout is not cleaned up if component unmounts before timeout completes",
        "description": "setTimeout is not cleaned up if component unmounts before timeout completes This code works but could be improved for better maintainability.",
        "suggestion": "Store timeout ID and clear it in cleanup function or track component mount state",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 63,
        "column": 11,
        "message": "Toast container missing aria-live attribute for screen reader announcements",
        "description": "Toast container missing aria-live attribute for screen reader announcements This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' and role='status' attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div\n            className={cn(\n              \"fixed z-50 flex flex-col space-y-2\",\n              positionClasses[position],\n            )}\n            aria-live=\"polite\"\n            role=\"status\"\n            aria-label=\"Notifications\"\n          >",
          "description": "Add aria-live='polite' and role='status' attributes",
          "content": "          <div\n            className={cn(\n              \"fixed z-50 flex flex-col space-y-2\",\n              positionClasses[position],\n            )}\n            aria-live=\"polite\"\n            role=\"status\"\n            aria-label=\"Notifications\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 87,
        "column": 5,
        "message": "Toast item missing proper ARIA attributes for screen readers",
        "description": "Toast item missing proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role='alert', aria-labelledby, and aria-describedby attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n      className={cn(\n        \"liquid-glass relative radius-lg-m border border-liquid-glass-hl/30 p-4\",\n        \"min-w-[300px] max-w-[400px]\",\n        \"transition-all duration-200 will-change-transform\",\n        \"motion-safe:animate-in motion-safe:slide-in-from-right-full motion-safe:duration-300\",\n        isVisible ? \"translate-x-0 opacity-100\" : \"translate-x-full opacity-0\",\n      )}\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >",
          "description": "Add role='alert', aria-labelledby, and aria-describedby attributes",
          "content": "    <div\n      className={cn(\n        \"liquid-glass relative radius-lg-m border border-liquid-glass-hl/30 p-4\",\n        \"min-w-[300px] max-w-[400px]\",\n        \"transition-all duration-200 will-change-transform\",\n        \"motion-safe:animate-in motion-safe:slide-in-from-right-full motion-safe:duration-300\",\n        isVisible ? \"translate-x-0 opacity-100\" : \"translate-x-full opacity-0\",\n      )}\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 126,
        "column": 11,
        "message": "Close button missing aria-label for screen readers",
        "description": "Close button missing aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label='Close notification' to the close button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            onClick={handleRemove}\n            aria-label=\"Close notification\"\n            className={cn(\n              \"liquid-glass-button flex-shrink-0 liquid-glass-sm p-1 text-liquid-grey\",\n              \"motion-safe:hover:text-liquid-primary motion-safe:hover:scale-110\",\n              \"motion-safe:active:scale-95 transition-all duration-200\",\n              \"liquid-glass-interactive:focus-visible\",\n            )}\n          >",
          "description": "Add aria-label='Close notification' to the close button",
          "content": "          <button\n            type=\"button\"\n            onClick={handleRemove}\n            aria-label=\"Close notification\"\n            className={cn(\n              \"liquid-glass-button flex-shrink-0 liquid-glass-sm p-1 text-liquid-grey\",\n              \"motion-safe:hover:text-liquid-primary motion-safe:hover:scale-110\",\n              \"motion-safe:active:scale-95 transition-all duration-200\",\n              \"liquid-glass-interactive:focus-visible\",\n            )}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 99,
        "column": 9,
        "message": "Icons object is recreated on every render",
        "description": "Icons object is recreated on every render This implementation could impact application performance.",
        "suggestion": "Move icons object outside component or use useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const TOAST_ICONS = {\n  success: CheckCircle,\n  error: AlertCircle,\n  warning: AlertTriangle,\n  info: Info,\n};\n\nconst TOAST_ICON_COLORS = {\n  success: \"text-green-400\",\n  error: \"text-red-400\",\n  warning: \"text-yellow-400\",\n  info: \"text-blue-400\",\n};\n\nconst ToastItem: React.FC<ToastItemProps> = ({ toast, onRemove }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleRemove = () => {\n    setIsVisible(false);\n    setTimeout(() => onRemove(toast.id), 200);\n  };\n\n  const Icon = TOAST_ICONS[toast.type || \"info\"];",
          "description": "Move icons object outside component or use useMemo",
          "content": "const TOAST_ICONS = {\n  success: CheckCircle,\n  error: AlertCircle,\n  warning: AlertTriangle,\n  info: Info,\n};\n\nconst TOAST_ICON_COLORS = {\n  success: \"text-green-400\",\n  error: \"text-red-400\",\n  warning: \"text-yellow-400\",\n  info: \"text-blue-400\",\n};\n\nconst ToastItem: React.FC<ToastItemProps> = ({ toast, onRemove }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleRemove = () => {\n    setIsVisible(false);\n    setTimeout(() => onRemove(toast.id), 200);\n  };\n\n  const Icon = TOAST_ICONS[toast.type || \"info\"];"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.tsx",
        "line": 119,
        "column": 19,
        "message": "Inconsistent class name format - using 'text-text-liquid-accent' instead of 'text-liquid-accent'",
        "description": "Inconsistent class name format - using 'text-text-liquid-accent' instead of 'text-liquid-accent' This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent naming pattern: 'text-liquid-accent'",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  \"mt-2 font-medium text-liquid-accent text-sm\",",
          "description": "Use consistent naming pattern: 'text-liquid-accent'",
          "content": "                  \"mt-2 font-medium text-liquid-accent text-sm\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx",
        "line": 415,
        "column": 9,
        "message": "Form labels should be properly associated with inputs using 'htmlFor' matching 'id' attributes",
        "description": "Form labels should be properly associated with inputs using 'htmlFor' matching 'id' attributes This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the 'htmlFor' attribute matches the corresponding input's 'id'",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label\n          htmlFor=\"email-input\"\n          className=\"mb-1 block font-medium text-sm\"\n        >\n          Email\n        </label>\n        <input\n          id=\"email-input\"\n          type=\"email\"",
          "description": "Ensure the 'htmlFor' attribute matches the corresponding input's 'id'",
          "content": "        <label\n          htmlFor=\"email-input\"\n          className=\"mb-1 block font-medium text-sm\"\n        >\n          Email\n        </label>\n        <input\n          id=\"email-input\"\n          type=\"email\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx",
        "line": 432,
        "column": 9,
        "message": "Form labels should be properly associated with inputs using 'htmlFor' matching 'id' attributes",
        "description": "Form labels should be properly associated with inputs using 'htmlFor' matching 'id' attributes This code works but could be improved for better maintainability.",
        "suggestion": "Ensure the 'htmlFor' attribute matches the corresponding input's 'id'",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label\n          htmlFor=\"password-input\"\n          className=\"mb-1 block font-medium text-sm\"\n        >\n          Password\n        </label>\n        <input\n          id=\"password-input\"\n          type=\"password\"",
          "description": "Ensure the 'htmlFor' attribute matches the corresponding input's 'id'",
          "content": "        <label\n          htmlFor=\"password-input\"\n          className=\"mb-1 block font-medium text-sm\"\n        >\n          Password\n        </label>\n        <input\n          id=\"password-input\"\n          type=\"password\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx",
        "line": 422,
        "column": 11,
        "message": "Input type should be 'email' for email validation",
        "description": "Input type should be 'email' for email validation This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use type='email' instead of type='text' for email inputs to enable built-in validation",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          type=\"email\"",
          "description": "Use type='email' instead of type='text' for email inputs to enable built-in validation",
          "content": "          type=\"email\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-toast/glass-toast.stories.tsx",
        "line": 122,
        "column": 49,
        "message": "Type assertion 'as unknown' is unsafe and should be avoided",
        "description": "Type assertion 'as unknown' is unsafe and should be avoided This violates code style conventions and may reduce readability.",
        "suggestion": "Define proper TypeScript types for the position prop or use a more specific type assertion",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/index.ts",
        "line": 6,
        "column": 1,
        "message": "Redundant export statement - re-exporting everything after named export creates unnecessary duplication",
        "description": "Redundant export statement - re-exporting everything after named export creates unnecessary duplication This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the wildcard re-export since the named export already exports the main component",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-tooltip Component Export\n */\nexport { GlassTooltip } from \"./glass-tooltip\";\n",
          "description": "Remove the wildcard re-export since the named export already exports the main component",
          "content": "/**\n * glass-tooltip Component Export\n */\nexport { GlassTooltip } from \"./glass-tooltip\";\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx-memory-leak-0",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx",
        "line": 27,
        "column": 7,
        "message": "Potential memory leak - timeout not cleared on component unmount",
        "description": "Potential memory leak - timeout not cleared on component unmount This code works but could be improved for better maintainability.",
        "suggestion": "Add cleanup effect to clear timeout on component unmount",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);",
          "description": "Add cleanup effect to clear timeout on component unmount",
          "content": "  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx",
        "line": 95,
        "column": 7,
        "message": "Missing ARIA attributes for tooltip accessibility",
        "description": "Missing ARIA attributes for tooltip accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add role, aria-describedby, and aria-expanded attributes for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n      ref={tooltipRef}\n      role=\"tooltip\"\n      aria-hidden={!isVisible}\n      style={tooltipStyle}\n      className={cn(\n        \"liquid-glass\",\n        getGlassClass(\"elevated\"),\n        \"rounded-lg px-3 py-2 text-sm\",\n        \"border border-white/20 dark:border-white/10\",\n        \"text-gray-900 dark:text-white\",\n        \"max-w-xs break-words\",\n        \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        \"shadow-black/10 shadow-lg dark:shadow-black/30\",\n        className,\n      )}\n    >",
          "description": "Add role, aria-describedby, and aria-expanded attributes for screen readers",
          "content": "    <div\n      ref={tooltipRef}\n      role=\"tooltip\"\n      aria-hidden={!isVisible}\n      style={tooltipStyle}\n      className={cn(\n        \"liquid-glass\",\n        getGlassClass(\"elevated\"),\n        \"rounded-lg px-3 py-2 text-sm\",\n        \"border border-white/20 dark:border-white/10\",\n        \"text-gray-900 dark:text-white\",\n        \"max-w-xs break-words\",\n        \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        \"shadow-black/10 shadow-lg dark:shadow-black/30\",\n        className,\n      )}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx",
        "line": 131,
        "column": 7,
        "message": "Missing ARIA attributes on trigger element for tooltip relationship",
        "description": "Missing ARIA attributes on trigger element for tooltip relationship This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby and aria-expanded attributes to establish tooltip relationship",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div\n        ref={triggerRef}\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        onFocus={showTooltip}\n        onBlur={hideTooltip}\n        aria-describedby={isVisible ? 'tooltip' : undefined}\n        aria-expanded={isVisible}\n        className=\"inline-block\"\n      >",
          "description": "Add aria-describedby and aria-expanded attributes to establish tooltip relationship",
          "content": "      <div\n        ref={triggerRef}\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        onFocus={showTooltip}\n        onBlur={hideTooltip}\n        aria-describedby={isVisible ? 'tooltip' : undefined}\n        aria-expanded={isVisible}\n        className=\"inline-block\"\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.tsx",
        "line": 50,
        "column": 5,
        "message": "getBoundingClientRect called on every render when visible - consider debouncing",
        "description": "getBoundingClientRect called on every render when visible - consider debouncing This implementation could impact application performance.",
        "suggestion": "Add position dependencies to useEffect to prevent unnecessary recalculations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    if (typeof window === \"undefined\" || !isVisible) {\n      return;\n    }\n    \n    const updatePosition = () => {\n      if (triggerRef.current && tooltipRef.current) {\n        const triggerRect = triggerRef.current.getBoundingClientRect();\n        const tooltipRect = tooltipRef.current.getBoundingClientRect();\n\n        let top = 0;\n        let left = 0;\n\n        switch (position) {\n          case \"top\": {\n            top = triggerRect.top - tooltipRect.height - 8;\n            left = triggerRect.left + (triggerRect.width - tooltipRect.width) / 2;\n            break;\n          }\n          case \"bottom\": {\n            top = triggerRect.bottom + 8;\n            left = triggerRect.left + (triggerRect.width - tooltipRect.width) / 2;\n            break;\n          }\n          case \"left\": {\n            top = triggerRect.top + (triggerRect.height - tooltipRect.height) / 2;\n            left = triggerRect.left - tooltipRect.width - 8;\n            break;\n          }\n          case \"right\": {\n            top = triggerRect.top + (triggerRect.height - tooltipRect.height) / 2;\n            left = triggerRect.right + 8;\n            break;\n          }\n        }\n\n        // Keep tooltip within viewport\n        const viewport = {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        };\n\n        if (left < 8) {\n          left = 8;\n        }\n        if (left + tooltipRect.width > viewport.width - 8) {\n          left = viewport.width - tooltipRect.width - 8;\n        }\n        if (top < 8) {\n          top = 8;\n        }\n        if (top + tooltipRect.height > viewport.height - 8) {\n          top = viewport.height - tooltipRect.height - 8;\n        }\n\n        setTooltipStyle({\n          position: \"fixed\",\n          top: `${top}px`,\n          left: `${left}px`,\n          zIndex: 9999,\n        });\n      }\n    };\n    \n    updatePosition();\n    \n    const handleResize = () => updatePosition();\n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [isVisible, position]);",
          "description": "Add position dependencies to useEffect to prevent unnecessary recalculations",
          "content": "  useEffect(() => {\n    if (typeof window === \"undefined\" || !isVisible) {\n      return;\n    }\n    \n    const updatePosition = () => {\n      if (triggerRef.current && tooltipRef.current) {\n        const triggerRect = triggerRef.current.getBoundingClientRect();\n        const tooltipRect = tooltipRef.current.getBoundingClientRect();\n\n        let top = 0;\n        let left = 0;\n\n        switch (position) {\n          case \"top\": {\n            top = triggerRect.top - tooltipRect.height - 8;\n            left = triggerRect.left + (triggerRect.width - tooltipRect.width) / 2;\n            break;\n          }\n          case \"bottom\": {\n            top = triggerRect.bottom + 8;\n            left = triggerRect.left + (triggerRect.width - tooltipRect.width) / 2;\n            break;\n          }\n          case \"left\": {\n            top = triggerRect.top + (triggerRect.height - tooltipRect.height) / 2;\n            left = triggerRect.left - tooltipRect.width - 8;\n            break;\n          }\n          case \"right\": {\n            top = triggerRect.top + (triggerRect.height - tooltipRect.height) / 2;\n            left = triggerRect.right + 8;\n            break;\n          }\n        }\n\n        // Keep tooltip within viewport\n        const viewport = {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        };\n\n        if (left < 8) {\n          left = 8;\n        }\n        if (left + tooltipRect.width > viewport.width - 8) {\n          left = viewport.width - tooltipRect.width - 8;\n        }\n        if (top < 8) {\n          top = 8;\n        }\n        if (top + tooltipRect.height > viewport.height - 8) {\n          top = viewport.height - tooltipRect.height - 8;\n        }\n\n        setTooltipStyle({\n          position: \"fixed\",\n          top: `${top}px`,\n          left: `${left}px`,\n          zIndex: 9999,\n        });\n      }\n    };\n    \n    updatePosition();\n    \n    const handleResize = () => updatePosition();\n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [isVisible, position]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 149,
        "column": 9,
        "message": "Interactive elements lack accessible labels and descriptions",
        "description": "Interactive elements lack accessible labels and descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Get help\"\n        >",
          "description": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Get help\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 157,
        "column": 9,
        "message": "Interactive elements lack accessible labels and descriptions",
        "description": "Interactive elements lack accessible labels and descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"More information\"\n        >",
          "description": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"More information\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 165,
        "column": 9,
        "message": "Interactive elements lack accessible labels and descriptions",
        "description": "Interactive elements lack accessible labels and descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Warning: This action cannot be undone\"\n        >",
          "description": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Warning: This action cannot be undone\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 173,
        "column": 9,
        "message": "Interactive elements lack accessible labels and descriptions",
        "description": "Interactive elements lack accessible labels and descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Settings\"\n        >",
          "description": "Add aria-label or aria-describedby attributes to buttons with only icons for screen readers",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          aria-label=\"Settings\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 486,
        "column": 13,
        "message": "Form controls need proper labels",
        "description": "Form controls need proper labels This code works but could be improved for better maintainability.",
        "suggestion": "Add proper labels or aria-label attributes to form controls",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <input type=\"checkbox\" className=\"rounded\" aria-label=\"Checkbox with tooltip\" />",
          "description": "Add proper labels or aria-label attributes to form controls",
          "content": "            <input type=\"checkbox\" className=\"rounded\" aria-label=\"Checkbox with tooltip\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 494,
        "column": 11,
        "message": "Form controls need proper labels",
        "description": "Form controls need proper labels This code works but could be improved for better maintainability.",
        "suggestion": "Add proper labels or aria-label attributes to form controls",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <select className=\"rounded-lg border border-gray-300 px-3 py-2\" aria-label=\"Select an option\">\n            <option>Option 1</option>\n            <option>Option 2</option>\n            <option>Option 3</option>\n          </select>",
          "description": "Add proper labels or aria-label attributes to form controls",
          "content": "          <select className=\"rounded-lg border border-gray-300 px-3 py-2\" aria-label=\"Select an option\">\n            <option>Option 1</option>\n            <option>Option 2</option>\n            <option>Option 3</option>\n          </select>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 505,
        "column": 11,
        "message": "Form controls need proper labels",
        "description": "Form controls need proper labels This code works but could be improved for better maintainability.",
        "suggestion": "Add proper labels or aria-label attributes to form controls",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <input type=\"range\" className=\"w-32\" aria-label=\"Adjust the value\" />",
          "description": "Add proper labels or aria-label attributes to form controls",
          "content": "          <input type=\"range\" className=\"w-32\" aria-label=\"Adjust the value\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tooltip/glass-tooltip.stories.tsx",
        "line": 1,
        "column": 1,
        "message": "Unused imports should be removed to reduce bundle size",
        "description": "Unused imports should be removed to reduce bundle size This implementation could impact application performance.",
        "suggestion": "Remove unused icon imports that are not used in the stories",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/index.ts",
        "line": 7,
        "column": 1,
        "message": "Missing newline at end of file",
        "description": "Missing newline at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Add a newline at the end of the file to follow common formatting conventions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-textarea Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-textarea\";\n",
          "description": "Add a newline at the end of the file to follow common formatting conventions",
          "content": "/**\n * glass-textarea Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-textarea\";\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 268,
        "column": 13,
        "message": "aria-describedby attribute is constructed with cn() which may produce incorrect space-separated values",
        "description": "aria-describedby attribute is constructed with cn() which may produce incorrect space-separated values This code works but could be improved for better maintainability.",
        "suggestion": "Use array filter and join to properly construct aria-describedby value",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-describedby={[\n              description && descriptionId,\n              helperText && helperTextId\n            ].filter(Boolean).join(' ') || undefined}",
          "description": "Use array filter and join to properly construct aria-describedby value",
          "content": "            aria-describedby={[\n              description && descriptionId,\n              helperText && helperTextId\n            ].filter(Boolean).join(' ') || undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 78,
        "column": 5,
        "message": "Height calculation in calculateHeight performs multiple DOM style computations on every render",
        "description": "Height calculation in calculateHeight performs multiple DOM style computations on every render This implementation could impact application performance.",
        "suggestion": "Memoize computed style values or use ResizeObserver for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 133,
        "column": 9,
        "message": "Window resize listener uses setTimeout with 0ms delay which may cause unnecessary re-renders",
        "description": "Window resize listener uses setTimeout with 0ms delay which may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Use requestAnimationFrame or debounce the resize handler",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const handleResize = () => {\n        requestAnimationFrame(calculateHeight);\n      };",
          "description": "Use requestAnimationFrame or debounce the resize handler",
          "content": "      const handleResize = () => {\n        requestAnimationFrame(calculateHeight);\n      };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 275,
        "column": 11,
        "message": "Character count display lacks proper accessibility labeling",
        "description": "Character count display lacks proper accessibility labeling This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live and aria-label attributes for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          {showCharacterCount && (\n            <div\n              className={cn(\n                \"absolute bottom-2 text-xs z-20\",\n                characterCountPosition === \"bottom-right\"\n                  ? \"right-3\"\n                  : \"left-3\",\n                isOverLimit ? \"text-red-400\" : \"text-liquid-grey/70\",\n              )}\n              aria-live=\"polite\"\n              aria-label={maxLength ? `${characterCount} of ${maxLength} characters used` : `${characterCount} characters entered`}\n            >\n              {maxLength ? `${characterCount}/${maxLength}` : characterCount}\n            </div>\n          )}",
          "description": "Add aria-live and aria-label attributes for screen readers",
          "content": "          {showCharacterCount && (\n            <div\n              className={cn(\n                \"absolute bottom-2 text-xs z-20\",\n                characterCountPosition === \"bottom-right\"\n                  ? \"right-3\"\n                  : \"left-3\",\n                isOverLimit ? \"text-red-400\" : \"text-liquid-grey/70\",\n              )}\n              aria-live=\"polite\"\n              aria-label={maxLength ? `${characterCount} of ${maxLength} characters used` : `${characterCount} characters entered`}\n            >\n              {maxLength ? `${characterCount}/${maxLength}` : characterCount}\n            </div>\n          )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 302,
        "column": 11,
        "message": "Hidden textarea for height calculation may not accurately reflect actual textarea dimensions due to missing style properties",
        "description": "Hidden textarea for height calculation may not accurately reflect actual textarea dimensions due to missing style properties This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Ensure all relevant CSS properties are copied to the hidden textarea",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.tsx",
        "line": 127,
        "column": 5,
        "message": "useEffect dependency on calculateHeight function may cause unnecessary re-renders",
        "description": "useEffect dependency on calculateHeight function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Consider using useCallback with proper dependencies or restructure to avoid function dependency",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useCallback with proper dependencies or restructure to avoid function dependency",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 136,
        "column": 5,
        "message": "Testing framework keyboard event simulation limitation - defaultPrevented assertion will always be false in test environment",
        "description": "Testing framework keyboard event simulation limitation - defaultPrevented assertion will always be false in test environment This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the assertion or test the behavior differently by verifying the component's internal state or DOM changes",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Note: Testing framework limitation - defaultPrevented cannot be reliably tested\n    // Instead, verify that the component handles the event appropriately",
          "description": "Remove the assertion or test the behavior differently by verifying the component's internal state or DOM changes",
          "content": "    // Note: Testing framework limitation - defaultPrevented cannot be reliably tested\n    // Instead, verify that the component handles the event appropriately"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing error boundaries or error state testing for edge cases",
        "description": "Missing error boundaries or error state testing for edge cases This code works but could be improved for better maintainability.",
        "suggestion": "Add tests for error scenarios like invalid props, null/undefined values, and edge cases",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing accessibility tests for ARIA attributes and keyboard navigation patterns",
        "description": "Missing accessibility tests for ARIA attributes and keyboard navigation patterns This code works but could be improved for better maintainability.",
        "suggestion": "Add tests to verify proper ARIA labelling, describedby relationships, and keyboard navigation behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 221,
        "column": 3,
        "message": "Potential performance issue with auto-resize testing - missing tests for performance impact of dynamic height calculations",
        "description": "Potential performance issue with auto-resize testing - missing tests for performance impact of dynamic height calculations This implementation could impact application performance.",
        "suggestion": "Add tests to verify that auto-resize doesn't cause excessive re-renders or layout thrashing",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 35,
        "column": 9,
        "message": "Inconsistent boolean prop values - mixing explicit true with implicit boolean",
        "description": "Inconsistent boolean prop values - mixing explicit true with implicit boolean This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent boolean syntax throughout the tests",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        error\n        helperText=\"Message is required\"",
          "description": "Use consistent boolean syntax throughout the tests",
          "content": "        error\n        helperText=\"Message is required\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 61,
        "column": 9,
        "message": "Inconsistent boolean prop values",
        "description": "Inconsistent boolean prop values This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent boolean syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        showCharacterCount",
          "description": "Use consistent boolean syntax",
          "content": "        showCharacterCount"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 74,
        "column": 9,
        "message": "Inconsistent boolean prop values",
        "description": "Inconsistent boolean prop values This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent boolean syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        showCharacterCount",
          "description": "Use consistent boolean syntax",
          "content": "        showCharacterCount"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 177,
        "column": 43,
        "message": "Inconsistent boolean prop values",
        "description": "Inconsistent boolean prop values This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent boolean syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    render(<GlassTextarea label=\"Disabled\" disabled />);",
          "description": "Use consistent boolean syntax",
          "content": "    render(<GlassTextarea label=\"Disabled\" disabled />);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.test.tsx",
        "line": 184,
        "column": 43,
        "message": "Inconsistent boolean prop values",
        "description": "Inconsistent boolean prop values This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent boolean syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    render(<GlassTextarea label=\"Required\" required />);",
          "description": "Use consistent boolean syntax",
          "content": "    render(<GlassTextarea label=\"Required\" required />);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 173,
        "column": 11,
        "message": "Input element missing proper labeling and accessibility attributes",
        "description": "Input element missing proper labeling and accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add proper label, id, and ARIA attributes for accessibility compliance",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <label htmlFor=\"subject-input\" className=\"block text-sm font-medium text-white/80 mb-2\">\n            Subject\n          </label>\n          <input\n            id=\"subject-input\"\n            type=\"text\"\n            placeholder=\"Subject\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className=\"w-full px-4 py-2 rounded-lg bg-white/10 border border-white/20 text-white placeholder-white/60\"\n            aria-describedby=\"subject-helper\"\n          />",
          "description": "Add proper label, id, and ARIA attributes for accessibility compliance",
          "content": "          <label htmlFor=\"subject-input\" className=\"block text-sm font-medium text-white/80 mb-2\">\n            Subject\n          </label>\n          <input\n            id=\"subject-input\"\n            type=\"text\"\n            placeholder=\"Subject\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className=\"w-full px-4 py-2 rounded-lg bg-white/10 border border-white/20 text-white placeholder-white/60\"\n            aria-describedby=\"subject-helper\"\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 160,
        "column": 11,
        "message": "Variable name 'title' doesn't match its semantic usage as 'subject'",
        "description": "Variable name 'title' doesn't match its semantic usage as 'subject' This code works but could be improved for better maintainability.",
        "suggestion": "Rename variable to better reflect its purpose as 'subject'",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [subject, setSubject] = useState(\"\");",
          "description": "Rename variable to better reflect its purpose as 'subject'",
          "content": "    const [subject, setSubject] = useState(\"\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-naming-2",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 177,
        "column": 19,
        "message": "Variable usage should be consistent with renamed 'subject'",
        "description": "Variable usage should be consistent with renamed 'subject' This code works but could be improved for better maintainability.",
        "suggestion": "Update variable reference to match renamed variable",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            value={subject}",
          "description": "Update variable reference to match renamed variable",
          "content": "            value={subject}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 178,
        "column": 29,
        "message": "Function call should be consistent with renamed 'setSubject'",
        "description": "Function call should be consistent with renamed 'setSubject' This code works but could be improved for better maintainability.",
        "suggestion": "Update function call to match renamed setter",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            onChange={(e) => setSubject(e.target.value)}",
          "description": "Update function call to match renamed setter",
          "content": "            onChange={(e) => setSubject(e.target.value)}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 202,
        "column": 9,
        "message": "Button element missing proper accessibility attributes and focus management",
        "description": "Button element missing proper accessibility attributes and focus management This code works but could be improved for better maintainability.",
        "suggestion": "Add ARIA attributes and proper focus management for form submission",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button \n          type=\"submit\"\n          className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50\"\n          aria-label=\"Submit contact form\"\n        >\n          Submit\n        </button>",
          "description": "Add ARIA attributes and proper focus management for form submission",
          "content": "        <button \n          type=\"submit\"\n          className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50\"\n          aria-label=\"Submit contact form\"\n        >\n          Submit\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx-structure-5",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-textarea/glass-textarea.stories.tsx",
        "line": 165,
        "column": 7,
        "message": "Form elements not wrapped in proper form element",
        "description": "Form elements not wrapped in proper form element This code works but could be improved for better maintainability.",
        "suggestion": "Wrap form inputs in a proper form element with onSubmit handler",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - the wildcard export already includes the named export",
        "description": "Redundant export statement - the wildcard export already includes the named export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the named export since the wildcard export on line 7 already exports everything from the module",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-tabs Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-tabs\";",
          "description": "Remove the named export since the wildcard export on line 7 already exports everything from the module",
          "content": "/**\n * glass-tabs Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-tabs\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx",
        "line": 42,
        "column": 11,
        "message": "Missing keyboard navigation handling for arrow keys in tab component",
        "description": "Missing keyboard navigation handling for arrow keys in tab component This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler to support arrow key navigation between tabs as per ARIA best practices",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {tabs.map((tab, index) => {\n          const handleKeyDown = (e: React.KeyboardEvent) => {\n            const enabledTabs = tabs.filter(t => !t.disabled);\n            const currentIndex = enabledTabs.findIndex(t => t.id === tab.id);\n            \n            if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n              e.preventDefault();\n              const nextIndex = e.key === 'ArrowRight' \n                ? (currentIndex + 1) % enabledTabs.length\n                : (currentIndex - 1 + enabledTabs.length) % enabledTabs.length;\n              const nextTab = enabledTabs[nextIndex];\n              setActiveTab(nextTab.id);\n              document.getElementById(`${baseId}-tab-${nextTab.id}`)?.focus();\n            } else if (e.key === 'Home') {\n              e.preventDefault();\n              const firstTab = enabledTabs[0];\n              setActiveTab(firstTab.id);\n              document.getElementById(`${baseId}-tab-${firstTab.id}`)?.focus();\n            } else if (e.key === 'End') {\n              e.preventDefault();\n              const lastTab = enabledTabs[enabledTabs.length - 1];\n              setActiveTab(lastTab.id);\n              document.getElementById(`${baseId}-tab-${lastTab.id}`)?.focus();\n            }\n          };\n          \n          return (\n          <button\n            type=\"button\"\n            role=\"tab\"\n            key={tab.id}\n            id={`${baseId}-tab-${tab.id}`}\n            aria-controls={`${baseId}-panel-${tab.id}`}\n            aria-selected={activeTab === tab.id}\n            tabIndex={activeTab === tab.id ? 0 : -1}\n            onClick={() => !tab.disabled && setActiveTab(tab.id)}\n            onKeyDown={handleKeyDown}\n            disabled={tab.disabled}\n            className={cn(\n              \"btn-scale flex-1 rounded-md px-4 py-2 font-medium text-sm transition-all focus:outline-none focus:ring-2 focus:ring-blue-500\",\n              tabButtonClassName,\n              activeTab === tab.id\n                ? activeTabButtonClassName\n                : inactiveTabButtonClassName,\n              tab.disabled && \"cursor-not-allowed opacity-50\",\n            )}\n          >\n            {tab.label}\n          </button>\n        );\n        })}",
          "description": "Add onKeyDown handler to support arrow key navigation between tabs as per ARIA best practices",
          "content": "        {tabs.map((tab, index) => {\n          const handleKeyDown = (e: React.KeyboardEvent) => {\n            const enabledTabs = tabs.filter(t => !t.disabled);\n            const currentIndex = enabledTabs.findIndex(t => t.id === tab.id);\n            \n            if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n              e.preventDefault();\n              const nextIndex = e.key === 'ArrowRight' \n                ? (currentIndex + 1) % enabledTabs.length\n                : (currentIndex - 1 + enabledTabs.length) % enabledTabs.length;\n              const nextTab = enabledTabs[nextIndex];\n              setActiveTab(nextTab.id);\n              document.getElementById(`${baseId}-tab-${nextTab.id}`)?.focus();\n            } else if (e.key === 'Home') {\n              e.preventDefault();\n              const firstTab = enabledTabs[0];\n              setActiveTab(firstTab.id);\n              document.getElementById(`${baseId}-tab-${firstTab.id}`)?.focus();\n            } else if (e.key === 'End') {\n              e.preventDefault();\n              const lastTab = enabledTabs[enabledTabs.length - 1];\n              setActiveTab(lastTab.id);\n              document.getElementById(`${baseId}-tab-${lastTab.id}`)?.focus();\n            }\n          };\n          \n          return (\n          <button\n            type=\"button\"\n            role=\"tab\"\n            key={tab.id}\n            id={`${baseId}-tab-${tab.id}`}\n            aria-controls={`${baseId}-panel-${tab.id}`}\n            aria-selected={activeTab === tab.id}\n            tabIndex={activeTab === tab.id ? 0 : -1}\n            onClick={() => !tab.disabled && setActiveTab(tab.id)}\n            onKeyDown={handleKeyDown}\n            disabled={tab.disabled}\n            className={cn(\n              \"btn-scale flex-1 rounded-md px-4 py-2 font-medium text-sm transition-all focus:outline-none focus:ring-2 focus:ring-blue-500\",\n              tabButtonClassName,\n              activeTab === tab.id\n                ? activeTabButtonClassName\n                : inactiveTabButtonClassName,\n              tab.disabled && \"cursor-not-allowed opacity-50\",\n            )}\n          >\n            {tab.label}\n          </button>\n        );\n        })}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx",
        "line": 67,
        "column": 9,
        "message": "Tab panels should have tabIndex=\"0\" for screen reader navigation",
        "description": "Tab panels should have tabIndex=\"0\" for screen reader navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add tabIndex=\"0\" to tab panels to make them focusable for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          className={cn(\"tab-content focus:outline-none\", tabPanelClassName)}\n          tabIndex={0}",
          "description": "Add tabIndex=\"0\" to tab panels to make them focusable for screen readers",
          "content": "          className={cn(\"tab-content focus:outline-none\", tabPanelClassName)}\n          tabIndex={0}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx",
        "line": 61,
        "column": 7,
        "message": "Rendering all tab panels in DOM even when hidden can impact performance",
        "description": "Rendering all tab panels in DOM even when hidden can impact performance This implementation could impact application performance.",
        "suggestion": "Only render the active tab panel content to improve performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      {(() => {\n        const activeTabData = tabs.find(tab => tab.id === activeTab);\n        if (!activeTabData) return null;\n        \n        return (\n          <div\n            id={`${baseId}-panel-${activeTabData.id}`}\n            role=\"tabpanel\"\n            aria-labelledby={`${baseId}-tab-${activeTabData.id}`}\n            className={cn(\"tab-content focus:outline-none\", tabPanelClassName)}\n            tabIndex={0}\n          >\n            <div className=\"liquid-glass-effect rounded-lg p-6\">{activeTabData.content}</div>\n          </div>\n        );\n      })()}",
          "description": "Only render the active tab panel content to improve performance",
          "content": "      {(() => {\n        const activeTabData = tabs.find(tab => tab.id === activeTab);\n        if (!activeTabData) return null;\n        \n        return (\n          <div\n            id={`${baseId}-panel-${activeTabData.id}`}\n            role=\"tabpanel\"\n            aria-labelledby={`${baseId}-tab-${activeTabData.id}`}\n            className={cn(\"tab-content focus:outline-none\", tabPanelClassName)}\n            tabIndex={0}\n          >\n            <div className=\"liquid-glass-effect rounded-lg p-6\">{activeTabData.content}</div>\n          </div>\n        );\n      })()}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.tsx",
        "line": 27,
        "column": 5,
        "message": "Potential runtime error if tabs array is empty",
        "description": "Potential runtime error if tabs array is empty This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add validation to ensure tabs array is not empty",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  if (!tabs || tabs.length === 0) {\n    return <div className={cn(\"w-full\", className)}>No tabs available</div>;\n  }\n\n  const [activeTab, setActiveTab] = useState(\n    defaultTab || tabs.find((tab) => !tab.disabled)?.id || tabs[0]?.id,\n  );",
          "description": "Add validation to ensure tabs array is not empty",
          "content": "  if (!tabs || tabs.length === 0) {\n    return <div className={cn(\"w-full\", className)}>No tabs available</div>;\n  }\n\n  const [activeTab, setActiveTab] = useState(\n    defaultTab || tabs.find((tab) => !tab.disabled)?.id || tabs[0]?.id,\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 266,
        "column": 19,
        "message": "Input elements in form should have proper dark mode styling and focus states",
        "description": "Input elements in form should have proper dark mode styling and focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add proper dark mode classes and focus states to input elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  <input\n                    id=\"username-settings\"\n                    type=\"text\"\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400\"\n                    placeholder=\"john_doe\"\n                  />",
          "description": "Add proper dark mode classes and focus states to input elements",
          "content": "                  <input\n                    id=\"username-settings\"\n                    type=\"text\"\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400\"\n                    placeholder=\"john_doe\"\n                  />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 281,
        "column": 19,
        "message": "Input elements in form should have proper dark mode styling and focus states",
        "description": "Input elements in form should have proper dark mode styling and focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add proper dark mode classes and focus states to input elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  <input\n                    id=\"email-settings\"\n                    type=\"email\"\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400\"\n                    placeholder=\"john@example.com\"\n                  />",
          "description": "Add proper dark mode classes and focus states to input elements",
          "content": "                  <input\n                    id=\"email-settings\"\n                    type=\"email\"\n                    className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400\"\n                    placeholder=\"john@example.com\"\n                  />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 298,
        "column": 17,
        "message": "Checkbox inputs should have proper dark mode styling and focus states",
        "description": "Checkbox inputs should have proper dark mode styling and focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add proper dark mode classes and focus states to checkbox elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />",
          "description": "Add proper dark mode classes and focus states to checkbox elements",
          "content": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 302,
        "column": 17,
        "message": "Checkbox inputs should have proper dark mode styling and focus states",
        "description": "Checkbox inputs should have proper dark mode styling and focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add proper dark mode classes and focus states to checkbox elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />",
          "description": "Add proper dark mode classes and focus states to checkbox elements",
          "content": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 306,
        "column": 17,
        "message": "Checkbox inputs should have proper dark mode styling and focus states",
        "description": "Checkbox inputs should have proper dark mode styling and focus states This code works but could be improved for better maintainability.",
        "suggestion": "Add proper dark mode classes and focus states to checkbox elements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />",
          "description": "Add proper dark mode classes and focus states to checkbox elements",
          "content": "                <input type=\"checkbox\" className=\"rounded focus:ring-2 focus:ring-blue-500/20 dark:bg-gray-700 dark:border-gray-600\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-tabs/glass-tabs.stories.tsx",
        "line": 327,
        "column": 13,
        "message": "Button should have proper focus states for accessibility",
        "description": "Button should have proper focus states for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add focus states to button for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button\n              type=\"button\"\n              className=\"rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:ring-offset-2\"\n            >\n              Manage Subscription\n            </button>",
          "description": "Add focus states to button for better accessibility",
          "content": "            <button\n              type=\"button\"\n              className=\"rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:ring-offset-2\"\n            >\n              Manage Subscription\n            </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary trailing newline at end of file",
        "description": "Unnecessary trailing newline at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing newline to maintain consistent file formatting",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-timeline Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-timeline\";",
          "description": "Remove trailing newline to maintain consistent file formatting",
          "content": "/**\n * glass-timeline Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-timeline\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 60,
        "column": 5,
        "message": "Timeline items lack proper ARIA landmarks and semantic structure for screen readers",
        "description": "Timeline items lack proper ARIA landmarks and semantic structure for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role='timeline' to container and role='listitem' to timeline items with proper ARIA labels",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<div className={cn(\"liquid-glass\", \"relative\", className)} role=\"timeline\" aria-label=\"Timeline\" {...props}>",
          "description": "Add role='timeline' to container and role='listitem' to timeline items with proper ARIA labels",
          "content": "<div className={cn(\"liquid-glass\", \"relative\", className)} role=\"timeline\" aria-label=\"Timeline\" {...props}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 67,
        "column": 17,
        "message": "Timeline icons lack proper ARIA labels for status indication",
        "description": "Timeline icons lack proper ARIA labels for status indication This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to indicate status for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <div\n                  className={cn(\n                    \"flex h-10 w-10 items-center justify-center rounded-full border-2\",\n                    getGlassClass(\"default\"),\n                    getStatusClass(item.status),\n                    microInteraction.gentle,\n                  )}\n                  aria-label={`Timeline item ${item.status || 'pending'}`}\n                  role=\"img\"\n                >",
          "description": "Add aria-label to indicate status for screen readers",
          "content": "                <div\n                  className={cn(\n                    \"flex h-10 w-10 items-center justify-center rounded-full border-2\",\n                    getGlassClass(\"default\"),\n                    getStatusClass(item.status),\n                    microInteraction.gentle,\n                  )}\n                  aria-label={`Timeline item ${item.status || 'pending'}`}\n                  role=\"img\"\n                >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 103,
        "column": 5,
        "message": "Timeline items in vertical layout lack proper semantic structure",
        "description": "Timeline items in vertical layout lack proper semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Add role='timeline' and proper ARIA structure",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div className={cn(\"relative\", className)} role=\"timeline\" aria-label=\"Timeline\" {...props}>",
          "description": "Add role='timeline' and proper ARIA structure",
          "content": "    <div className={cn(\"relative\", className)} role=\"timeline\" aria-label=\"Timeline\" {...props}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 106,
        "column": 9,
        "message": "Timeline item containers lack proper semantic roles",
        "description": "Timeline item containers lack proper semantic roles This code works but could be improved for better maintainability.",
        "suggestion": "Add role='listitem' and proper ARIA structure to timeline items",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div\n          key={item.id}\n          className={cn(\n            \"relative flex gap-4\",\n            alternating && index % 2 === 1 && \"flex-row-reverse\",\n          )}\n          role=\"listitem\"\n          aria-label={`Timeline item: ${item.title}`}\n        >",
          "description": "Add role='listitem' and proper ARIA structure to timeline items",
          "content": "        <div\n          key={item.id}\n          className={cn(\n            \"relative flex gap-4\",\n            alternating && index % 2 === 1 && \"flex-row-reverse\",\n          )}\n          role=\"listitem\"\n          aria-label={`Timeline item: ${item.title}`}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 131,
        "column": 13,
        "message": "Repeated conditional rendering logic could be optimized",
        "description": "Repeated conditional rendering logic could be optimized This implementation could impact application performance.",
        "suggestion": "Extract icon rendering to a separate component or memoize the result",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 60,
        "column": 5,
        "message": "Inconsistent indentation in JSX",
        "description": "Inconsistent indentation in JSX This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent indentation for JSX elements",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div className={cn(\"liquid-glass\", \"relative\", className)} {...props}>",
          "description": "Use consistent indentation for JSX elements",
          "content": "      <div className={cn(\"liquid-glass\", \"relative\", className)} {...props}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-timeline/glass-timeline.tsx",
        "line": 60,
        "column": 5,
        "message": "Missing keyboard navigation support for timeline items",
        "description": "Missing keyboard navigation support for timeline items This code works but could be improved for better maintainability.",
        "suggestion": "Add tabIndex and keyboard event handlers for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/index.ts",
        "line": 2,
        "column": 1,
        "message": "Unnecessary comment spacing and formatting inconsistency",
        "description": "Unnecessary comment spacing and formatting inconsistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unnecessary comment or improve formatting consistency",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-table Component Export\n * Re-export everything for compatibility\n */",
          "description": "Remove unnecessary comment or improve formatting consistency",
          "content": "/**\n * glass-table Component Export\n * Re-export everything for compatibility\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/index.ts",
        "line": 4,
        "column": 15,
        "message": "Missing file extension in import/export path could cause module resolution issues",
        "description": "Missing file extension in import/export path could cause module resolution issues This will likely cause errors during execution.",
        "suggestion": "Add explicit file extension or ensure module resolution is configured properly",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx",
        "line": 32,
        "column": 18,
        "message": "Using array index as key in map can cause React rendering issues and poor performance",
        "description": "Using array index as key in map can cause React rendering issues and poor performance This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use a unique identifier from the data item as key, or create a stable key based on item content",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx",
        "line": 17,
        "column": 7,
        "message": "Table lacks accessible attributes for screen readers",
        "description": "Table lacks accessible attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role, aria-label, or caption to improve table accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <table className=\"w-full\" role=\"table\" aria-label=\"Data table\">",
          "description": "Add role, aria-label, or caption to improve table accessibility",
          "content": "      <table className=\"w-full\" role=\"table\" aria-label=\"Data table\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx",
        "line": 2,
        "column": 10,
        "message": "Unused imports: useState and useMemo are imported but never used",
        "description": "Unused imports: useState and useMemo are imported but never used This implementation could impact application performance.",
        "suggestion": "Remove unused imports to reduce bundle size",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import type React from \"react\";",
          "description": "Remove unused imports to reduce bundle size",
          "content": "import type React from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx",
        "line": 39,
        "column": 21,
        "message": "Potential runtime error when item[column.key] is null or undefined",
        "description": "Potential runtime error when item[column.key] is null or undefined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add null/undefined checks before calling String() conversion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  {column.render\n                    ? column.render(item[column.key], item)\n                    : item[column.key] != null ? String(item[column.key]) : ''}",
          "description": "Add null/undefined checks before calling String() conversion",
          "content": "                  {column.render\n                    ? column.render(item[column.key], item)\n                    : item[column.key] != null ? String(item[column.key]) : ''}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.tsx",
        "line": 21,
        "column": 15,
        "message": "Table headers should have scope attribute for better accessibility",
        "description": "Table headers should have scope attribute for better accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add scope='col' attribute to table headers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <th\n                key={String(column.key)}\n                scope=\"col\"\n                className=\"px-6 py-4 text-left font-medium text-secondary text-xs uppercase tracking-wider\"\n              >",
          "description": "Add scope='col' attribute to table headers",
          "content": "              <th\n                key={String(column.key)}\n                scope=\"col\"\n                className=\"px-6 py-4 text-left font-medium text-secondary text-xs uppercase tracking-wider\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 138,
        "column": 5,
        "message": "Test expects table to have no caption, but tables should have captions for accessibility",
        "description": "Test expects table to have no caption, but tables should have captions for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Tables should have captions to describe their content for screen readers. The test should expect a caption to exist.",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    expect(caption).toBeInTheDocument(); // Tables should have captions for accessibility",
          "description": "Tables should have captions to describe their content for screen readers. The test should expect a caption to exist.",
          "content": "    expect(caption).toBeInTheDocument(); // Tables should have captions for accessibility"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 147,
        "column": 7,
        "message": "Test expects headers to not have scope attributes, but column headers should have scope='col' for accessibility",
        "description": "Test expects headers to not have scope attributes, but column headers should have scope='col' for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Column headers should have scope='col' attribute for screen reader accessibility. The test should expect scope attributes to exist.",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      expect(header).toHaveAttribute(\"scope\", \"col\"); // Headers should have scope attributes",
          "description": "Column headers should have scope='col' attribute for screen reader accessibility. The test should expect scope attributes to exist.",
          "content": "      expect(header).toHaveAttribute(\"scope\", \"col\"); // Headers should have scope attributes"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 132,
        "column": 3,
        "message": "Inconsistent test naming pattern - some tests start with 'should' others don't",
        "description": "Inconsistent test naming pattern - some tests start with 'should' others don't This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"has table caption for screen readers\", () => {",
          "description": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
          "content": "  it(\"has table caption for screen readers\", () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 141,
        "column": 3,
        "message": "Inconsistent test naming pattern - some tests start with 'should' others don't",
        "description": "Inconsistent test naming pattern - some tests start with 'should' others don't This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"has scope attributes on headers\", () => {",
          "description": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
          "content": "  it(\"has scope attributes on headers\", () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 151,
        "column": 3,
        "message": "Inconsistent test naming pattern - some tests start with 'should' others don't",
        "description": "Inconsistent test naming pattern - some tests start with 'should' others don't This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"has row headers for better screen reader support\", () => {",
          "description": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
          "content": "  it(\"has row headers for better screen reader support\", () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 292,
        "column": 3,
        "message": "Inconsistent test naming pattern - some tests start with 'should' others don't",
        "description": "Inconsistent test naming pattern - some tests start with 'should' others don't This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"has responsive table attributes\", () => {",
          "description": "Use consistent test naming convention. Either all tests should start with 'should' or none should.",
          "content": "  it(\"has responsive table attributes\", () => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 298,
        "column": 5,
        "message": "Test assertion is redundant - tables have role='table' by default",
        "description": "Test assertion is redundant - tables have role='table' by default This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove redundant test assertion as HTML table elements have role='table' by default",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Table elements have role='table' by default",
          "description": "Remove redundant test assertion as HTML table elements have role='table' by default",
          "content": "    // Table elements have role='table' by default"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.test.tsx",
        "line": 186,
        "column": 24,
        "message": "Using any type reduces type safety and performance optimizations",
        "description": "Using any type reduces type safety and performance optimizations This implementation could impact application performance.",
        "suggestion": "Use specific type instead of 'any' for better type safety",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        render: (value: ComplexData['user']) => `${value.name} (${value.role})`,",
          "description": "Use specific type instead of 'any' for better type safety",
          "content": "        render: (value: ComplexData['user']) => `${value.name} (${value.role})`,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 191,
        "column": 12,
        "message": "Status indicator using only color to convey information without accessible text alternatives",
        "description": "Status indicator using only color to convey information without accessible text alternatives This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader text to provide non-visual status information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"flex items-center gap-2\">\n            <div\n              className={`h-2 w-2 rounded-full ${\n                value === \"active\" ? \"bg-green-400\" : \"bg-red-400\"\n              }`}\n              aria-hidden=\"true\"\n            />\n            <span className=\"capitalize\" aria-label={`Status: ${value}`}>{value}</span>\n          </div>",
          "description": "Add aria-label or screen reader text to provide non-visual status information",
          "content": "          <div className=\"flex items-center gap-2\">\n            <div\n              className={`h-2 w-2 rounded-full ${\n                value === \"active\" ? \"bg-green-400\" : \"bg-red-400\"\n              }`}\n              aria-hidden=\"true\"\n            />\n            <span className=\"capitalize\" aria-label={`Status: ${value}`}>{value}</span>\n          </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 92,
        "column": 10,
        "message": "Status badge using only color to convey active/inactive state without accessible alternatives",
        "description": "Status badge using only color to convey active/inactive state without accessible alternatives This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible status information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <span\n            className={`rounded-full px-2 py-1 font-medium text-xs ${\n              value === \"active\"\n                ? \"bg-green-500/20 text-green-400\"\n                : \"bg-red-500/20 text-red-400\"\n            }`}\n            aria-label={`Status: ${value}`}\n          >\n            {value}\n          </span>",
          "description": "Add aria-label to provide accessible status information",
          "content": "          <span\n            className={`rounded-full px-2 py-1 font-medium text-xs ${\n              value === \"active\"\n                ? \"bg-green-500/20 text-green-400\"\n                : \"bg-red-500/20 text-red-400\"\n            }`}\n            aria-label={`Status: ${value}`}\n          >\n            {value}\n          </span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 126,
        "column": 10,
        "message": "Stock status using only color to indicate low/adequate stock levels",
        "description": "Stock status using only color to indicate low/adequate stock levels This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible stock level information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <span\n            className={`font-medium ${\n              value < 10 ? \"text-red-400\" : \"text-green-400\"\n            }`}\n            aria-label={value < 10 ? `Low stock: ${value} units` : `In stock: ${value} units`}\n          >\n            {value} units\n          </span>",
          "description": "Add aria-label to provide accessible stock level information",
          "content": "          <span\n            className={`font-medium ${\n              value < 10 ? \"text-red-400\" : \"text-green-400\"\n            }`}\n            aria-label={value < 10 ? `Low stock: ${value} units` : `In stock: ${value} units`}\n          >\n            {value} units\n          </span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 157,
        "column": 1,
        "message": "Large dataset generation happens on every module load instead of being memoized",
        "description": "Large dataset generation happens on every module load instead of being memoized This implementation could impact application performance.",
        "suggestion": "Move large dataset generation inside the story or memoize it to avoid unnecessary computation",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 33,
        "column": 1,
        "message": "Inconsistent array type declaration style",
        "description": "Inconsistent array type declaration style This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent array type declaration style (either T[] or Array<T> throughout)",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const users: User[] = [",
          "description": "Use consistent array type declaration style (either T[] or Array<T> throughout)",
          "content": "const users: User[] = ["
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-table/glass-table.stories.tsx",
        "line": 63,
        "column": 1,
        "message": "Inconsistent array type declaration style",
        "description": "Inconsistent array type declaration style This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent array type declaration style (either T[] or Array<T> throughout)",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const products: Product[] = [",
          "description": "Use consistent array type declaration style (either T[] or Array<T> throughout)",
          "content": "const products: Product[] = ["
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/index.ts",
        "line": 3,
        "column": 3,
        "message": "Inconsistent comment formatting - missing space after comment marker",
        "description": "Inconsistent comment formatting - missing space after comment marker This violates code style conventions and may reduce readability.",
        "suggestion": "Add space after // for consistent comment formatting",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": " // Re-export everything for compatibility",
          "description": "Add space after // for consistent comment formatting",
          "content": " // Re-export everything for compatibility"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx",
        "line": 12,
        "column": 11,
        "message": "Component doesn't respect controlled/uncontrolled pattern. When 'checked' prop is provided, component should be controlled, but internal state overrides it",
        "description": "Component doesn't respect controlled/uncontrolled pattern. When 'checked' prop is provided, component should be controlled, but internal state overrides it This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Implement proper controlled/uncontrolled pattern by checking if 'checked' prop is provided",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const GlassSwitch = forwardRef<HTMLInputElement, GlassSwitchProps>(\n  ({ className, label, id, checked, onChange, ...props }, ref) => {\n    const isControlled = checked !== undefined;\n    const [internalChecked, setInternalChecked] = useState(checked || false);\n    const isChecked = isControlled ? checked : internalChecked;\n    const switchId = id || `switch-${Math.random().toString(36).slice(2, 11)}`;\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newChecked = e.target.checked;\n      if (!isControlled) {\n        setInternalChecked(newChecked);\n      }\n      onChange?.(newChecked);\n    };",
          "description": "Implement proper controlled/uncontrolled pattern by checking if 'checked' prop is provided",
          "content": "const GlassSwitch = forwardRef<HTMLInputElement, GlassSwitchProps>(\n  ({ className, label, id, checked, onChange, ...props }, ref) => {\n    const isControlled = checked !== undefined;\n    const [internalChecked, setInternalChecked] = useState(checked || false);\n    const isChecked = isControlled ? checked : internalChecked;\n    const switchId = id || `switch-${Math.random().toString(36).slice(2, 11)}`;\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newChecked = e.target.checked;\n      if (!isControlled) {\n        setInternalChecked(newChecked);\n      }\n      onChange?.(newChecked);\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx",
        "line": 13,
        "column": 20,
        "message": "ID generation using Math.random() will cause new ID on every render, potentially causing DOM reconciliation issues",
        "description": "ID generation using Math.random() will cause new ID on every render, potentially causing DOM reconciliation issues This implementation could impact application performance.",
        "suggestion": "Use useId hook or useMemo to generate stable ID",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { forwardRef, useState, useMemo } from \"react\";",
          "description": "Use useId hook or useMemo to generate stable ID",
          "content": "import { forwardRef, useState, useMemo } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx",
        "line": 13,
        "column": 5,
        "message": "ID should be memoized to prevent regeneration on every render",
        "description": "ID should be memoized to prevent regeneration on every render This implementation could impact application performance.",
        "suggestion": "Wrap ID generation in useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const switchId = useMemo(() => id || `switch-${Math.random().toString(36).slice(2, 11)}`, [id]);",
          "description": "Wrap ID generation in useMemo",
          "content": "    const switchId = useMemo(() => id || `switch-${Math.random().toString(36).slice(2, 11)}`, [id]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx",
        "line": 25,
        "column": 11,
        "message": "Switch component should use role='switch' and aria-checked for better accessibility",
        "description": "Switch component should use role='switch' and aria-checked for better accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add role='switch' and aria-checked attributes to the input element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <input\n            type=\"checkbox\"\n            id={switchId}\n            className=\"sr-only\"\n            role=\"switch\"\n            aria-checked={isChecked}\n            checked={isChecked}\n            onChange={handleChange}\n            ref={ref}\n            {...props}\n          />",
          "description": "Add role='switch' and aria-checked attributes to the input element",
          "content": "          <input\n            type=\"checkbox\"\n            id={switchId}\n            className=\"sr-only\"\n            role=\"switch\"\n            aria-checked={isChecked}\n            checked={isChecked}\n            onChange={handleChange}\n            ref={ref}\n            {...props}\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.tsx",
        "line": 19,
        "column": 7,
        "message": "Missing aria-describedby or aria-labelledby for better screen reader support when label is present",
        "description": "Missing aria-describedby or aria-labelledby for better screen reader support when label is present This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-labelledby when label is present",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 95,
        "column": 5,
        "message": "Missing accessible name for switch without label",
        "description": "Missing accessible name for switch without label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby to provide accessible name for switches without visible labels",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const WithoutLabel: Story = {\n  args: {\n    \"aria-label\": \"Toggle switch\",\n    // No label prop\n  },\n};",
          "description": "Add aria-label or aria-labelledby to provide accessible name for switches without visible labels",
          "content": "export const WithoutLabel: Story = {\n  args: {\n    \"aria-label\": \"Toggle switch\",\n    // No label prop\n  },\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 168,
        "column": 13,
        "message": "Missing accessible name for switches without labels in interactive demo",
        "description": "Missing accessible name for switches without labels in interactive demo This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch checked={isDarkMode} onChange={setIsDarkMode} aria-label=\"Toggle dark mode\" />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch checked={isDarkMode} onChange={setIsDarkMode} aria-label=\"Toggle dark mode\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 180,
        "column": 13,
        "message": "Missing accessible name for switches without labels in interactive demo",
        "description": "Missing accessible name for switches without labels in interactive demo This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch\n              checked={isNotificationsOn}\n              onChange={setIsNotificationsOn}\n              aria-label=\"Toggle notifications\"\n            />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch\n              checked={isNotificationsOn}\n              onChange={setIsNotificationsOn}\n              aria-label=\"Toggle notifications\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 192,
        "column": 13,
        "message": "Missing accessible name for switches without labels in interactive demo",
        "description": "Missing accessible name for switches without labels in interactive demo This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch checked={isWifiOn} onChange={setIsWifiOn} aria-label=\"Toggle Wi-Fi\" />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch checked={isWifiOn} onChange={setIsWifiOn} aria-label=\"Toggle Wi-Fi\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 302,
        "column": 13,
        "message": "Missing accessible name for switches without labels in status indicators",
        "description": "Missing accessible name for switches without labels in status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch\n              checked={status.visibility}\n              onChange={(checked) =>\n                setStatus({ ...status, visibility: checked })\n              }\n              aria-label=\"Toggle profile visibility\"\n            />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch\n              checked={status.visibility}\n              onChange={(checked) =>\n                setStatus({ ...status, visibility: checked })\n              }\n              aria-label=\"Toggle profile visibility\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 325,
        "column": 13,
        "message": "Missing accessible name for switches without labels in status indicators",
        "description": "Missing accessible name for switches without labels in status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch\n              checked={status.sound}\n              onChange={(checked) => setStatus({ ...status, sound: checked })}\n              aria-label=\"Toggle sound effects\"\n            />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch\n              checked={status.sound}\n              onChange={(checked) => setStatus({ ...status, sound: checked })}\n              aria-label=\"Toggle sound effects\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 347,
        "column": 13,
        "message": "Missing accessible name for switches without labels in status indicators",
        "description": "Missing accessible name for switches without labels in status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to provide accessible name",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassSwitch\n              checked={status.security}\n              onChange={(checked) =>\n                setStatus({ ...status, security: checked })\n              }\n              aria-label=\"Toggle security mode\"\n            />",
          "description": "Add aria-label to provide accessible name",
          "content": "            <GlassSwitch\n              checked={status.security}\n              onChange={(checked) =>\n                setStatus({ ...status, security: checked })\n              }\n              aria-label=\"Toggle security mode\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 304,
        "column": 23,
        "message": "Potential unnecessary re-renders due to inline object creation in setState",
        "description": "Potential unnecessary re-renders due to inline object creation in setState This implementation could impact application performance.",
        "suggestion": "Consider using useCallback to memoize the setter function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useCallback to memoize the setter function",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 326,
        "column": 23,
        "message": "Potential unnecessary re-renders due to inline object creation in setState",
        "description": "Potential unnecessary re-renders due to inline object creation in setState This implementation could impact application performance.",
        "suggestion": "Consider using useCallback to memoize the setter function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useCallback to memoize the setter function",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-switch/glass-switch.stories.tsx",
        "line": 349,
        "column": 23,
        "message": "Potential unnecessary re-renders due to inline object creation in setState",
        "description": "Potential unnecessary re-renders due to inline object creation in setState This implementation could impact application performance.",
        "suggestion": "Consider using useCallback to memoize the setter function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useCallback to memoize the setter function",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/index.ts",
        "line": 6,
        "column": 1,
        "message": "Trailing blank line should be removed",
        "description": "Trailing blank line should be removed This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing blank line at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-spinner Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-spinner\";",
          "description": "Remove the trailing blank line at the end of the file",
          "content": "/**\n * glass-spinner Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-spinner\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 23,
        "column": 1,
        "message": "SPEED_CLASSES object is redundant - all variants use the same 'animate-spin' class",
        "description": "SPEED_CLASSES object is redundant - all variants use the same 'animate-spin' class This violates code style conventions and may reduce readability.",
        "suggestion": "Remove SPEED_CLASSES object and handle speed differentiation through motion.div transition props only",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Speed is now handled only through framer-motion transition duration",
          "description": "Remove SPEED_CLASSES object and handle speed differentiation through motion.div transition props only",
          "content": "// Speed is now handled only through framer-motion transition duration"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 57,
        "column": 7,
        "message": "Missing aria-hidden attribute on decorative spinner elements",
        "description": "Missing aria-hidden attribute on decorative spinner elements This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative spinner elements and ensure proper loading announcements",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <motion.div\n        className={cn(\n          \"inline-block rounded-full border-2 border-solid\",\n          VARIANT_CLASSES[variant],\n          SIZE_CLASSES[size],\n        )}\n        animate={{ rotate: 360 }}\n        transition={{\n          duration: speed === \"slow\" ? 2 : speed === \"fast\" ? 0.5 : 1,\n          repeat: Infinity,\n          ease: \"linear\",\n        }}\n        role=\"status\"\n        aria-label={label}\n        aria-hidden={showLabel ? \"true\" : \"false\"}\n      />",
          "description": "Add aria-hidden='true' to decorative spinner elements and ensure proper loading announcements",
          "content": "      <motion.div\n        className={cn(\n          \"inline-block rounded-full border-2 border-solid\",\n          VARIANT_CLASSES[variant],\n          SIZE_CLASSES[size],\n        )}\n        animate={{ rotate: 360 }}\n        transition={{\n          duration: speed === \"slow\" ? 2 : speed === \"fast\" ? 0.5 : 1,\n          repeat: Infinity,\n          ease: \"linear\",\n        }}\n        role=\"status\"\n        aria-label={label}\n        aria-hidden={showLabel ? \"true\" : \"false\"}\n      />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 62,
        "column": 11,
        "message": "Unused SPEED_CLASSES reference in SpinnerElement",
        "description": "Unused SPEED_CLASSES reference in SpinnerElement This violates code style conventions and may reduce readability.",
        "suggestion": "Remove SPEED_CLASSES[speed] from className since all values are identical",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        className={cn(\n          \"inline-block rounded-full border-2 border-solid\",\n          VARIANT_CLASSES[variant],\n          SIZE_CLASSES[size],\n        )}",
          "description": "Remove SPEED_CLASSES[speed] from className since all values are identical",
          "content": "        className={cn(\n          \"inline-block rounded-full border-2 border-solid\",\n          VARIANT_CLASSES[variant],\n          SIZE_CLASSES[size],\n        )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 105,
        "column": 12,
        "message": "Spinner variants (PulseSpinner, DotsSpinner, etc.) lack proper ARIA attributes for screen readers",
        "description": "Spinner variants (PulseSpinner, DotsSpinner, etc.) lack proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role='status' and aria-label attributes to spinner variants",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  return (\n    <div className={cn(\"flex space-x-1\", className)} role=\"status\" aria-label=\"Loading\">\n      {[0, 1, 2].map((index) => (\n        <motion.div\n          key={`pulse-${index}`}\n          className={cn(\n            \"rounded-full bg-liquid-glass-hl/50\",\n            sizeClasses[size],\n          )}\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.5, 1, 0.5],\n          }}\n          transition={{\n            duration: 1.2,\n            repeat: Infinity,\n            delay: index * 0.2,\n            ease: \"easeInOut\",\n          }}\n          aria-hidden=\"true\"\n        />\n      ))}\n    </div>\n  );",
          "description": "Add role='status' and aria-label attributes to spinner variants",
          "content": "  return (\n    <div className={cn(\"flex space-x-1\", className)} role=\"status\" aria-label=\"Loading\">\n      {[0, 1, 2].map((index) => (\n        <motion.div\n          key={`pulse-${index}`}\n          className={cn(\n            \"rounded-full bg-liquid-glass-hl/50\",\n            sizeClasses[size],\n          )}\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.5, 1, 0.5],\n          }}\n          transition={{\n            duration: 1.2,\n            repeat: Infinity,\n            delay: index * 0.2,\n            ease: \"easeInOut\",\n          }}\n          aria-hidden=\"true\"\n        />\n      ))}\n    </div>\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 178,
        "column": 17,
        "message": "Using Number.POSITIVE_INFINITY instead of Infinity is unnecessary",
        "description": "Using Number.POSITIVE_INFINITY instead of Infinity is unnecessary This implementation could impact application performance.",
        "suggestion": "Use Infinity instead of Number.POSITIVE_INFINITY for better readability",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        repeat: Infinity,",
          "description": "Use Infinity instead of Number.POSITIVE_INFINITY for better readability",
          "content": "        repeat: Infinity,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 204,
        "column": 17,
        "message": "Using Number.POSITIVE_INFINITY instead of Infinity is unnecessary",
        "description": "Using Number.POSITIVE_INFINITY instead of Infinity is unnecessary This implementation could impact application performance.",
        "suggestion": "Use Infinity instead of Number.POSITIVE_INFINITY for better readability",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            repeat: Infinity,",
          "description": "Use Infinity instead of Number.POSITIVE_INFINITY for better readability",
          "content": "            repeat: Infinity,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.tsx",
        "line": 13,
        "column": 1,
        "message": "Inconsistent border class definitions in SIZE_CLASSES",
        "description": "Inconsistent border class definitions in SIZE_CLASSES This violates code style conventions and may reduce readability.",
        "suggestion": "Make border width consistent with size or extract border classes separately",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 407,
        "column": 7,
        "message": "Inline styles in JSX should be extracted to avoid recalculation on every render",
        "description": "Inline styles in JSX should be extracted to avoid recalculation on every render This implementation could impact application performance.",
        "suggestion": "Extract CSS styles to a separate stylesheet or use CSS-in-JS with memoization",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 143,
        "column": 9,
        "message": "Button elements should have accessible names when they contain only visual content",
        "description": "Button elements should have accessible names when they contain only visual content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby to describe the button's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          onClick={() => {\n            setLoading(true);\n            setTimeout(() => setLoading(false), 3000);\n          }}\n          className=\"rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n          aria-label=\"Show centered loading overlay for 3 seconds\"\n        >",
          "description": "Add aria-label or aria-describedby to describe the button's purpose",
          "content": "        <button\n          type=\"button\"\n          onClick={() => {\n            setLoading(true);\n            setTimeout(() => setLoading(false), 3000);\n          }}\n          className=\"rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n          aria-label=\"Show centered loading overlay for 3 seconds\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 380,
        "column": 9,
        "message": "Button elements should have accessible names when they contain only visual content",
        "description": "Button elements should have accessible names when they contain only visual content This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the button's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          onClick={() => {\n            setLoading(true);\n            setTimeout(() => setLoading(false), 3000);\n          }}\n          className=\"mt-4 rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n          aria-label=\"Refresh user data\"\n        >",
          "description": "Add aria-label to describe the button's purpose",
          "content": "        <button\n          type=\"button\"\n          onClick={() => {\n            setLoading(true);\n            setTimeout(() => setLoading(false), 3000);\n          }}\n          className=\"mt-4 rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600\"\n          aria-label=\"Refresh user data\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 200,
        "column": 12,
        "message": "Multiple setTimeout calls without proper cleanup in event handlers could lead to memory leaks",
        "description": "Multiple setTimeout calls without proper cleanup in event handlers could lead to memory leaks This implementation could impact application performance.",
        "suggestion": "Store timeout IDs and clear them in useEffect cleanup or component unmount",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 238,
        "column": 12,
        "message": "Multiple setTimeout calls without proper cleanup in event handlers could lead to memory leaks",
        "description": "Multiple setTimeout calls without proper cleanup in event handlers could lead to memory leaks This implementation could impact application performance.",
        "suggestion": "Store timeout IDs and clear them in useEffect cleanup or component unmount",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 316,
        "column": 13,
        "message": "Table should have a caption or accessible description",
        "description": "Table should have a caption or accessible description This code works but could be improved for better maintainability.",
        "suggestion": "Add a caption element or aria-label to describe the table content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <table className=\"w-full\" aria-label=\"User data table\">\n              <caption className=\"sr-only\">List of users with their names, emails, and status</caption>",
          "description": "Add a caption element or aria-label to describe the table content",
          "content": "            <table className=\"w-full\" aria-label=\"User data table\">\n              <caption className=\"sr-only\">List of users with their names, emails, and status</caption>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-spinner/glass-spinner.stories.tsx",
        "line": 145,
        "column": 35,
        "message": "Hardcoded timeout values should be extracted as constants for maintainability",
        "description": "Hardcoded timeout values should be extracted as constants for maintainability This violates code style conventions and may reduce readability.",
        "suggestion": "Define timeout constants at the top of the file or in a configuration object",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Add at the top of the file\nconst LOADING_TIMEOUT = 3000;\n\n// Then use in the setTimeout call\nsetTimeout(() => setLoading(false), LOADING_TIMEOUT);",
          "description": "Define timeout constants at the top of the file or in a configuration object",
          "content": "// Add at the top of the file\nconst LOADING_TIMEOUT = 3000;\n\n// Then use in the setTimeout call\nsetTimeout(() => setLoading(false), LOADING_TIMEOUT);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - wildcard export already includes named export",
        "description": "Redundant export statement - wildcard export already includes named export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the named export since the wildcard export on line 7 already exports everything from the module",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-slider Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-slider\";",
          "description": "Remove the named export since the wildcard export on line 7 already exports everything from the module",
          "content": "/**\n * glass-slider Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-slider\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx",
        "line": 96,
        "column": 11,
        "message": "Slider component lacks proper ARIA attributes for accessibility",
        "description": "Slider component lacks proper ARIA attributes for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add ARIA attributes like role='slider', aria-valuemin, aria-valuemax, aria-valuenow, and aria-label for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div\n            ref={sliderRef}\n            className={cn(\n              \"relative h-2 cursor-pointer rounded-full\",\n              variant === \"default\" && getGlassClass(\"default\"),\n              variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n              disabled && \"cursor-not-allowed opacity-50\",\n            )}\n            onMouseDown={handleMouseDown}\n            role=\"slider\"\n            aria-valuemin={min}\n            aria-valuemax={max}\n            aria-valuenow={currentValue}\n            aria-label=\"Glass slider\"\n            tabIndex={disabled ? -1 : 0}\n          >",
          "description": "Add ARIA attributes like role='slider', aria-valuemin, aria-valuemax, aria-valuenow, and aria-label for screen readers",
          "content": "          <div\n            ref={sliderRef}\n            className={cn(\n              \"relative h-2 cursor-pointer rounded-full\",\n              variant === \"default\" && getGlassClass(\"default\"),\n              variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n              disabled && \"cursor-not-allowed opacity-50\",\n            )}\n            onMouseDown={handleMouseDown}\n            role=\"slider\"\n            aria-valuemin={min}\n            aria-valuemax={max}\n            aria-valuenow={currentValue}\n            aria-label=\"Glass slider\"\n            tabIndex={disabled ? -1 : 0}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx",
        "line": 96,
        "column": 11,
        "message": "Slider is not keyboard accessible - missing keyboard event handlers",
        "description": "Slider is not keyboard accessible - missing keyboard event handlers This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler to support arrow keys for keyboard navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "      const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent) => {\n          if (disabled) return;\n          \n          let newValue = currentValue;\n          switch (e.key) {\n            case 'ArrowRight':\n            case 'ArrowUp':\n              newValue = Math.min(max, currentValue + step);\n              break;\n            case 'ArrowLeft':\n            case 'ArrowDown':\n              newValue = Math.max(min, currentValue - step);\n              break;\n            case 'Home':\n              newValue = min;\n              break;\n            case 'End':\n              newValue = max;\n              break;\n            default:\n              return;\n          }\n          \n          e.preventDefault();\n          setCurrentValue(newValue);\n          onChange?.(newValue);\n        },\n        [currentValue, disabled, max, min, step, onChange]\n      );",
          "description": "Add onKeyDown handler to support arrow keys for keyboard navigation",
          "content": "      const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent) => {\n          if (disabled) return;\n          \n          let newValue = currentValue;\n          switch (e.key) {\n            case 'ArrowRight':\n            case 'ArrowUp':\n              newValue = Math.min(max, currentValue + step);\n              break;\n            case 'ArrowLeft':\n            case 'ArrowDown':\n              newValue = Math.max(min, currentValue - step);\n              break;\n            case 'Home':\n              newValue = min;\n              break;\n            case 'End':\n              newValue = max;\n              break;\n            default:\n              return;\n          }\n          \n          e.preventDefault();\n          setCurrentValue(newValue);\n          onChange?.(newValue);\n        },\n        [currentValue, disabled, max, min, step, onChange]\n      );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx",
        "line": 75,
        "column": 7,
        "message": "Potential performance issue: event listeners are added/removed on every render when isDragging changes",
        "description": "Potential performance issue: event listeners are added/removed on every render when isDragging changes This implementation could impact application performance.",
        "suggestion": "Consider using a ref to track dragging state or optimize the useEffect dependencies",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx",
        "line": 42,
        "column": 27,
        "message": "Potential precision issues with floating point arithmetic in step calculations",
        "description": "Potential precision issues with floating point arithmetic in step calculations This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use Number.parseFloat and toFixed to handle floating point precision issues",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          const steppedValue = Number.parseFloat((Math.round(newValue / step) * step).toFixed(10));",
          "description": "Use Number.parseFloat and toFixed to handle floating point precision issues",
          "content": "          const steppedValue = Number.parseFloat((Math.round(newValue / step) * step).toFixed(10));"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.tsx",
        "line": 33,
        "column": 7,
        "message": "Unused ref 'thumbRef' is declared but never used meaningfully",
        "description": "Unused ref 'thumbRef' is declared but never used meaningfully This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the unused ref or use it for focus management",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "remove",
          "oldCode": "",
          "newCode": "      const thumbRef = useRef<HTMLDivElement>(null);",
          "description": "Remove the unused ref or use it for focus management",
          "content": "      const thumbRef = useRef<HTMLDivElement>(null);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 206,
        "column": 15,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 226,
        "column": 15,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 246,
        "column": 15,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "              <label className=\"flex items-center gap-2 font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 313,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 328,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 343,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 410,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 425,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 440,
        "column": 13,
        "message": "Label element references a non-existent ID attribute",
        "description": "Label element references a non-existent ID attribute This code works but could be improved for better maintainability.",
        "suggestion": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove the htmlFor attribute or ensure the GlassSlider component has a matching ID prop",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 317,
        "column": 15,
        "message": "Inline event handler in render function may cause unnecessary re-renders",
        "description": "Inline event handler in render function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-performance-10",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 333,
        "column": 15,
        "message": "Inline event handler in render function may cause unnecessary re-renders",
        "description": "Inline event handler in render function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx-performance-11",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-slider/glass-slider.stories.tsx",
        "line": 348,
        "column": 15,
        "message": "Inline event handler in render function may cause unnecessary re-renders",
        "description": "Inline event handler in render function may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Extract the onChange handler to useCallback to prevent unnecessary re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/index.ts",
        "line": 6,
        "column": 1,
        "message": "Redundant re-export using wildcard after explicit export",
        "description": "Redundant re-export using wildcard after explicit export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the wildcard re-export since GlassSkipNavigation is already explicitly exported",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-skip-navigation Component Export\n */\nexport { GlassSkipNavigation } from \"./glass-skip-navigation\";",
          "description": "Remove the wildcard re-export since GlassSkipNavigation is already explicitly exported",
          "content": "/**\n * glass-skip-navigation Component Export\n */\nexport { GlassSkipNavigation } from \"./glass-skip-navigation\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 53,
        "column": 3,
        "message": "Type mismatch: linkReferences.current is declared as HTMLAnchorElement | Array<null> but should be Array<HTMLAnchorElement | null>",
        "description": "Type mismatch: linkReferences.current is declared as HTMLAnchorElement | Array<null> but should be Array<HTMLAnchorElement | null> This will likely cause errors during execution.",
        "suggestion": "Change the type to Array<HTMLAnchorElement | null> to properly represent an array of anchor elements",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const linkReferences = useRef<Array<HTMLAnchorElement | null>>([]);",
          "description": "Change the type to Array<HTMLAnchorElement | null> to properly represent an array of anchor elements",
          "content": "  const linkReferences = useRef<Array<HTMLAnchorElement | null>>([]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 177,
        "column": 9,
        "message": "accessibilityManager.announce is called with 2 arguments but the mock function only accepts 1",
        "description": "accessibilityManager.announce is called with 2 arguments but the mock function only accepts 1 This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Update the mock accessibilityManager to handle the second parameter or remove it from the call",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const accessibilityManager = {\n  announce: (message: string, _priority?: string) => console.debug(`Announced: ${message}`),\n};",
          "description": "Update the mock accessibilityManager to handle the second parameter or remove it from the call",
          "content": "const accessibilityManager = {\n  announce: (message: string, _priority?: string) => console.debug(`Announced: ${message}`),\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-bug-2",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 322,
        "column": 7,
        "message": "Same issue with accessibilityManager.announce call in _useSkipNavigation function",
        "description": "Same issue with accessibilityManager.announce call in _useSkipNavigation function This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "This will also be fixed by the accessibilityManager mock update above",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 62,
        "column": 5,
        "message": "Multiple DOM queries in useEffect may cause performance issues on large DOMs",
        "description": "Multiple DOM queries in useEffect may cause performance issues on large DOMs This implementation could impact application performance.",
        "suggestion": "Consider debouncing the generateSkipLinks function or limiting the scope of DOM queries",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 280,
        "column": 11,
        "message": "Focus management issue: only first link has tabIndex={0}, but arrow key navigation doesn't properly update tabIndex",
        "description": "Focus management issue: only first link has tabIndex={0}, but arrow key navigation doesn't properly update tabIndex This code works but could be improved for better maintainability.",
        "suggestion": "Update tabIndex for focused element and set others to -1 for proper roving tabindex pattern",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          tabIndex={focusedIndex === index || (focusedIndex === -1 && index === 0) ? 0 : -1}",
          "description": "Update tabIndex for focused element and set others to -1 for proper roving tabindex pattern",
          "content": "          tabIndex={focusedIndex === index || (focusedIndex === -1 && index === 0) ? 0 : -1}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 74,
        "column": 13,
        "message": "Missing error handling for DOM operations that could fail",
        "description": "Missing error handling for DOM operations that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Wrap DOM queries in try-catch blocks to handle potential errors",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-memory-leak-6",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 133,
        "column": 9,
        "message": "Event listener for DOMContentLoaded is not properly cleaned up",
        "description": "Event listener for DOMContentLoaded is not properly cleaned up This code works but could be improved for better maintainability.",
        "suggestion": "Store reference to the event listener function and remove it in cleanup",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Wait for DOM to be ready\n    let cleanupDOMContentLoaded: (() => void) | null = null;\n    if (document.readyState === \"loading\") {\n      if (typeof document !== \"undefined\") {\n        const handleDOMContentLoaded = () => {\n          generateSkipLinks();\n          document.removeEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        };\n        document.addEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        cleanupDOMContentLoaded = () => {\n          document.removeEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        };\n      }\n    } else {\n      generateSkipLinks();\n    }",
          "description": "Store reference to the event listener function and remove it in cleanup",
          "content": "    // Wait for DOM to be ready\n    let cleanupDOMContentLoaded: (() => void) | null = null;\n    if (document.readyState === \"loading\") {\n      if (typeof document !== \"undefined\") {\n        const handleDOMContentLoaded = () => {\n          generateSkipLinks();\n          document.removeEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        };\n        document.addEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        cleanupDOMContentLoaded = () => {\n          document.removeEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n        };\n      }\n    } else {\n      generateSkipLinks();\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 290,
        "column": 10,
        "message": "Unused function _useSkipNavigation (prefixed with underscore but still exported in scope)",
        "description": "Unused function _useSkipNavigation (prefixed with underscore but still exported in scope) This violates code style conventions and may reduce readability.",
        "suggestion": "Either export this function properly or remove it if not needed",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx-security-8",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.tsx",
        "line": 82,
        "column": 13,
        "message": "Direct DOM manipulation without sanitization when setting element IDs",
        "description": "Direct DOM manipulation without sanitization when setting element IDs This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Validate and sanitize generated IDs to prevent potential XSS",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 30,
        "column": 21,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 37,
        "column": 21,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 44,
        "column": 21,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 51,
        "column": 21,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 359,
        "column": 15,
        "message": "Input element missing proper labeling for screen readers",
        "description": "Input element missing proper labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a label element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <input\n                type=\"search\"\n                placeholder=\"Search...\"\n                aria-label=\"Search\"\n                className=\"rounded-md border border-gray-300 px-3 py-1 text-sm dark:border-gray-600\"\n              />",
          "description": "Add aria-label or associate with a label element",
          "content": "              <input\n                type=\"search\"\n                placeholder=\"Search...\"\n                aria-label=\"Search\"\n                className=\"rounded-md border border-gray-300 px-3 py-1 text-sm dark:border-gray-600\"\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 310,
        "column": 19,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 316,
        "column": 19,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 322,
        "column": 19,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 328,
        "column": 19,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 407,
        "column": 13,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-10",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 410,
        "column": 13,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-accessibility-11",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 413,
        "column": 13,
        "message": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users",
        "description": "Links with href='#placeholder' create non-functional navigation for keyboard and screen reader users This code works but could be improved for better maintainability.",
        "suggestion": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "href=\"#\"",
          "description": "Use href='#' with role='button' and proper event handlers, or provide actual target IDs",
          "content": "href=\"#\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx-style-12",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skip-navigation/glass-skip-navigation.stories.tsx",
        "line": 449,
        "column": 11,
        "message": "Inline styles should be avoided in favor of CSS classes for maintainability",
        "description": "Inline styles should be avoided in favor of CSS classes for maintainability This violates code style conventions and may reduce readability.",
        "suggestion": "Move inline styles to CSS classes or styled components",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/index.ts",
        "line": 6,
        "column": 1,
        "message": "Trailing newline at end of file should be removed for consistency",
        "description": "Trailing newline at end of file should be removed for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-skeleton Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-skeleton\";",
          "description": "Remove the trailing empty line at the end of the file",
          "content": "/**\n * glass-skeleton Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-skeleton\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 85,
        "column": 9,
        "message": "Skeleton components should include proper ARIA attributes for screen readers",
        "description": "Skeleton components should include proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label and role attributes to skeleton elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <motion.div\n          ref={itemRef}\n          className={cn(skeletonVariants({ variant, size, shape }), className)}\n          style={skeletonStyle}\n          role=\"progressbar\"\n          aria-label=\"Loading content\"\n          aria-busy=\"true\"\n          initial={animated ? { opacity: 0.4 } : false}\n          animate={\n            animated\n              ? variant === \"pulse\"\n                ? pulseAnimation\n                : { opacity: [0.4, 0.8, 0.4] }\n              : false\n          }\n          transition={\n            animated\n              ? {\n                  duration: 1.5,\n                  repeat: Number.POSITIVE_INFINITY,\n                  ease: \"easeInOut\",\n                  delay: index * 0.1,\n                }\n              : undefined\n          }\n        >",
          "description": "Add aria-label and role attributes to skeleton elements for better accessibility",
          "content": "        <motion.div\n          ref={itemRef}\n          className={cn(skeletonVariants({ variant, size, shape }), className)}\n          style={skeletonStyle}\n          role=\"progressbar\"\n          aria-label=\"Loading content\"\n          aria-busy=\"true\"\n          initial={animated ? { opacity: 0.4 } : false}\n          animate={\n            animated\n              ? variant === \"pulse\"\n                ? pulseAnimation\n                : { opacity: [0.4, 0.8, 0.4] }\n              : false\n          }\n          transition={\n            animated\n              ? {\n                  duration: 1.5,\n                  repeat: Number.POSITIVE_INFINITY,\n                  ease: \"easeInOut\",\n                  delay: index * 0.1,\n                }\n              : undefined\n          }\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 96,
        "column": 26,
        "message": "Using Number.POSITIVE_INFINITY for repeat animation could cause memory issues",
        "description": "Using Number.POSITIVE_INFINITY for repeat animation could cause memory issues This implementation could impact application performance.",
        "suggestion": "Use a large finite number instead of POSITIVE_INFINITY for better performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  repeat: 9999,",
          "description": "Use a large finite number instead of POSITIVE_INFINITY for better performance",
          "content": "                  repeat: 9999,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 113,
        "column": 24,
        "message": "Using Number.POSITIVE_INFINITY for repeat animation could cause memory issues",
        "description": "Using Number.POSITIVE_INFINITY for repeat animation could cause memory issues This implementation could impact application performance.",
        "suggestion": "Use a large finite number instead of POSITIVE_INFINITY for better performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                repeat: 9999,",
          "description": "Use a large finite number instead of POSITIVE_INFINITY for better performance",
          "content": "                repeat: 9999,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 121,
        "column": 47,
        "message": "Inconsistent CSS property usage with Tailwind classes",
        "description": "Inconsistent CSS property usage with Tailwind classes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent spacing approach - either all Tailwind classes or all inline styles",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-naming-4",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 121,
        "column": 35,
        "message": "CSS class names use inconsistent naming convention",
        "description": "CSS class names use inconsistent naming convention This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent naming convention for CSS classes (kebab-case vs camelCase)",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 181,
        "column": 10,
        "message": "Missing ARIA attributes for table skeleton structure",
        "description": "Missing ARIA attributes for table skeleton structure This code works but could be improved for better maintainability.",
        "suggestion": "Add role='table', aria-label, and aria-busy attributes to table skeleton",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <div className={cn(\"space-y-3\", className)} role=\"table\" aria-label=\"Loading table data\" aria-busy=\"true\">",
          "description": "Add role='table', aria-label, and aria-busy attributes to table skeleton",
          "content": "  <div className={cn(\"space-y-3\", className)} role=\"table\" aria-label=\"Loading table data\" aria-busy=\"true\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.tsx",
        "line": 184,
        "column": 6,
        "message": "Array.from creates unnecessary intermediate arrays in nested loops",
        "description": "Array.from creates unnecessary intermediate arrays in nested loops This implementation could impact application performance.",
        "suggestion": "Consider using for loops or memoizing the arrays for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx",
        "line": 579,
        "column": 15,
        "message": "Interactive buttons missing type attribute should have explicit type='button' for accessibility",
        "description": "Interactive buttons missing type attribute should have explicit type='button' for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >",
          "description": "Add explicit type='button' attribute to button elements that don't submit forms",
          "content": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx",
        "line": 586,
        "column": 15,
        "message": "Interactive buttons missing type attribute should have explicit type='button' for accessibility",
        "description": "Interactive buttons missing type attribute should have explicit type='button' for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >",
          "description": "Add explicit type='button' attribute to button elements that don't submit forms",
          "content": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-skeleton/glass-skeleton.stories.tsx",
        "line": 593,
        "column": 15,
        "message": "Interactive buttons missing type attribute should have explicit type='button' for accessibility",
        "description": "Interactive buttons missing type attribute should have explicit type='button' for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >",
          "description": "Add explicit type='button' attribute to button elements that don't submit forms",
          "content": "              <button\n                type=\"button\"\n                className=\"flex items-center gap-2 text-sm text-white/60 hover:text-white/80\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 158,
        "column": 13,
        "message": "Missing aria-labelledby or aria-label for combobox role element",
        "description": "Missing aria-labelledby or aria-label for combobox role element This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-labelledby pointing to a label element or ensure aria-label is always provided",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 268,
        "column": 25,
        "message": "Listbox options should have unique IDs and proper aria-posinset/aria-setsize attributes",
        "description": "Listbox options should have unique IDs and proper aria-posinset/aria-setsize attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-posinset and aria-setsize attributes to each option for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      <button\n                        key={option.value}\n                        type=\"button\"\n                        onClick={() =>\n                          !option.disabled && handleSelect(option.value)\n                        }\n                        disabled={option.disabled}\n                        className={cn(\n                          \"w-full px-4 py-3 text-left transition-all duration-200\",\n                          \"motion-safe:hover:bg-liquid-glass-bg/20 liquid-glass-interactive:focus-visible\",\n                          \"flex items-center justify-between text-liquid-primary\",\n                          option.disabled && \"cursor-not-allowed opacity-50\",\n                          isSelected && \"bg-text-liquid-accent/10 text-text-liquid-accent\",\n                          isFocused && \"bg-liquid-glass-bg/20\",\n                          \"first:rounded-t-lg last:rounded-b-lg\",\n                        )}\n                        role=\"option\"\n                        aria-selected={isSelected}\n                        aria-posinset={index + 1}\n                        aria-setsize={filteredOptions.length}\n                        id={`liquid-glass-select-option-${option.value}`}\n                      >",
          "description": "Add aria-posinset and aria-setsize attributes to each option for better screen reader support",
          "content": "                      <button\n                        key={option.value}\n                        type=\"button\"\n                        onClick={() =>\n                          !option.disabled && handleSelect(option.value)\n                        }\n                        disabled={option.disabled}\n                        className={cn(\n                          \"w-full px-4 py-3 text-left transition-all duration-200\",\n                          \"motion-safe:hover:bg-liquid-glass-bg/20 liquid-glass-interactive:focus-visible\",\n                          \"flex items-center justify-between text-liquid-primary\",\n                          option.disabled && \"cursor-not-allowed opacity-50\",\n                          isSelected && \"bg-text-liquid-accent/10 text-text-liquid-accent\",\n                          isFocused && \"bg-liquid-glass-bg/20\",\n                          \"first:rounded-t-lg last:rounded-b-lg\",\n                        )}\n                        role=\"option\"\n                        aria-selected={isSelected}\n                        aria-posinset={index + 1}\n                        aria-setsize={filteredOptions.length}\n                        id={`liquid-glass-select-option-${option.value}`}\n                      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 158,
        "column": 13,
        "message": "Active descendant management missing for keyboard navigation",
        "description": "Active descendant management missing for keyboard navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-activedescendant attribute to combobox that points to the currently focused option",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-label={ariaLabel}\n            aria-describedby={ariaDescribedBy}\n            aria-expanded={isOpen}\n            aria-haspopup=\"listbox\"\n            aria-activedescendant={focusedIndex >= 0 ? `liquid-glass-select-option-${filteredOptions[focusedIndex]?.value}` : undefined}\n            role=\"combobox\"",
          "description": "Add aria-activedescendant attribute to combobox that points to the currently focused option",
          "content": "            aria-label={ariaLabel}\n            aria-describedby={ariaDescribedBy}\n            aria-expanded={isOpen}\n            aria-haspopup=\"listbox\"\n            aria-activedescendant={focusedIndex >= 0 ? `liquid-glass-select-option-${filteredOptions[focusedIndex]?.value}` : undefined}\n            role=\"combobox\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 64,
        "column": 7,
        "message": "Potential memory leak: event listeners not properly cleaned up when component unmounts with focusedIndex dependency",
        "description": "Potential memory leak: event listeners not properly cleaned up when component unmounts with focusedIndex dependency This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add cleanup for event listeners and ensure proper dependency management",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 114,
        "column": 7,
        "message": "Unnecessary re-computation of filteredOptions on every render",
        "description": "Unnecessary re-computation of filteredOptions on every render This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize filteredOptions computation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Filter options based on search term\n  const filteredOptions = useMemo(() => \n    options.filter((option) =>\n      option.label.toLowerCase().includes(searchTerm.toLowerCase()),\n    ), [options, searchTerm]\n  );",
          "description": "Use useMemo to memoize filteredOptions computation",
          "content": "  // Filter options based on search term\n  const filteredOptions = useMemo(() => \n    options.filter((option) =>\n      option.label.toLowerCase().includes(searchTerm.toLowerCase()),\n    ), [options, searchTerm]\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 155,
        "column": 7,
        "message": "Unnecessary re-computation of selectedOptions on every render",
        "description": "Unnecessary re-computation of selectedOptions on every render This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize selectedOptions computation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Get selected options for display\n  const selectedOptions = useMemo(() => \n    options.filter((opt) => selectedValues.includes(opt.value)),\n    [options, selectedValues]\n  );",
          "description": "Use useMemo to memoize selectedOptions computation",
          "content": "  // Get selected options for display\n  const selectedOptions = useMemo(() => \n    options.filter((opt) => selectedValues.includes(opt.value)),\n    [options, selectedValues]\n  );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.tsx",
        "line": 78,
        "column": 15,
        "message": "Keyboard navigation index can become out of sync with filtered options",
        "description": "Keyboard navigation index can become out of sync with filtered options This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Reset focusedIndex when filteredOptions change or use filteredOptions.length instead of options.length",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 164,
        "column": 15,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 176,
        "column": 15,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 188,
        "column": 15,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "              <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 243,
        "column": 13,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 255,
        "column": 13,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 269,
        "column": 13,
        "message": "Label elements have htmlFor attributes that don't match any actual input IDs",
        "description": "Label elements have htmlFor attributes that don't match any actual input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">",
          "description": "Remove htmlFor attributes from labels since they don't correspond to actual form inputs, or add proper input elements with matching IDs",
          "content": "            <label className=\"mb-2 block font-medium text-gray-700 text-sm dark:text-gray-300\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 279,
        "column": 11,
        "message": "Hardcoded inline styles or class strings should be extracted to constants or use CSS modules for better maintainability",
        "description": "Hardcoded inline styles or class strings should be extracted to constants or use CSS modules for better maintainability This violates code style conventions and may reduce readability.",
        "suggestion": "Consider extracting repeated className strings to constants or using a styling system",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx-performance-7",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-select/glass-select.stories.tsx",
        "line": 107,
        "column": 31,
        "message": "Creating new arrays and objects inside render functions can cause unnecessary re-renders",
        "description": "Creating new arrays and objects inside render functions can cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move static data outside the component or use useMemo for dynamic data that doesn't change frequently",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Move static data outside the component or use useMemo for dynamic data that doesn't change frequently",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/index.ts",
        "line": 6,
        "column": 1,
        "message": "Trailing newline should be removed for consistency",
        "description": "Trailing newline should be removed for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-search Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-search\";",
          "description": "Remove the trailing empty line at the end of the file",
          "content": "/**\n * glass-search Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-search\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 149,
        "column": 9,
        "message": "Search input missing aria-expanded attribute for dropdown state",
        "description": "Search input missing aria-expanded attribute for dropdown state This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-expanded, aria-haspopup, and aria-controls attributes to indicate dropdown state",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={(e) => {\n            setQuery(e.target.value);\n            setIsOpen(true);\n            setSelectedIndex(-1);\n          }}\n          onFocus={() => setIsOpen(true)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              handleSearch();\n            }\n          }}\n          placeholder={placeholder}\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-controls=\"search-dropdown\"\n          aria-activedescendant={selectedIndex >= 0 ? `search-option-${selectedIndex}` : undefined}\n          role=\"combobox\"\n          className={cn(\n            \"w-full rounded-xl border py-3 pr-10 pl-10\",\n            getGlassClass(\"default\"),\n            focusRing,\n            \"text-[var(--text-primary)] placeholder:text-[var(--text-secondary)]\",\n            \"border-[var(--liquid-glass-border)] focus:border-[var(--liquid-glass-border-focus)]\",\n            microInteraction.gentle,\n          )}\n        />",
          "description": "Add aria-expanded, aria-haspopup, and aria-controls attributes to indicate dropdown state",
          "content": "        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={(e) => {\n            setQuery(e.target.value);\n            setIsOpen(true);\n            setSelectedIndex(-1);\n          }}\n          onFocus={() => setIsOpen(true)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              handleSearch();\n            }\n          }}\n          placeholder={placeholder}\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-controls=\"search-dropdown\"\n          aria-activedescendant={selectedIndex >= 0 ? `search-option-${selectedIndex}` : undefined}\n          role=\"combobox\"\n          className={cn(\n            \"w-full rounded-xl border py-3 pr-10 pl-10\",\n            getGlassClass(\"default\"),\n            focusRing,\n            \"text-[var(--text-primary)] placeholder:text-[var(--text-secondary)]\",\n            \"border-[var(--liquid-glass-border)] focus:border-[var(--liquid-glass-border-focus)]\",\n            microInteraction.gentle,\n          )}\n        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 182,
        "column": 9,
        "message": "Dropdown missing proper ARIA attributes and role",
        "description": "Dropdown missing proper ARIA attributes and role This code works but could be improved for better maintainability.",
        "suggestion": "Add role='listbox', id, and proper ARIA attributes to dropdown",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div\n          id=\"search-dropdown\"\n          role=\"listbox\"\n          className={cn(\n            \"absolute top-full right-0 left-0 z-50 mt-2 rounded-xl border\",\n            getGlassClass(\"elevated\"),\n            \"max-h-80 overflow-y-auto border-[var(--liquid-glass-border)]\",\n          )}\n        >",
          "description": "Add role='listbox', id, and proper ARIA attributes to dropdown",
          "content": "        <div\n          id=\"search-dropdown\"\n          role=\"listbox\"\n          className={cn(\n            \"absolute top-full right-0 left-0 z-50 mt-2 rounded-xl border\",\n            getGlassClass(\"elevated\"),\n            \"max-h-80 overflow-y-auto border-[var(--liquid-glass-border)]\",\n          )}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 234,
        "column": 17,
        "message": "Search result buttons missing role='option' and proper id for aria-activedescendant",
        "description": "Search result buttons missing role='option' and proper id for aria-activedescendant This code works but could be improved for better maintainability.",
        "suggestion": "Add role='option' and unique id to each search result button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <button\n                  type=\"button\"\n                  key={result.id}\n                  id={`search-option-${index}`}\n                  role=\"option\"\n                  aria-selected={selectedIndex === index}\n                  onClick={() => handleSelect(result)}\n                  className={cn(\n                    \"flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left\",\n                    \"text-[var(--text-primary)] hover:bg-[var(--liquid-glass-bg)]\",\n                    selectedIndex === index && \"bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                  )}\n                >",
          "description": "Add role='option' and unique id to each search result button",
          "content": "                <button\n                  type=\"button\"\n                  key={result.id}\n                  id={`search-option-${index}`}\n                  role=\"option\"\n                  aria-selected={selectedIndex === index}\n                  onClick={() => handleSelect(result)}\n                  className={cn(\n                    \"flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left\",\n                    \"text-[var(--text-primary)] hover:bg-[var(--liquid-glass-bg)]\",\n                    selectedIndex === index && \"bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                  )}\n                >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 94,
        "column": 5,
        "message": "Event listeners added to document for every component instance without cleanup dependency optimization",
        "description": "Event listeners added to document for every component instance without cleanup dependency optimization This implementation could impact application performance.",
        "suggestion": "Consider using a more targeted approach for keyboard handling or add proper cleanup dependencies",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 268,
        "column": 19,
        "message": "ArrowRight icon has group-hover class but parent element doesn't have group class",
        "description": "ArrowRight icon has group-hover class but parent element doesn't have group class This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add 'group' class to parent button element or remove 'group-hover:' from the icon class",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  className={cn(\n                    \"flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left group\",\n                    \"text-[var(--text-primary)] hover:bg-[var(--liquid-glass-bg)]\",\n                    selectedIndex === index && \"bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                  )}",
          "description": "Add 'group' class to parent button element or remove 'group-hover:' from the icon class",
          "content": "                  className={cn(\n                    \"flex w-full items-center gap-3 rounded-lg px-3 py-2 text-left group\",\n                    \"text-[var(--text-primary)] hover:bg-[var(--liquid-glass-bg)]\",\n                    selectedIndex === index && \"bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                  )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.tsx",
        "line": 167,
        "column": 11,
        "message": "Clear button missing aria-label for screen readers",
        "description": "Clear button missing aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the button's purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            onClick={() => {\n              setQuery(\"\");\n              setIsOpen(false);\n              inputRef.current?.focus();\n            }}\n            aria-label=\"Clear search\"\n            className=\"-translate-y-1/2 absolute top-1/2 right-3 rounded-lg p-1 text-[var(--text-secondary)] hover:bg-[var(--liquid-glass-bg)]\"\n          >",
          "description": "Add aria-label to describe the button's purpose",
          "content": "          <button\n            type=\"button\"\n            onClick={() => {\n              setQuery(\"\");\n              setIsOpen(false);\n              inputRef.current?.focus();\n            }}\n            aria-label=\"Clear search\"\n            className=\"-translate-y-1/2 absolute top-1/2 right-3 rounded-lg p-1 text-[var(--text-secondary)] hover:bg-[var(--liquid-glass-bg)]\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx",
        "line": 329,
        "column": 7,
        "message": "Using setTimeout to simulate async operations in Storybook stories can cause performance issues and unreliable behavior",
        "description": "Using setTimeout to simulate async operations in Storybook stories can cause performance issues and unreliable behavior This implementation could impact application performance.",
        "suggestion": "Use proper mock functions or Storybook's play function with mock service worker for more reliable async behavior",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx",
        "line": 259,
        "column": 17,
        "message": "Color-only differentiation used for conveying suggestion types without additional indicators",
        "description": "Color-only differentiation used for conveying suggestion types without additional indicators This code works but could be improved for better maintainability.",
        "suggestion": "Ensure suggestion types have additional non-color indicators like icons or text labels for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx",
        "line": 166,
        "column": 9,
        "message": "Inconsistent spacing and formatting in JSX elements",
        "description": "Inconsistent spacing and formatting in JSX elements This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent spacing for better readability",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <h3 className=\"text-sm font-medium text-white/80\">Simple Search</h3>",
          "description": "Use consistent spacing for better readability",
          "content": "        <h3 className=\"text-sm font-medium text-white/80\">Simple Search</h3>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx",
        "line": 173,
        "column": 9,
        "message": "Inconsistent className ordering throughout the file",
        "description": "Inconsistent className ordering throughout the file This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent className ordering (size, layout, spacing, colors) for better maintainability",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-search/glass-search.stories.tsx",
        "line": 537,
        "column": 9,
        "message": "Missing alt text or aria-label for decorative gradient backgrounds",
        "description": "Missing alt text or aria-label for decorative gradient backgrounds This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' for decorative backgrounds or provide appropriate labels",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div className=\"rounded-xl bg-gradient-to-r from-blue-400 via-blue-500 to-cyan-500 p-8\" aria-hidden=\"true\">",
          "description": "Add aria-hidden='true' for decorative backgrounds or provide appropriate labels",
          "content": "        <div className=\"rounded-xl bg-gradient-to-r from-blue-400 via-blue-500 to-cyan-500 p-8\" aria-hidden=\"true\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/index.ts",
        "line": 3,
        "column": 1,
        "message": "Unnecessary comment followed by another comment on the same topic",
        "description": "Unnecessary comment followed by another comment on the same topic This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant comment or merge with the main comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-responsive-card Component Export\n * Re-export everything for compatibility\n */",
          "description": "Remove redundant comment or merge with the main comment",
          "content": "/**\n * glass-responsive-card Component Export\n * Re-export everything for compatibility\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/index.ts-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/index.ts",
        "line": 4,
        "column": 1,
        "message": "Export statement may fail if the target file doesn't exist or has no exports",
        "description": "Export statement may fail if the target file doesn't exist or has no exports This will likely cause errors during execution.",
        "suggestion": "Verify that './glass-responsive-card' file exists and has exports, or add error handling",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx",
        "line": 8,
        "column": 5,
        "message": "Component removes all ARIA attributes from HTMLDivElement, potentially breaking accessibility",
        "description": "Component removes all ARIA attributes from HTMLDivElement, potentially breaking accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Consider allowing essential ARIA attributes like aria-label, aria-labelledby, aria-describedby, or create a more selective omit",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "interface GlassResponsiveCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"elevated\" | \"outlined\" | \"pressed\";\n  hover?: boolean;\n  bordered?: boolean;\n  padding?: ComponentSize | \"none\";\n  responsive?: boolean;\n  stackOnMobile?: boolean;\n}",
          "description": "Consider allowing essential ARIA attributes like aria-label, aria-labelledby, aria-describedby, or create a more selective omit",
          "content": "interface GlassResponsiveCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"elevated\" | \"outlined\" | \"pressed\";\n  hover?: boolean;\n  bordered?: boolean;\n  padding?: ComponentSize | \"none\";\n  responsive?: boolean;\n  stackOnMobile?: boolean;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx",
        "line": 36,
        "column": 5,
        "message": "Object literals created on every render causing unnecessary re-computations",
        "description": "Object literals created on every render causing unnecessary re-computations This implementation could impact application performance.",
        "suggestion": "Move static object literals outside the component or use useMemo for dynamic ones",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const VARIANT_CLASSES = {\n  default: getGlassClass(\"default\"),\n  elevated: getGlassClass(\"elevated\"),\n  outlined: \"bg-transparent border-2 border-[var(--liquid-glass-border)]\",\n  pressed: cn(getGlassClass(\"pressed\"), \"shadow-inner\"),\n};\n\nconst PADDING_CLASSES_RESPONSIVE = {\n  none: \"\",\n  xs: \"p-2 sm:p-3\",\n  sm: \"p-3 sm:p-4\",\n  md: \"p-4 sm:p-6\",\n  lg: \"p-6 sm:p-8\",\n  xl: \"p-8 sm:p-12\",\n};\n\nconst PADDING_CLASSES_STATIC = {\n  none: \"\",\n  xs: \"p-2\",\n  sm: \"p-3\",\n  md: \"p-6\",\n  lg: \"p-8\",\n  xl: \"p-12\",\n};\n\nconst GlassResponsiveCard = forwardRef<\n  HTMLDivElement,\n  GlassResponsiveCardProps\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      hover = true,\n      bordered = true,\n      padding = createComponentSize(\"md\"),\n      responsive = true,\n      stackOnMobile = false,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const paddingClasses = responsive\n      ? PADDING_CLASSES_RESPONSIVE\n      : PADDING_CLASSES_STATIC;",
          "description": "Move static object literals outside the component or use useMemo for dynamic ones",
          "content": "const VARIANT_CLASSES = {\n  default: getGlassClass(\"default\"),\n  elevated: getGlassClass(\"elevated\"),\n  outlined: \"bg-transparent border-2 border-[var(--liquid-glass-border)]\",\n  pressed: cn(getGlassClass(\"pressed\"), \"shadow-inner\"),\n};\n\nconst PADDING_CLASSES_RESPONSIVE = {\n  none: \"\",\n  xs: \"p-2 sm:p-3\",\n  sm: \"p-3 sm:p-4\",\n  md: \"p-4 sm:p-6\",\n  lg: \"p-6 sm:p-8\",\n  xl: \"p-8 sm:p-12\",\n};\n\nconst PADDING_CLASSES_STATIC = {\n  none: \"\",\n  xs: \"p-2\",\n  sm: \"p-3\",\n  md: \"p-6\",\n  lg: \"p-8\",\n  xl: \"p-12\",\n};\n\nconst GlassResponsiveCard = forwardRef<\n  HTMLDivElement,\n  GlassResponsiveCardProps\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      hover = true,\n      bordered = true,\n      padding = createComponentSize(\"md\"),\n      responsive = true,\n      stackOnMobile = false,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const paddingClasses = responsive\n      ? PADDING_CLASSES_RESPONSIVE\n      : PADDING_CLASSES_STATIC;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx",
        "line": 60,
        "column": 11,
        "message": "Type assertion 'as keyof typeof paddingClasses' may cause runtime errors if padding value doesn't match object keys",
        "description": "Type assertion 'as keyof typeof paddingClasses' may cause runtime errors if padding value doesn't match object keys This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add proper type checking or use a type guard to ensure padding value exists in paddingClasses",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      padding === \"none\"\n        ? \"\"\n        : paddingClasses[padding] || paddingClasses.md,",
          "description": "Add proper type checking or use a type guard to ensure padding value exists in paddingClasses",
          "content": "      padding === \"none\"\n        ? \"\"\n        : paddingClasses[padding] || paddingClasses.md,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.tsx",
        "line": 67,
        "column": 7,
        "message": "Interactive element with cursor-pointer should have keyboard accessibility attributes",
        "description": "Interactive element with cursor-pointer should have keyboard accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add tabIndex, role, or onKeyDown handlers for keyboard accessibility when hover is true",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx",
        "line": 26,
        "column": 7,
        "message": "Missing semantic heading structure - h3 elements are used without proper hierarchy context",
        "description": "Missing semantic heading structure - h3 elements are used without proper hierarchy context This code works but could be improved for better maintainability.",
        "suggestion": "Ensure proper heading hierarchy or use div with appropriate styling instead of h3",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx",
        "line": 70,
        "column": 11,
        "message": "Icons without accessible labels or descriptions",
        "description": "Icons without accessible labels or descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <Star className=\"h-5 w-5 text-yellow-400\" aria-label=\"Star rating icon\" />",
          "description": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
          "content": "          <Star className=\"h-5 w-5 text-yellow-400\" aria-label=\"Star rating icon\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx",
        "line": 106,
        "column": 9,
        "message": "Icons without accessible labels or descriptions",
        "description": "Icons without accessible labels or descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <Heart className=\"h-6 w-6 text-red-400\" aria-label=\"Heart icon\" />",
          "description": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
          "content": "        <Heart className=\"h-6 w-6 text-red-400\" aria-label=\"Heart icon\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx",
        "line": 116,
        "column": 9,
        "message": "Icons without accessible labels or descriptions",
        "description": "Icons without accessible labels or descriptions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <MessageCircle className=\"h-6 w-6 text-blue-400\" aria-label=\"Message icon\" />",
          "description": "Add aria-label or aria-describedby attributes to lucide-react icons for screen readers",
          "content": "        <MessageCircle className=\"h-6 w-6 text-blue-400\" aria-label=\"Message icon\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-card/glass-responsive-card.stories.tsx",
        "line": 1,
        "column": 1,
        "message": "Unused import - Heart, MessageCircle, and Star are imported but could benefit from tree-shaking optimization",
        "description": "Unused import - Heart, MessageCircle, and Star are imported but could benefit from tree-shaking optimization This violates code style conventions and may reduce readability.",
        "suggestion": "Consider dynamic imports for icons that are only used in specific stories to improve bundle size",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/index.ts",
        "line": 6,
        "column": 15,
        "message": "Missing explicit file extension in import/export path",
        "description": "Missing explicit file extension in import/export path This violates code style conventions and may reduce readability.",
        "suggestion": "Add explicit .js extension for better compatibility and clarity",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-radio-group.js\";",
          "description": "Add explicit .js extension for better compatibility and clarity",
          "content": "export * from \"./glass-radio-group.js\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/index.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/index.ts",
        "line": 6,
        "column": 1,
        "message": "Barrel export without explicit type exports may cause issues with tree-shaking and type resolution",
        "description": "Barrel export without explicit type exports may cause issues with tree-shaking and type resolution This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding explicit named exports or type-only exports for better tree-shaking and TypeScript support",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 28,
        "column": 15,
        "message": "Default variant value should be boolean false, not string 'false'",
        "description": "Default variant value should be boolean false, not string 'false' This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change disabled default variant from string 'false' to boolean false",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    disabled: false,",
          "description": "Change disabled default variant from string 'false' to boolean false",
          "content": "    disabled: false,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 100,
        "column": 7,
        "message": "Radio items missing accessible labeling structure - children content may not be properly associated with radio controls",
        "description": "Radio items missing accessible labeling structure - children content may not be properly associated with radio controls This code works but could be improved for better maintainability.",
        "suggestion": "Consider wrapping children in a label element or ensuring proper ARIA labeling",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 94,
        "column": 5,
        "message": "Missing keyboard navigation support - motion.div wrapper may interfere with native keyboard interactions",
        "description": "Missing keyboard navigation support - motion.div wrapper may interfere with native keyboard interactions This code works but could be improved for better maintainability.",
        "suggestion": "Ensure keyboard events are properly forwarded through the motion wrapper",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 94,
        "column": 5,
        "message": "Unnecessary motion.div wrapper creates additional DOM layer and may impact performance",
        "description": "Unnecessary motion.div wrapper creates additional DOM layer and may impact performance This implementation could impact application performance.",
        "suggestion": "Consider applying motion props directly to the RadioGroupPrimitive.Item if possible",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 48,
        "column": 3,
        "message": "Unused variants object in radioIndicatorVariants - empty variants should be omitted",
        "description": "Unused variants object in radioIndicatorVariants - empty variants should be omitted This violates code style conventions and may reduce readability.",
        "suggestion": "Remove empty variants object or add meaningful variants",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const radioIndicatorVariants = cva({\n  base: \"relative h-5 w-5 rounded-full border-2 border-white/20 group-data-[state=checked]:border-blue-400 group-data-[state=checked]:bg-gradient-to-br group-data-[state=checked]:from-blue-400/20 group-data-[state=checked]:to-purple-400/20 backdrop-blur-sm transition-all duration-200 group-hover:border-white/40 group-focus:border-blue-400\",\n});",
          "description": "Remove empty variants object or add meaningful variants",
          "content": "const radioIndicatorVariants = cva({\n  base: \"relative h-5 w-5 rounded-full border-2 border-white/20 group-data-[state=checked]:border-blue-400 group-data-[state=checked]:bg-gradient-to-br group-data-[state=checked]:from-blue-400/20 group-data-[state=checked]:to-purple-400/20 backdrop-blur-sm transition-all duration-200 group-hover:border-white/40 group-focus:border-blue-400\",\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx-design-pattern-5",
        "type": "design-pattern",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.tsx",
        "line": 84,
        "column": 7,
        "message": "Props spreading without proper prop filtering may pass unintended props to DOM elements",
        "description": "Props spreading without proper prop filtering may pass unintended props to DOM elements This code works but could be improved for better maintainability.",
        "suggestion": "Consider destructuring and filtering props to avoid passing non-DOM props",
        "rule": "design-pattern",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx",
        "line": 484,
        "column": 11,
        "message": "Improper label association - label elements should not be used inside radio button components",
        "description": "Improper label association - label elements should not be used inside radio button components This code works but could be improved for better maintainability.",
        "suggestion": "Remove label wrapper and use aria-label or aria-labelledby instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <RadioGroup.Item value=\"a11y1\" aria-label=\"Enable screen reader support\">\n          Enable screen reader support\n        </RadioGroup.Item>",
          "description": "Remove label wrapper and use aria-label or aria-labelledby instead",
          "content": "        <RadioGroup.Item value=\"a11y1\" aria-label=\"Enable screen reader support\">\n          Enable screen reader support\n        </RadioGroup.Item>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx",
        "line": 487,
        "column": 11,
        "message": "Improper label association - label elements should not be used inside radio button components",
        "description": "Improper label association - label elements should not be used inside radio button components This code works but could be improved for better maintainability.",
        "suggestion": "Remove label wrapper and use aria-label or aria-labelledby instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <RadioGroup.Item value=\"a11y2\" aria-label=\"High contrast mode\">\n          High contrast mode\n        </RadioGroup.Item>",
          "description": "Remove label wrapper and use aria-label or aria-labelledby instead",
          "content": "        <RadioGroup.Item value=\"a11y2\" aria-label=\"High contrast mode\">\n          High contrast mode\n        </RadioGroup.Item>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx",
        "line": 490,
        "column": 11,
        "message": "Improper label association - label elements should not be used inside radio button components",
        "description": "Improper label association - label elements should not be used inside radio button components This code works but could be improved for better maintainability.",
        "suggestion": "Remove label wrapper and use aria-label or aria-labelledby instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <RadioGroup.Item value=\"a11y3\" aria-label=\"Reduce motion\">\n          Reduce motion\n        </RadioGroup.Item>",
          "description": "Remove label wrapper and use aria-label or aria-labelledby instead",
          "content": "        <RadioGroup.Item value=\"a11y3\" aria-label=\"Reduce motion\">\n          Reduce motion\n        </RadioGroup.Item>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-radio-group/glass-radio-group.stories.tsx",
        "line": 403,
        "column": 7,
        "message": "Inline styles in JSX should be avoided in favor of CSS modules or styled-components",
        "description": "Inline styles in JSX should be avoided in favor of CSS modules or styled-components This violates code style conventions and may reduce readability.",
        "suggestion": "Move styles to a separate CSS file or use a CSS-in-JS solution",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/index.ts",
        "line": 4,
        "column": 1,
        "message": "Unnecessary comment that doesn't add value",
        "description": "Unnecessary comment that doesn't add value This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant comment as the export statement is self-explanatory",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-responsive-button\";",
          "description": "Remove the redundant comment as the export statement is self-explanatory",
          "content": "export * from \"./glass-responsive-button\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/index.ts-formatting-1",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This code works but could be improved for better maintainability.",
        "suggestion": "Remove trailing blank line",
        "rule": "formatting",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 124,
        "column": 7,
        "message": "Button component lacks proper ARIA attributes for loading state",
        "description": "Button component lacks proper ARIA attributes for loading state This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby for loading state and aria-disabled when loading",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <Comp\n        className={cn(\n          baseClasses,\n          variantClasses[variant],\n          sizeClasses[size],\n          isPressed && \"scale-95\",\n          className,\n        )}\n        ref={ref}\n        disabled={disabled || loading}\n        aria-disabled={disabled || loading}\n        aria-label={loading ? `Loading... ${children}` : undefined}\n        onTouchStart={() => setIsPressed(true)}\n        onTouchEnd={() => setIsPressed(false)}\n        onMouseDown={() => !isMobile && setIsPressed(true)}\n        onMouseUp={() => setIsPressed(false)}\n        onMouseLeave={() => setIsPressed(false)}\n        {...props}\n      >",
          "description": "Add aria-label or aria-describedby for loading state and aria-disabled when loading",
          "content": "      <Comp\n        className={cn(\n          baseClasses,\n          variantClasses[variant],\n          sizeClasses[size],\n          isPressed && \"scale-95\",\n          className,\n        )}\n        ref={ref}\n        disabled={disabled || loading}\n        aria-disabled={disabled || loading}\n        aria-label={loading ? `Loading... ${children}` : undefined}\n        onTouchStart={() => setIsPressed(true)}\n        onTouchEnd={() => setIsPressed(false)}\n        onMouseDown={() => !isMobile && setIsPressed(true)}\n        onMouseUp={() => setIsPressed(false)}\n        onMouseLeave={() => setIsPressed(false)}\n        {...props}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 135,
        "column": 9,
        "message": "Unnecessary state update and re-render on every touch/mouse interaction",
        "description": "Unnecessary state update and re-render on every touch/mouse interaction This implementation could impact application performance.",
        "suggestion": "Consider using CSS :active pseudo-class instead of JavaScript state for press effects, or debounce the state updates",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 47,
        "column": 9,
        "message": "Mobile detection logic may produce false positives/negatives",
        "description": "Mobile detection logic may produce false positives/negatives This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use a more robust mobile detection method or user-agent detection library",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const checkMobile = () => {\n        setIsMobile(window.innerWidth < 768 && ('ontouchstart' in window || navigator.maxTouchPoints > 0));\n      };",
          "description": "Use a more robust mobile detection method or user-agent detection library",
          "content": "      const checkMobile = () => {\n        setIsMobile(window.innerWidth < 768 && ('ontouchstart' in window || navigator.maxTouchPoints > 0));\n      };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 50,
        "column": 7,
        "message": "Window resize listener may cause performance issues on frequent resizing",
        "description": "Window resize listener may cause performance issues on frequent resizing This implementation could impact application performance.",
        "suggestion": "Debounce or throttle the resize event handler to improve performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      checkMobile();\n      const debouncedCheckMobile = debounce(checkMobile, 250);\n      window.addEventListener(\"resize\", debouncedCheckMobile);\n      return () => {\n        window.removeEventListener(\"resize\", debouncedCheckMobile);\n        debouncedCheckMobile.cancel?.();\n      };",
          "description": "Debounce or throttle the resize event handler to improve performance",
          "content": "      checkMobile();\n      const debouncedCheckMobile = debounce(checkMobile, 250);\n      window.addEventListener(\"resize\", debouncedCheckMobile);\n      return () => {\n        window.removeEventListener(\"resize\", debouncedCheckMobile);\n        debouncedCheckMobile.cancel?.();\n      };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 48,
        "column": 33,
        "message": "Magic number 768 should be defined as a constant",
        "description": "Magic number 768 should be defined as a constant This violates code style conventions and may reduce readability.",
        "suggestion": "Define MOBILE_BREAKPOINT constant at the top of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const MOBILE_BREAKPOINT = 768;\n\ninterface GlassResponsiveButtonProps",
          "description": "Define MOBILE_BREAKPOINT constant at the top of the file",
          "content": "const MOBILE_BREAKPOINT = 768;\n\ninterface GlassResponsiveButtonProps"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 147,
        "column": 13,
        "message": "Loading spinner lacks proper accessibility attributes",
        "description": "Loading spinner lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add role='status', aria-label, and screen reader text for loading indicator",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div\n              role=\"status\"\n              aria-label=\"Loading\"\n              className={cn(\n                \"animate-spin rounded-full border-2 border-current border-t-transparent\",\n                iconSizeClasses[size],\n              )}\n            >\n              <span className=\"sr-only\">Loading...</span>\n            </div>",
          "description": "Add role='status', aria-label, and screen reader text for loading indicator",
          "content": "            <div\n              role=\"status\"\n              aria-label=\"Loading\"\n              className={cn(\n                \"animate-spin rounded-full border-2 border-current border-t-transparent\",\n                iconSizeClasses[size],\n              )}\n            >\n              <span className=\"sr-only\">Loading...</span>\n            </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.tsx",
        "line": 135,
        "column": 9,
        "message": "Potential memory leak with event listeners if component unmounts during touch/mouse events",
        "description": "Potential memory leak with event listeners if component unmounts during touch/mouse events This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add cleanup for touch/mouse events in useEffect or use useCallback for event handlers",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 41,
        "column": 7,
        "message": "Heading elements should have proper hierarchy and semantic structure",
        "description": "Heading elements should have proper hierarchy and semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Consider using proper heading hierarchy (h1, h2, h3) or semantic labels for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 46,
        "column": 7,
        "message": "Heading elements should have proper hierarchy and semantic structure",
        "description": "Heading elements should have proper hierarchy and semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Consider using proper heading hierarchy (h1, h2, h3) or semantic labels for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 52,
        "column": 7,
        "message": "Heading elements should have proper hierarchy and semantic structure",
        "description": "Heading elements should have proper hierarchy and semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Consider using proper heading hierarchy (h1, h2, h3) or semantic labels for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 57,
        "column": 7,
        "message": "Heading elements should have proper hierarchy and semantic structure",
        "description": "Heading elements should have proper hierarchy and semantic structure This code works but could be improved for better maintainability.",
        "suggestion": "Consider using proper heading hierarchy (h1, h2, h3) or semantic labels for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 60,
        "column": 21,
        "message": "Icons should have accessible labels or be marked as decorative",
        "description": "Icons should have accessible labels or be marked as decorative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attributes to icons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "leftIcon={<Heart className=\"h-4 w-4\" aria-hidden=\"true\" />}",
          "description": "Add aria-label or aria-hidden attributes to icons for better accessibility",
          "content": "leftIcon={<Heart className=\"h-4 w-4\" aria-hidden=\"true\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 61,
        "column": 22,
        "message": "Icons should have accessible labels or be marked as decorative",
        "description": "Icons should have accessible labels or be marked as decorative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attributes to icons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "rightIcon={<ArrowRight className=\"h-4 w-4\" aria-hidden=\"true\" />}",
          "description": "Add aria-label or aria-hidden attributes to icons for better accessibility",
          "content": "rightIcon={<ArrowRight className=\"h-4 w-4\" aria-hidden=\"true\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 89,
        "column": 19,
        "message": "Icons should have accessible labels or be marked as decorative",
        "description": "Icons should have accessible labels or be marked as decorative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attributes to icons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "leftIcon={<Zap className=\"h-4 w-4\" aria-hidden=\"true\" />}",
          "description": "Add aria-label or aria-hidden attributes to icons for better accessibility",
          "content": "leftIcon={<Zap className=\"h-4 w-4\" aria-hidden=\"true\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 96,
        "column": 19,
        "message": "Icons should have accessible labels or be marked as decorative",
        "description": "Icons should have accessible labels or be marked as decorative This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attributes to icons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "leftIcon={<Star className=\"h-4 w-4\" aria-hidden=\"true\" />}",
          "description": "Add aria-label or aria-hidden attributes to icons for better accessibility",
          "content": "leftIcon={<Star className=\"h-4 w-4\" aria-hidden=\"true\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 41,
        "column": 15,
        "message": "Hardcoded text color may not be accessible in all themes",
        "description": "Hardcoded text color may not be accessible in all themes This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using theme-aware text colors or CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-style-9",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 46,
        "column": 15,
        "message": "Hardcoded text color may not be accessible in all themes",
        "description": "Hardcoded text color may not be accessible in all themes This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using theme-aware text colors or CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-style-10",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 52,
        "column": 15,
        "message": "Hardcoded text color may not be accessible in all themes",
        "description": "Hardcoded text color may not be accessible in all themes This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using theme-aware text colors or CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx-style-11",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-responsive-button/glass-responsive-button.stories.tsx",
        "line": 57,
        "column": 15,
        "message": "Hardcoded text color may not be accessible in all themes",
        "description": "Hardcoded text color may not be accessible in all themes This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using theme-aware text colors or CSS custom properties",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/index.ts",
        "line": 4,
        "column": 1,
        "message": "Unnecessary comment that doesn't add meaningful information",
        "description": "Unnecessary comment that doesn't add meaningful information This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant comment or make it more descriptive",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-portal\";",
          "description": "Remove redundant comment or make it more descriptive",
          "content": "export * from \"./glass-portal\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/index.ts-formatting-1",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This code works but could be improved for better maintainability.",
        "suggestion": "Remove trailing blank line",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-portal Component Export\n */\nexport * from \"./glass-portal\";",
          "description": "Remove trailing blank line",
          "content": "/**\n * glass-portal Component Export\n */\nexport * from \"./glass-portal\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx",
        "line": 37,
        "column": 5,
        "message": "Missing return type for early return statements - should explicitly return null",
        "description": "Missing return type for early return statements - should explicitly return null This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Explicitly return null for consistency and clarity",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Explicitly return null for consistency and clarity",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx",
        "line": 41,
        "column": 5,
        "message": "Missing return type for early return statements - should explicitly return null",
        "description": "Missing return type for early return statements - should explicitly return null This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Explicitly return null for consistency and clarity",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return null;",
          "description": "Explicitly return null for consistency and clarity",
          "content": "    return null;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx",
        "line": 34,
        "column": 18,
        "message": "Potential runtime error if document.body is null when container is not provided",
        "description": "Potential runtime error if document.body is null when container is not provided This code works but could be improved for better maintainability.",
        "suggestion": "Add null check for document.body even when container is provided as fallback",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const node = container || document.body;\n    if (!node) {\n      return;\n    }",
          "description": "Add null check for document.body even when container is provided as fallback",
          "content": "    const node = container || document.body;\n    if (!node) {\n      return;\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-portal/glass-portal.tsx",
        "line": 37,
        "column": 5,
        "message": "Unnecessary cleanup function that sets mountNode to null - React will handle portal cleanup automatically",
        "description": "Unnecessary cleanup function that sets mountNode to null - React will handle portal cleanup automatically This implementation could impact application performance.",
        "suggestion": "Remove unnecessary cleanup or only clean up when container changes",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/index.ts",
        "line": 6,
        "column": 1,
        "message": "Redundant export: Re-exporting everything after specific export creates unnecessary duplication",
        "description": "Redundant export: Re-exporting everything after specific export creates unnecessary duplication This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant 'export *' statement since the specific export already exports the component",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-progress Component Export\n */\nexport { GlassProgress } from \"./glass-progress\";",
          "description": "Remove the redundant 'export *' statement since the specific export already exports the component",
          "content": "/**\n * glass-progress Component Export\n */\nexport { GlassProgress } from \"./glass-progress\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx",
        "line": 44,
        "column": 1,
        "message": "Inconsistent indentation - some lines use 2 spaces, others use different amounts",
        "description": "Inconsistent indentation - some lines use 2 spaces, others use different amounts This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent 2-space indentation throughout the JSX return statement",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div ref={ref} className={cn(\"liquid-glass-container\", \"w-full\", className)} {...props}>\n          {/* Liquid Glass Layers */}\n          <div className=\"liquid-glass-filter\" />\n          <div className=\"liquid-glass-overlay\" />\n          <div className=\"liquid-glass-specular\" />\n          <div className=\"liquid-glass-content\">\n            {showValue && (\n              <div className=\"mb-2 flex items-center justify-between\">\n                <span className=\"text-gray-600 text-sm dark:text-gray-400\">\n                  Progress\n                </span>\n                <span className=\"font-medium text-gray-900 text-sm dark:text-white\">\n                  {Math.round(percentage)}%\n                </span>\n              </div>\n            )}\n\n            <div\n              className={cn(\n                \"relative w-full overflow-hidden rounded-full\",\n                sizeClasses[size],\n                variant === \"default\" && getGlassClass(\"default\"),\n                variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n                variant === \"gradient\" &&\n                  \"bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600\",\n              )}\n            >\n              <div\n                className={cn(\n                  \"h-full rounded-full transition-all duration-500 ease-out\",\n                  variant === \"default\" &&\n                    `bg-gradient-to-r ${colorClasses[color]}`,\n                  variant === \"gradient\" &&\n                    `bg-gradient-to-r ${colorClasses[color]}`,\n                  variant === \"minimal\" && `bg-${color}-500`,\n                )}\n                style={{ width: `${percentage}%` }}\n              />\n\n              {/* Shimmer effect */}\n              <div\n                className={cn(\n                  \"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\",\n                  \"animate-pulse opacity-50\",\n                )}\n                style={{\n                  background:\n                    \"linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.2) 50%, transparent 100%)\",\n                  transform: \"translateX(-100%)\",\n                }}\n              />\n            </div>\n          </div>\n        </div>",
          "description": "Use consistent 2-space indentation throughout the JSX return statement",
          "content": "        <div ref={ref} className={cn(\"liquid-glass-container\", \"w-full\", className)} {...props}>\n          {/* Liquid Glass Layers */}\n          <div className=\"liquid-glass-filter\" />\n          <div className=\"liquid-glass-overlay\" />\n          <div className=\"liquid-glass-specular\" />\n          <div className=\"liquid-glass-content\">\n            {showValue && (\n              <div className=\"mb-2 flex items-center justify-between\">\n                <span className=\"text-gray-600 text-sm dark:text-gray-400\">\n                  Progress\n                </span>\n                <span className=\"font-medium text-gray-900 text-sm dark:text-white\">\n                  {Math.round(percentage)}%\n                </span>\n              </div>\n            )}\n\n            <div\n              className={cn(\n                \"relative w-full overflow-hidden rounded-full\",\n                sizeClasses[size],\n                variant === \"default\" && getGlassClass(\"default\"),\n                variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n                variant === \"gradient\" &&\n                  \"bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600\",\n              )}\n            >\n              <div\n                className={cn(\n                  \"h-full rounded-full transition-all duration-500 ease-out\",\n                  variant === \"default\" &&\n                    `bg-gradient-to-r ${colorClasses[color]}`,\n                  variant === \"gradient\" &&\n                    `bg-gradient-to-r ${colorClasses[color]}`,\n                  variant === \"minimal\" && `bg-${color}-500`,\n                )}\n                style={{ width: `${percentage}%` }}\n              />\n\n              {/* Shimmer effect */}\n              <div\n                className={cn(\n                  \"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\",\n                  \"animate-pulse opacity-50\",\n                )}\n                style={{\n                  background:\n                    \"linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.2) 50%, transparent 100%)\",\n                  transform: \"translateX(-100%)\",\n                }}\n              />\n            </div>\n          </div>\n        </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx",
        "line": 61,
        "column": 11,
        "message": "Progress bar is missing accessibility attributes (role, aria-valuenow, aria-valuemin, aria-valuemax)",
        "description": "Progress bar is missing accessibility attributes (role, aria-valuenow, aria-valuemin, aria-valuemax) This code works but could be improved for better maintainability.",
        "suggestion": "Add ARIA attributes to make the progress bar accessible to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div\n              role=\"progressbar\"\n              aria-valuenow={Math.round(percentage)}\n              aria-valuemin={0}\n              aria-valuemax={100}\n              aria-label=\"Progress\"\n              className={cn(\n                \"relative w-full overflow-hidden rounded-full\",\n                sizeClasses[size],\n                variant === \"default\" && getGlassClass(\"default\"),\n                variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n                variant === \"gradient\" &&\n                  \"bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600\",\n              )}\n            >",
          "description": "Add ARIA attributes to make the progress bar accessible to screen readers",
          "content": "            <div\n              role=\"progressbar\"\n              aria-valuenow={Math.round(percentage)}\n              aria-valuemin={0}\n              aria-valuemax={100}\n              aria-label=\"Progress\"\n              className={cn(\n                \"relative w-full overflow-hidden rounded-full\",\n                sizeClasses[size],\n                variant === \"default\" && getGlassClass(\"default\"),\n                variant === \"minimal\" && \"bg-gray-200 dark:bg-gray-700\",\n                variant === \"gradient\" &&\n                  \"bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600\",\n              )}\n            >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx",
        "line": 74,
        "column": 17,
        "message": "Redundant className construction - both 'default' and 'gradient' variants use the same gradient pattern",
        "description": "Redundant className construction - both 'default' and 'gradient' variants use the same gradient pattern This violates code style conventions and may reduce readability.",
        "suggestion": "Consolidate the gradient logic to avoid duplication",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              className={cn(\n                \"h-full rounded-full transition-all duration-500 ease-out\",\n                (variant === \"default\" || variant === \"gradient\") &&\n                  `bg-gradient-to-r ${colorClasses[color]}`,\n                variant === \"minimal\" && `bg-${color}-500`,\n              )}",
          "description": "Consolidate the gradient logic to avoid duplication",
          "content": "              className={cn(\n                \"h-full rounded-full transition-all duration-500 ease-out\",\n                (variant === \"default\" || variant === \"gradient\") &&\n                  `bg-gradient-to-r ${colorClasses[color]}`,\n                variant === \"minimal\" && `bg-${color}-500`,\n              )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx",
        "line": 87,
        "column": 15,
        "message": "Inline styles override className styles which could cause maintenance issues",
        "description": "Inline styles override className styles which could cause maintenance issues This violates code style conventions and may reduce readability.",
        "suggestion": "Move inline styles to CSS classes or use consistent styling approach",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.tsx",
        "line": 35,
        "column": 7,
        "message": "Object literals created in render function will cause unnecessary re-renders",
        "description": "Object literals created in render function will cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move static object literals outside the component or use useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const sizeClasses = {\n  sm: \"h-1\",\n  md: \"h-2\",\n  lg: \"h-3\",\n} as const;\n\nconst colorClasses = {\n  blue: \"from-blue-500 to-blue-600\",\n  green: \"from-green-500 to-green-600\",\n  purple: \"from-purple-500 to-purple-600\",\n  red: \"from-red-500 to-red-600\",\n  yellow: \"from-yellow-500 to-yellow-600\",\n} as const;\n\nexport const GlassProgress = React.memo(\n  React.forwardRef<HTMLDivElement, GlassProgressProps>(\n    (\n      {\n        value,\n        max = 100,\n        size = \"md\",\n        variant = \"default\",\n        showValue = false,\n        className,\n        color = \"blue\",\n        ...props\n      },\n      ref,\n    ) => {\n      const percentage = Math.min(100, Math.max(0, (value / max) * 100));",
          "description": "Move static object literals outside the component or use useMemo",
          "content": "const sizeClasses = {\n  sm: \"h-1\",\n  md: \"h-2\",\n  lg: \"h-3\",\n} as const;\n\nconst colorClasses = {\n  blue: \"from-blue-500 to-blue-600\",\n  green: \"from-green-500 to-green-600\",\n  purple: \"from-purple-500 to-purple-600\",\n  red: \"from-red-500 to-red-600\",\n  yellow: \"from-yellow-500 to-yellow-600\",\n} as const;\n\nexport const GlassProgress = React.memo(\n  React.forwardRef<HTMLDivElement, GlassProgressProps>(\n    (\n      {\n        value,\n        max = 100,\n        size = \"md\",\n        variant = \"default\",\n        showValue = false,\n        className,\n        color = \"blue\",\n        ...props\n      },\n      ref,\n    ) => {\n      const percentage = Math.min(100, Math.max(0, (value / max) * 100));"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 99,
        "column": 5,
        "message": "Missing dependency array optimization - useEffect may cause unnecessary re-renders",
        "description": "Missing dependency array optimization - useEffect may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Add empty dependency array to prevent recreation of timer on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    useEffect(() => {\n      const timer = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) return 0;\n          return prev + 1;\n        });\n      }, 50);\n\n      return () => clearInterval(timer);\n    }, []);",
          "description": "Add empty dependency array to prevent recreation of timer on every render",
          "content": "    useEffect(() => {\n      const timer = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) return 0;\n          return prev + 1;\n        });\n      }, 50);\n\n      return () => clearInterval(timer);\n    }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 132,
        "column": 9,
        "message": "Button elements should have explicit type attribute for clarity",
        "description": "Button elements should have explicit type attribute for clarity This code works but could be improved for better maintainability.",
        "suggestion": "Add type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"",
          "description": "Add type='button' attribute to button elements that don't submit forms",
          "content": "        <button\n          type=\"button\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 233,
        "column": 13,
        "message": "Button elements should have explicit type attribute for clarity",
        "description": "Button elements should have explicit type attribute for clarity This code works but could be improved for better maintainability.",
        "suggestion": "Add type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button\n              type=\"button\"",
          "description": "Add type='button' attribute to button elements that don't submit forms",
          "content": "            <button\n              type=\"button\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 294,
        "column": 13,
        "message": "Button elements should have explicit type attribute for clarity",
        "description": "Button elements should have explicit type attribute for clarity This code works but could be improved for better maintainability.",
        "suggestion": "Add type='button' attribute to button elements that don't submit forms",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button\n              type=\"button\"",
          "description": "Add type='button' attribute to button elements that don't submit forms",
          "content": "            <button\n              type=\"button\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 386,
        "column": 15,
        "message": "Inline styles should be avoided in favor of CSS classes or CSS-in-JS solutions",
        "description": "Inline styles should be avoided in favor of CSS classes or CSS-in-JS solutions This violates code style conventions and may reduce readability.",
        "suggestion": "Move inline styles to CSS classes or use a styled-components approach",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 414,
        "column": 7,
        "message": "Inline style tag should be moved to external stylesheet or CSS-in-JS solution",
        "description": "Inline style tag should be moved to external stylesheet or CSS-in-JS solution This violates code style conventions and may reduce readability.",
        "suggestion": "Move CSS animations to external stylesheet or use CSS-in-JS library",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-progress/glass-progress.stories.tsx",
        "line": 252,
        "column": 7,
        "message": "Memory leak potential - missing cleanup for timer in effect",
        "description": "Memory leak potential - missing cleanup for timer in effect This implementation could impact application performance.",
        "suggestion": "Store timer reference and ensure cleanup in useEffect return function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const timer = setInterval(() => {\n        setUploadProgress((prev) => {\n          const next = prev + increment;\n          if (next >= 100) {\n            clearInterval(timer);\n            setIsUploading(false);\n            return 100;\n          }\n          return next;\n        });\n      }, interval);\n\n      return () => clearInterval(timer);",
          "description": "Store timer reference and ensure cleanup in useEffect return function",
          "content": "      const timer = setInterval(() => {\n        setUploadProgress((prev) => {\n          const next = prev + increment;\n          if (next >= 100) {\n            clearInterval(timer);\n            setIsUploading(false);\n            return 100;\n          }\n          return next;\n        });\n      }, interval);\n\n      return () => clearInterval(timer);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/index.ts-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - the wildcard export already includes the named export",
        "description": "Redundant export statement - the wildcard export already includes the named export This code works but could be improved for better maintainability.",
        "suggestion": "Remove the redundant named export since the wildcard export on line 7 already includes it",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-popover Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-popover\";",
          "description": "Remove the redundant named export since the wildcard export on line 7 already includes it",
          "content": "/**\n * glass-popover Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-popover\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 58,
        "column": 5,
        "message": "Potential issue with positioning calculation on first render - popover dimensions may be 0x0",
        "description": "Potential issue with positioning calculation on first render - popover dimensions may be 0x0 This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add a check to ensure popover has non-zero dimensions before calculating position, or use a layout effect",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 146,
        "column": 5,
        "message": "Missing dependencies in useEffect - content and trigger changes won't trigger position recalculation",
        "description": "Missing dependencies in useEffect - content and trigger changes won't trigger position recalculation This implementation could impact application performance.",
        "suggestion": "Add content and trigger to the dependency array if position should update when they change",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  }, [isOpen, position, align, content, trigger]);",
          "description": "Add content and trigger to the dependency array if position should update when they change",
          "content": "  }, [isOpen, position, align, content, trigger]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 189,
        "column": 5,
        "message": "Popover content lacks proper ARIA attributes for screen readers",
        "description": "Popover content lacks proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-labelledby, role, and other ARIA attributes to improve accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n      ref={popoverRef}\n      style={popoverStyle}\n      role=\"dialog\"\n      aria-modal=\"false\"\n      aria-labelledby=\"popover-trigger\"\n      className={cn(\n        \"liquid-glass\",\n        getGlassClass(\"elevated\"),\n        \"rounded-xl p-4\",\n        \"border border-white/20 dark:border-white/10\",\n        \"shadow-black/10 shadow-lg dark:shadow-black/30\",\n        \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        \"max-w-sm\",\n        contentClassName,\n      )}\n    >",
          "description": "Add aria-labelledby, role, and other ARIA attributes to improve accessibility",
          "content": "    <div\n      ref={popoverRef}\n      style={popoverStyle}\n      role=\"dialog\"\n      aria-modal=\"false\"\n      aria-labelledby=\"popover-trigger\"\n      className={cn(\n        \"liquid-glass\",\n        getGlassClass(\"elevated\"),\n        \"rounded-xl p-4\",\n        \"border border-white/20 dark:border-white/10\",\n        \"shadow-black/10 shadow-lg dark:shadow-black/30\",\n        \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        \"max-w-sm\",\n        contentClassName,\n      )}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 207,
        "column": 7,
        "message": "Trigger button lacks proper ARIA labeling and relationship with popover",
        "description": "Trigger button lacks proper ARIA labeling and relationship with popover This code works but could be improved for better maintainability.",
        "suggestion": "Add id and aria-describedby attributes to establish proper ARIA relationship",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <button\n        type=\"button\"\n        ref={triggerRef}\n        id=\"popover-trigger\"\n        onClick={toggleOpen}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            toggleOpen();\n          }\n        }}\n        aria-expanded={isOpen}\n        aria-haspopup=\"dialog\"\n        aria-describedby={isOpen ? \"popover-content\" : undefined}\n        className={cn(\"inline-block cursor-pointer\", className)}\n      >",
          "description": "Add id and aria-describedby attributes to establish proper ARIA relationship",
          "content": "      <button\n        type=\"button\"\n        ref={triggerRef}\n        id=\"popover-trigger\"\n        onClick={toggleOpen}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            toggleOpen();\n          }\n        }}\n        aria-expanded={isOpen}\n        aria-haspopup=\"dialog\"\n        aria-describedby={isOpen ? \"popover-content\" : undefined}\n        className={cn(\"inline-block cursor-pointer\", className)}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 148,
        "column": 3,
        "message": "Event listeners are added/removed on every render when isOpen changes, causing unnecessary work",
        "description": "Event listeners are added/removed on every render when isOpen changes, causing unnecessary work This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Restructure the effect to only add listeners once when component mounts and use state checks inside handlers",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.tsx",
        "line": 142,
        "column": 9,
        "message": "Hardcoded z-index value may cause stacking context issues",
        "description": "Hardcoded z-index value may cause stacking context issues This violates code style conventions and may reduce readability.",
        "suggestion": "Use a CSS custom property or theme variable for z-index values",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        zIndex: \"var(--popover-z-index, 9999)\",",
          "description": "Use a CSS custom property or theme variable for z-index values",
          "content": "        zIndex: \"var(--popover-z-index, 9999)\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 226,
        "column": 17,
        "message": "Interactive form inputs inside popover may not be properly accessible to screen readers when popover is closed",
        "description": "Interactive form inputs inside popover may not be properly accessible to screen readers when popover is closed This code works but could be improved for better maintainability.",
        "suggestion": "Add proper ARIA attributes and ensure form controls are announced correctly when popover opens",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 246,
        "column": 17,
        "message": "Custom toggle switch lacks proper accessibility attributes",
        "description": "Custom toggle switch lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add role='switch', aria-checked, and aria-labelledby attributes to the toggle button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <button\n                  type=\"button\"\n                  role=\"switch\"\n                  aria-checked={notifications}\n                  aria-labelledby=\"notifications-label\"\n                  onClick={() => setNotifications(!notifications)}\n                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${notifications ? \"bg-blue-600\" : \"bg-gray-300\"}`}\n                >\n                  <span className=\"sr-only\">\n                    {notifications ? 'Disable' : 'Enable'} email notifications\n                  </span>\n                  <span\n                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${notifications ? \"translate-x-6\" : \"translate-x-1\"}`}\n                  />\n                </button>",
          "description": "Add role='switch', aria-checked, and aria-labelledby attributes to the toggle button",
          "content": "                <button\n                  type=\"button\"\n                  role=\"switch\"\n                  aria-checked={notifications}\n                  aria-labelledby=\"notifications-label\"\n                  onClick={() => setNotifications(!notifications)}\n                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${notifications ? \"bg-blue-600\" : \"bg-gray-300\"}`}\n                >\n                  <span className=\"sr-only\">\n                    {notifications ? 'Disable' : 'Enable'} email notifications\n                  </span>\n                  <span\n                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${notifications ? \"translate-x-6\" : \"translate-x-1\"}`}\n                  />\n                </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 243,
        "column": 17,
        "message": "Label for notifications toggle should have an id for proper association",
        "description": "Label for notifications toggle should have an id for proper association This code works but could be improved for better maintainability.",
        "suggestion": "Add id='notifications-label' to the label element",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <label id=\"notifications-label\" className=\"font-medium text-sm\">\n                  Email Notifications\n                </label>",
          "description": "Add id='notifications-label' to the label element",
          "content": "                <label id=\"notifications-label\" className=\"font-medium text-sm\">\n                  Email Notifications\n                </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 280,
        "column": 11,
        "message": "Menu buttons should have aria-haspopup attribute to indicate they open a menu",
        "description": "Menu buttons should have aria-haspopup attribute to indicate they open a menu This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-haspopup='menu' and aria-expanded attributes to menu trigger buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          aria-haspopup=\"menu\"\n          aria-label=\"More options\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        >\n          <MoreVertical className=\"h-5 w-5\" />\n        </button>",
          "description": "Add aria-haspopup='menu' and aria-expanded attributes to menu trigger buttons",
          "content": "        <button\n          type=\"button\"\n          aria-haspopup=\"menu\"\n          aria-label=\"More options\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        >\n          <MoreVertical className=\"h-5 w-5\" />\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 309,
        "column": 11,
        "message": "Help button should have aria-haspopup attribute and proper labeling",
        "description": "Help button should have aria-haspopup attribute and proper labeling This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-haspopup and aria-label attributes for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          aria-haspopup=\"dialog\"\n          aria-label=\"Help information\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        >\n          <HelpCircle className=\"h-5 w-5\" />\n        </button>",
          "description": "Add aria-haspopup and aria-label attributes for better accessibility",
          "content": "        <button\n          type=\"button\"\n          aria-haspopup=\"dialog\"\n          aria-label=\"Help information\"\n          className=\"rounded-lg p-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        >\n          <HelpCircle className=\"h-5 w-5\" />\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-popover/glass-popover.stories.tsx",
        "line": 291,
        "column": 13,
        "message": "Menu items should have proper menu role structure",
        "description": "Menu items should have proper menu role structure This code works but could be improved for better maintainability.",
        "suggestion": "Wrap menu items in a div with role='menu' and add role='menuitem' to each button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"min-w-[150px] p-2\" role=\"menu\">\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Duplicate\n            </button>\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left text-red-600 hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Delete\n            </button>\n          </div>",
          "description": "Wrap menu items in a div with role='menu' and add role='menuitem' to each button",
          "content": "          <div className=\"min-w-[150px] p-2\" role=\"menu\">\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Edit\n            </button>\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Duplicate\n            </button>\n            <button\n              type=\"button\"\n              role=\"menuitem\"\n              className=\"w-full rounded px-3 py-2 text-left text-red-600 hover:bg-gray-100 dark:hover:bg-gray-800\"\n            >\n              Delete\n            </button>\n          </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 25,
        "column": 43,
        "message": "Using 'any' type bypasses TypeScript's type safety, potentially leading to runtime errors",
        "description": "Using 'any' type bypasses TypeScript's type safety, potentially leading to runtime errors This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Define proper interface for component props instead of using 'any'",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-security-1",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 28,
        "column": 46,
        "message": "Using 'any' type bypasses TypeScript's type safety, potentially leading to runtime errors",
        "description": "Using 'any' type bypasses TypeScript's type safety, potentially leading to runtime errors This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Define proper interface for component props instead of using 'any'",
        "rule": "security",
        "category": "Security"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 51,
        "column": 43,
        "message": "Input element without accessible label or aria-label",
        "description": "Input element without accessible label or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a label element for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 52,
        "column": 35,
        "message": "Input element without accessible label or aria-label",
        "description": "Input element without accessible label or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a label element for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 56,
        "column": 36,
        "message": "Input element without accessible label or aria-label",
        "description": "Input element without accessible label or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with a label element for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 217,
        "column": 1,
        "message": "Invalid JSX comment syntax - should use {/* */} inside JSX",
        "description": "Invalid JSX comment syntax - should use {/* */} inside JSX This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper JSX comment syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{/* Playground Editor Component */}",
          "description": "Use proper JSX comment syntax",
          "content": "{/* Playground Editor Component */}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 260,
        "column": 1,
        "message": "Invalid JSX comment syntax - should use {/* */} inside JSX",
        "description": "Invalid JSX comment syntax - should use {/* */} inside JSX This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper JSX comment syntax",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "{/* Playground Preview Component */}",
          "description": "Use proper JSX comment syntax",
          "content": "{/* Playground Preview Component */}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 116,
        "column": 15,
        "message": "Empty catch block ignores potential errors",
        "description": "Empty catch block ignores potential errors This code works but could be improved for better maintainability.",
        "suggestion": "Add proper error handling or at least log the error for debugging",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      } catch (error) {\n        console.warn('Failed to copy to clipboard:', error);\n      }",
          "description": "Add proper error handling or at least log the error for debugging",
          "content": "      } catch (error) {\n        console.warn('Failed to copy to clipboard:', error);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 310,
        "column": 1,
        "message": "DOM manipulation in component body will run on every render",
        "description": "DOM manipulation in component body will run on every render This implementation could impact application performance.",
        "suggestion": "Move DOM manipulation to useEffect hook to avoid running on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Move this to a useEffect hook in the component\nuseEffect(() => {\n  const styleId = \"liquid-glass-playground-styles\";\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement(\"style\");\n    style.id = styleId;\n    style.textContent = playgroundStyles;\n    document.head.append(style);\n  }\n}, []);",
          "description": "Move DOM manipulation to useEffect hook to avoid running on every render",
          "content": "// Move this to a useEffect hook in the component\nuseEffect(() => {\n  const styleId = \"liquid-glass-playground-styles\";\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement(\"style\");\n    style.id = styleId;\n    style.textContent = playgroundStyles;\n    document.head.append(style);\n  }\n}, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx-naming-9",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.tsx",
        "line": 136,
        "column": 21,
        "message": "Function parameter uses 'previous' which could be more descriptive",
        "description": "Function parameter uses 'previous' which could be more descriptive This code works but could be improved for better maintainability.",
        "suggestion": "Use more descriptive parameter name like 'prev' or 'prevFullscreen'",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    setFullscreen((prev) => !prev);",
          "description": "Use more descriptive parameter name like 'prev' or 'prevFullscreen'",
          "content": "    setFullscreen((prev) => !prev);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 7,
        "column": 1,
        "message": "Missing component imports for referenced components",
        "description": "Missing component imports for referenced components This code works but could be improved for better maintainability.",
        "suggestion": "Import missing components: GlassButton and Sparkles from their respective modules",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport {\n  Code,\n  Eye,\n  FileCode,\n  Layers,\n  Palette,\n  Play,\n  Settings,\n  Sparkles,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { GlassButton } from \"../glass-button/glass-button\";\nimport { GlassCard } from \"../glass-card-refactored/glass-card\";\nimport { GlassInput } from \"../glass-input/glass-input\";\nimport { GlassSelect } from \"../glass-select/glass-select\";\nimport { GlassSwitch } from \"../glass-switch/glass-switch\";\nimport { GlassTabs } from \"../glass-tabs/glass-tabs\";\nimport { GlassPlayground, PlaygroundTemplates } from \"./glass-playground\";",
          "description": "Import missing components: GlassButton and Sparkles from their respective modules",
          "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport {\n  Code,\n  Eye,\n  FileCode,\n  Layers,\n  Palette,\n  Play,\n  Settings,\n  Sparkles,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { GlassButton } from \"../glass-button/glass-button\";\nimport { GlassCard } from \"../glass-card-refactored/glass-card\";\nimport { GlassInput } from \"../glass-input/glass-input\";\nimport { GlassSelect } from \"../glass-select/glass-select\";\nimport { GlassSwitch } from \"../glass-switch/glass-switch\";\nimport { GlassTabs } from \"../glass-tabs/glass-tabs\";\nimport { GlassPlayground, PlaygroundTemplates } from \"./glass-playground\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 456,
        "column": 11,
        "message": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality",
        "description": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality This will likely cause errors during execution.",
        "suggestion": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton\n            variant=\"secondary\"\n            onClick={() => setCount(count - 1)}\n            className=\"flex-1\"\n          >",
          "description": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
          "content": "          <GlassButton\n            variant=\"secondary\"\n            onClick={() => setCount(count - 1)}\n            className=\"flex-1\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 462,
        "column": 11,
        "message": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality",
        "description": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality This will likely cause errors during execution.",
        "suggestion": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton\n            variant=\"primary\"\n            onClick={() => setCount(count + 1)}\n            className=\"flex-1\"\n          >",
          "description": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
          "content": "          <GlassButton\n            variant=\"primary\"\n            onClick={() => setCount(count + 1)}\n            className=\"flex-1\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 468,
        "column": 9,
        "message": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality",
        "description": "Invalid button element with both onClick and onKeyDown handlers that duplicate functionality This will likely cause errors during execution.",
        "suggestion": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          variant=\"ghost\"\n          onClick={() => setCount(0)}\n          className=\"w-full\"\n        >",
          "description": "Remove redundant onKeyDown handler as button elements handle Enter/Space key presses natively",
          "content": "        <GlassButton\n          variant=\"ghost\"\n          onClick={() => setCount(0)}\n          className=\"w-full\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 456,
        "column": 11,
        "message": "Missing type attribute on button element",
        "description": "Missing type attribute on button element This will likely cause errors during execution.",
        "suggestion": "Add type=\"button\" to prevent form submission if button is inside a form",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassButton\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={() => setCount(count - 1)}\n            className=\"flex-1\"\n          >",
          "description": "Add type=\"button\" to prevent form submission if button is inside a form",
          "content": "          <GlassButton\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={() => setCount(count - 1)}\n            className=\"flex-1\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 693,
        "column": 23,
        "message": "Inline arrow functions in onClick handlers cause unnecessary re-renders",
        "description": "Inline arrow functions in onClick handlers cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move handler functions outside render or use useCallback to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Move handler functions outside render or use useCallback to prevent unnecessary re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 736,
        "column": 11,
        "message": "Button element should not have onKeyDown handler for Enter/Space as this is handled natively",
        "description": "Button element should not have onKeyDown handler for Enter/Space as this is handled natively This will likely cause errors during execution.",
        "suggestion": "Remove onKeyDown handler and rely on native button keyboard behavior",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          variant=\"primary\"\n          onClick={() => alert('Button clicked!')}\n        >",
          "description": "Remove onKeyDown handler and rely on native button keyboard behavior",
          "content": "        <GlassButton\n          variant=\"primary\"\n          onClick={() => alert('Button clicked!')}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 754,
        "column": 9,
        "message": "Multiple button elements with redundant onKeyDown handlers",
        "description": "Multiple button elements with redundant onKeyDown handlers This will likely cause errors during execution.",
        "suggestion": "Remove onKeyDown handlers from button elements as Enter/Space are handled natively",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          variant=\"ghost\"\n          onClick={() => setStep(Math.max(1, step - 1))}\n          disabled={step === 1}\n        >\n          Previous\n        </GlassButton>\n\n        <GlassButton\n          variant=\"primary\"\n          onClick={() => setStep(Math.min(totalSteps, step + 1))}\n          disabled={step === totalSteps}\n        >\n          Next\n        </GlassButton>",
          "description": "Remove onKeyDown handlers from button elements as Enter/Space are handled natively",
          "content": "        <GlassButton\n          variant=\"ghost\"\n          onClick={() => setStep(Math.max(1, step - 1))}\n          disabled={step === 1}\n        >\n          Previous\n        </GlassButton>\n\n        <GlassButton\n          variant=\"primary\"\n          onClick={() => setStep(Math.min(totalSteps, step + 1))}\n          disabled={step === totalSteps}\n        >\n          Next\n        </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 933,
        "column": 9,
        "message": "Button element with redundant keyboard handling",
        "description": "Button element with redundant keyboard handling This will likely cause errors during execution.",
        "suggestion": "Remove onKeyDown handler as button elements handle keyboard events natively",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton\n          variant=\"primary\"\n          onClick={() => setIsActive(!isActive)}\n        >",
          "description": "Remove onKeyDown handler as button elements handle keyboard events natively",
          "content": "        <GlassButton\n          variant=\"primary\"\n          onClick={() => setIsActive(!isActive)}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-9",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 981,
        "column": 9,
        "message": "Button element with invalid onKeyDown implementation",
        "description": "Button element with invalid onKeyDown implementation This will likely cause errors during execution.",
        "suggestion": "Remove onKeyDown handler and add proper type attribute",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassButton type=\"button\" variant=\"primary\" onClick={addItem}>",
          "description": "Remove onKeyDown handler and add proper type attribute",
          "content": "        <GlassButton type=\"button\" variant=\"primary\" onClick={addItem}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx-accessibility-10",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-playground/glass-playground.stories.tsx",
        "line": 1128,
        "column": 11,
        "message": "Clickable div element without proper keyboard accessibility",
        "description": "Clickable div element without proper keyboard accessibility This will likely cause errors during execution.",
        "suggestion": "Add proper keyboard event handling or use button element instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            key={item}\n            type=\"button\"\n            className={`\n              p-3 rounded-lg transition-all cursor-pointer border backdrop-blur-sm\n              ${index === focusedIndex\n                ? 'bg-blue-500/30 border-blue-400/50 ring-2 ring-blue-400/50'\n                : 'bg-white/10 border-white/20 hover:bg-white/20'\n              }\n            `}\n            role=\"option\"\n            aria-selected={index === focusedIndex}\n            onClick={() => setFocusedIndex(index)}\n          >\n            {item} Item\n          </button>",
          "description": "Add proper keyboard event handling or use button element instead",
          "content": "          <button\n            key={item}\n            type=\"button\"\n            className={`\n              p-3 rounded-lg transition-all cursor-pointer border backdrop-blur-sm\n              ${index === focusedIndex\n                ? 'bg-blue-500/30 border-blue-400/50 ring-2 ring-blue-400/50'\n                : 'bg-white/10 border-white/20 hover:bg-white/20'\n              }\n            `}\n            role=\"option\"\n            aria-selected={index === focusedIndex}\n            onClick={() => setFocusedIndex(index)}\n          >\n            {item} Item\n          </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/index.ts",
        "line": 2,
        "column": 1,
        "message": "Unnecessary comment - the comment doesn't add meaningful information beyond what the code already expresses",
        "description": "Unnecessary comment - the comment doesn't add meaningful information beyond what the code already expresses This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant comment or make it more descriptive",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Public API for glass-pagination component\n */",
          "description": "Remove redundant comment or make it more descriptive",
          "content": "/**\n * Public API for glass-pagination component\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/index.ts-formatting-1",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This code works but could be improved for better maintainability.",
        "suggestion": "Remove trailing blank line",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-pagination Component Export\n */ // Re-export everything for compatibility\nexport * from \"./glass-pagination\";",
          "description": "Remove trailing blank line",
          "content": "/**\n * glass-pagination Component Export\n */ // Re-export everything for compatibility\nexport * from \"./glass-pagination\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 70,
        "column": 25,
        "message": "Variable name 'showPreviousNext' does not match the original prop name 'showPrevNext'",
        "description": "Variable name 'showPreviousNext' does not match the original prop name 'showPrevNext' This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent naming: either rename the prop to 'showPreviousNext' or use 'showPrevNext' in destructuring",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      showPrevNext = true,",
          "description": "Use consistent naming: either rename the prop to 'showPreviousNext' or use 'showPrevNext' in destructuring",
          "content": "      showPrevNext = true,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 206,
        "column": 9,
        "message": "Inconsistent variable name usage: 'showPreviousNext' should be 'showPrevNext'",
        "description": "Inconsistent variable name usage: 'showPreviousNext' should be 'showPrevNext' This code works but could be improved for better maintainability.",
        "suggestion": "Use the original prop name 'showPrevNext' for consistency",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {showPrevNext && (",
          "description": "Use the original prop name 'showPrevNext' for consistency",
          "content": "        {showPrevNext && ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-naming-2",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 245,
        "column": 9,
        "message": "Inconsistent variable name usage: 'showPreviousNext' should be 'showPrevNext'",
        "description": "Inconsistent variable name usage: 'showPreviousNext' should be 'showPrevNext' This code works but could be improved for better maintainability.",
        "suggestion": "Use the original prop name 'showPrevNext' for consistency",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {showPrevNext && (",
          "description": "Use the original prop name 'showPrevNext' for consistency",
          "content": "        {showPrevNext && ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 226,
        "column": 15,
        "message": "Missing keyboard navigation support for ellipsis elements",
        "description": "Missing keyboard navigation support for ellipsis elements This code works but could be improved for better maintainability.",
        "suggestion": "Consider making ellipsis elements focusable or provide alternative navigation methods for keyboard users",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 226,
        "column": 30,
        "message": "Hardcoded dimensions may not scale properly with user's font size preferences",
        "description": "Hardcoded dimensions may not scale properly with user's font size preferences This code works but could be improved for better maintainability.",
        "suggestion": "Use relative units (em/rem) instead of fixed pixel values for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 80,
        "column": 5,
        "message": "Page number generation function is called on every render",
        "description": "Page number generation function is called on every render This implementation could impact application performance.",
        "suggestion": "Wrap generatePageNumbers in useMemo to avoid recalculation on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const generatePageNumbers = useMemo(() => {\n      const pages: Array<number | \"ellipsis\"> = [];\n\n      // Always include first page(s)\n\n      for (\n        let index = 1;\n        index <= Math.min(boundaryCount, totalPages);\n        index++\n      ) {\n        pages.push(index);\n      }\n\n      // Calculate start and end of sibling range\n      const siblingStart = Math.max(\n        currentPage - siblingCount,\n        boundaryCount + 1,\n      );\n      const siblingEnd = Math.min(\n        currentPage + siblingCount,\n        totalPages - boundaryCount,\n      );\n\n      // Add ellipsis before siblings if needed\n\n      if (siblingStart > boundaryCount + 1 && showEllipsis) {\n        pages.push(\"ellipsis\");\n      }\n\n      // Add sibling pages\n      for (let index = siblingStart; index <= siblingEnd; index++) {\n        if (index <= boundaryCount || index > totalPages - boundaryCount) {\n          continue;\n        }\n        pages.push(index);\n      }\n\n      // Add ellipsis after siblings if needed\n\n      if (siblingEnd < totalPages - boundaryCount && showEllipsis) {\n        pages.push(\"ellipsis\");\n      }\n\n      // Always include last page(s)\n      for (\n        let index = Math.max(totalPages - boundaryCount + 1, boundaryCount + 1);\n        index <= totalPages;\n        index++\n      ) {\n        if (!pages.includes(index)) {\n          pages.push(index);\n        }\n      }\n\n      return pages;\n    }, [currentPage, totalPages, siblingCount, boundaryCount, showEllipsis]);",
          "description": "Wrap generatePageNumbers in useMemo to avoid recalculation on every render",
          "content": "    const generatePageNumbers = useMemo(() => {\n      const pages: Array<number | \"ellipsis\"> = [];\n\n      // Always include first page(s)\n\n      for (\n        let index = 1;\n        index <= Math.min(boundaryCount, totalPages);\n        index++\n      ) {\n        pages.push(index);\n      }\n\n      // Calculate start and end of sibling range\n      const siblingStart = Math.max(\n        currentPage - siblingCount,\n        boundaryCount + 1,\n      );\n      const siblingEnd = Math.min(\n        currentPage + siblingCount,\n        totalPages - boundaryCount,\n      );\n\n      // Add ellipsis before siblings if needed\n\n      if (siblingStart > boundaryCount + 1 && showEllipsis) {\n        pages.push(\"ellipsis\");\n      }\n\n      // Add sibling pages\n      for (let index = siblingStart; index <= siblingEnd; index++) {\n        if (index <= boundaryCount || index > totalPages - boundaryCount) {\n          continue;\n        }\n        pages.push(index);\n      }\n\n      // Add ellipsis after siblings if needed\n\n      if (siblingEnd < totalPages - boundaryCount && showEllipsis) {\n        pages.push(\"ellipsis\");\n      }\n\n      // Always include last page(s)\n      for (\n        let index = Math.max(totalPages - boundaryCount + 1, boundaryCount + 1);\n        index <= totalPages;\n        index++\n      ) {\n        if (!pages.includes(index)) {\n          pages.push(index);\n        }\n      }\n\n      return pages;\n    }, [currentPage, totalPages, siblingCount, boundaryCount, showEllipsis]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 3,
        "column": 1,
        "message": "Page numbers generation uses useMemo but React is not imported with useMemo",
        "description": "Page numbers generation uses useMemo but React is not imported with useMemo This implementation could impact application performance.",
        "suggestion": "Import useMemo from React to optimize page number generation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import React, { useMemo } from \"react\";",
          "description": "Import useMemo from React to optimize page number generation",
          "content": "import React, { useMemo } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.tsx",
        "line": 48,
        "column": 15,
        "message": "Type mismatch in pageButtonVariants defaultVariants: isActive should be boolean false, not string 'false'",
        "description": "Type mismatch in pageButtonVariants defaultVariants: isActive should be boolean false, not string 'false' This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change string 'false' to boolean false for type consistency",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    isActive: false,",
          "description": "Change string 'false' to boolean false for type consistency",
          "content": "    isActive: false,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 135,
        "column": 11,
        "message": "Missing semantic heading structure - h3 elements should be part of a proper heading hierarchy",
        "description": "Missing semantic heading structure - h3 elements should be part of a proper heading hierarchy This code works but could be improved for better maintainability.",
        "suggestion": "Ensure h3 elements are preceded by h1 and h2 elements, or use appropriate heading levels",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 512,
        "column": 11,
        "message": "Missing semantic heading structure - h4 elements should be part of a proper heading hierarchy",
        "description": "Missing semantic heading structure - h4 elements should be part of a proper heading hierarchy This code works but could be improved for better maintainability.",
        "suggestion": "Ensure h4 elements are preceded by appropriate heading levels",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 132,
        "column": 11,
        "message": "Multiple useState hooks could be consolidated or optimized",
        "description": "Multiple useState hooks could be consolidated or optimized This implementation could impact application performance.",
        "suggestion": "Consider using useReducer or a single state object for related state variables",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 352,
        "column": 15,
        "message": "Repeated Array.from operations in render functions could impact performance",
        "description": "Repeated Array.from operations in render functions could impact performance This implementation could impact application performance.",
        "suggestion": "Consider memoizing the array generation or moving it outside the render function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const mockResults = useMemo(() => Array.from({ length: 5 }, (_, i) => ({\n                  key: i,\n                  id: 21 + i,\n                  description: 'Search result description...'\n                })), []);\n\n            <div className=\"space-y-2\">\n              {mockResults.map(({ key, id, description }) => (\n                <div\n                  key={key}\n                  className=\"rounded-lg border border-white/10 bg-white/5 p-3\"\n                >\n                  <div className=\"font-medium text-white/90\">\n                    Result {id}\n                  </div>\n                  <div className=\"text-sm text-white/60\">\n                    {description}\n                  </div>\n                </div>\n              ))}\n            </div>",
          "description": "Consider memoizing the array generation or moving it outside the render function",
          "content": "const mockResults = useMemo(() => Array.from({ length: 5 }, (_, i) => ({\n                  key: i,\n                  id: 21 + i,\n                  description: 'Search result description...'\n                })), []);\n\n            <div className=\"space-y-2\">\n              {mockResults.map(({ key, id, description }) => (\n                <div\n                  key={key}\n                  className=\"rounded-lg border border-white/10 bg-white/5 p-3\"\n                >\n                  <div className=\"font-medium text-white/90\">\n                    Result {id}\n                  </div>\n                  <div className=\"text-sm text-white/60\">\n                    {description}\n                  </div>\n                </div>\n              ))}\n            </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 135,
        "column": 11,
        "message": "Inconsistent spacing and formatting in JSX elements",
        "description": "Inconsistent spacing and formatting in JSX elements This violates code style conventions and may reduce readability.",
        "suggestion": "Maintain consistent spacing around JSX elements and attributes",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  control: \"boolean\",",
          "description": "Maintain consistent spacing around JSX elements and attributes",
          "content": "  control: \"boolean\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-pagination/glass-pagination.stories.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing React import for hooks used in render functions",
        "description": "Missing React import for hooks used in render functions This implementation could impact application performance.",
        "suggestion": "Import useMemo from React for performance optimizations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { useState, useMemo } from \"react\";",
          "description": "Import useMemo from React for performance optimizations",
          "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { useState, useMemo } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/index.ts",
        "line": 5,
        "column": 1,
        "message": "Missing explicit export type for type-only exports to improve tree-shaking",
        "description": "Missing explicit export type for type-only exports to improve tree-shaking This violates code style conventions and may reduce readability.",
        "suggestion": "Consider adding explicit type exports if this module exports types to enable better tree-shaking",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Re-export everything for compatibility\nexport * from \"./glass-number-input\";\nexport type * from \"./glass-number-input\";",
          "description": "Consider adding explicit type exports if this module exports types to enable better tree-shaking",
          "content": "// Re-export everything for compatibility\nexport * from \"./glass-number-input\";\nexport type * from \"./glass-number-input\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/index.ts-architecture-1",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/index.ts",
        "line": 5,
        "column": 1,
        "message": "Barrel export without explicit imports may lead to circular dependencies and bundle bloat",
        "description": "Barrel export without explicit imports may lead to circular dependencies and bundle bloat This code works but could be improved for better maintainability.",
        "suggestion": "Consider using explicit named exports instead of wildcard exports for better maintainability and tree-shaking",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 137,
        "column": 6,
        "message": "Missing dependency in useEffect - formatNumber is used but currentValue might be undefined on initialization",
        "description": "Missing dependency in useEffect - formatNumber is used but currentValue might be undefined on initialization This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add formatNumber and currentValue to dependency array",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    useEffect(() => {\n      setDisplayValue(formatNumber(currentValue));\n    }, [formatNumber, currentValue]);",
          "description": "Add formatNumber and currentValue to dependency array",
          "content": "    useEffect(() => {\n      setDisplayValue(formatNumber(currentValue));\n    }, [formatNumber, currentValue]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 305,
        "column": 25,
        "message": "aria-describedby receives output from cn() which may result in undefined or invalid values",
        "description": "aria-describedby receives output from cn() which may result in undefined or invalid values This code works but could be improved for better maintainability.",
        "suggestion": "Filter out undefined values before passing to aria-describedby",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-describedby={[description && descriptionId, helperText && helperTextId].filter(Boolean).join(' ') || undefined}",
          "description": "Filter out undefined values before passing to aria-describedby",
          "content": "            aria-describedby={[description && descriptionId, helperText && helperTextId].filter(Boolean).join(' ') || undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 267,
        "column": 6,
        "message": "useCallback dependency array could cause unnecessary re-renders - setRefs recreated when ref changes",
        "description": "useCallback dependency array could cause unnecessary re-renders - setRefs recreated when ref changes This implementation could impact application performance.",
        "suggestion": "Consider using useImperativeHandle or a different pattern for ref forwarding",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider using useImperativeHandle or a different pattern for ref forwarding",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 287,
        "column": 33,
        "message": "Type casting to union types without validation could cause runtime errors",
        "description": "Type casting to union types without validation could cause runtime errors This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add runtime validation for size prop or use default values",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          numberInputVariants({ size: (size || 'md') as 'sm' | 'md' | 'lg' }),",
          "description": "Add runtime validation for size prop or use default values",
          "content": "          numberInputVariants({ size: (size || 'md') as 'sm' | 'md' | 'lg' }),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 334,
        "column": 23,
        "message": "Type casting without validation in multiple locations could cause runtime errors",
        "description": "Type casting without validation in multiple locations could cause runtime errors This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add runtime validation for size prop",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                size: (size || 'md') as 'sm' | 'md' | 'lg',",
          "description": "Add runtime validation for size prop",
          "content": "                size: (size || 'md') as 'sm' | 'md' | 'lg',"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 340,
        "column": 13,
        "message": "Unnecessary conditional rendering logic could be optimized",
        "description": "Unnecessary conditional rendering logic could be optimized This implementation could impact application performance.",
        "suggestion": "Move px-12 style to buttonVariants to avoid conditional className logic",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx-convention-6",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.tsx",
        "line": 335,
        "column": 24,
        "message": "Inconsistent boolean prop conversion pattern",
        "description": "Inconsistent boolean prop conversion pattern This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent pattern for boolean to string conversion",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                error: error ? 'true' : 'false' as 'true' | 'false',",
          "description": "Use consistent pattern for boolean to string conversion",
          "content": "                error: error ? 'true' : 'false' as 'true' | 'false',"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx",
        "line": 8,
        "column": 23,
        "message": "Test assumes specific ARIA role 'spinbutton' which may not be appropriate for all number input implementations",
        "description": "Test assumes specific ARIA role 'spinbutton' which may not be appropriate for all number input implementations This code works but could be improved for better maintainability.",
        "suggestion": "Consider using getByLabelText or a more flexible selector, or verify that spinbutton role is actually implemented",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx",
        "line": 10,
        "column": 5,
        "message": "Test expects input type 'text' but queries for 'spinbutton' role - semantic mismatch",
        "description": "Test expects input type 'text' but queries for 'spinbutton' role - semantic mismatch This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "If input type is 'text', it should not have spinbutton role. Consider using type='number' or role='textbox'",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx",
        "line": 1,
        "column": 1,
        "message": "No test coverage for invalid input handling (non-numeric values)",
        "description": "No test coverage for invalid input handling (non-numeric values) This code works but could be improved for better maintainability.",
        "suggestion": "Add test cases for handling invalid inputs like letters, special characters, or values outside min/max bounds",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "\n  it(\"handles invalid input gracefully\", () => {\n    const handleChange = jest.fn();\n    render(<GlassNumberInput label=\"Number\" onChange={handleChange} />);\n\n    const input = screen.getByRole(\"spinbutton\");\n    fireEvent.change(input, { target: { value: \"abc\" } });\n\n    expect(handleChange).not.toHaveBeenCalled();\n  });\n\n  it(\"prevents values outside min/max bounds\", () => {\n    const handleChange = jest.fn();\n    render(\n      <GlassNumberInput\n        label=\"Limited\"\n        min={0}\n        max={10}\n        onChange={handleChange}\n      />\n    );\n\n    const input = screen.getByRole(\"spinbutton\");\n    fireEvent.change(input, { target: { value: \"15\" } });\n\n    expect(handleChange).not.toHaveBeenCalledWith(15);\n  });",
          "description": "Add test cases for handling invalid inputs like letters, special characters, or values outside min/max bounds",
          "content": "\n  it(\"handles invalid input gracefully\", () => {\n    const handleChange = jest.fn();\n    render(<GlassNumberInput label=\"Number\" onChange={handleChange} />);\n\n    const input = screen.getByRole(\"spinbutton\");\n    fireEvent.change(input, { target: { value: \"abc\" } });\n\n    expect(handleChange).not.toHaveBeenCalled();\n  });\n\n  it(\"prevents values outside min/max bounds\", () => {\n    const handleChange = jest.fn();\n    render(\n      <GlassNumberInput\n        label=\"Limited\"\n        min={0}\n        max={10}\n        onChange={handleChange}\n      />\n    );\n\n    const input = screen.getByRole(\"spinbutton\");\n    fireEvent.change(input, { target: { value: \"15\" } });\n\n    expect(handleChange).not.toHaveBeenCalledWith(15);\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx",
        "line": 124,
        "column": 5,
        "message": "Keyboard navigation test may have conflicting expectations - both increment and decrement from same initial value",
        "description": "Keyboard navigation test may have conflicting expectations - both increment and decrement from same initial value This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Test keyboard navigation with separate test cases or reset state between key events",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"handles keyboard navigation\", () => {\n    const handleChange = jest.fn();\n    const { rerender } = render(\n      <GlassNumberInput\n        label=\"Keyboard Test\"\n        defaultValue={5}\n        onChange={handleChange}\n      />,\n    );\n\n    const input = screen.getByRole(\"spinbutton\");\n\n    // Arrow up should increment\n    fireEvent.keyDown(input, { key: \"ArrowUp\" });\n    expect(handleChange).toHaveBeenCalledWith(6);\n\n    // Reset and test arrow down\n    handleChange.mockClear();\n    rerender(\n      <GlassNumberInput\n        label=\"Keyboard Test\"\n        defaultValue={5}\n        onChange={handleChange}\n      />\n    );\n\n    // Arrow down should decrement\n    fireEvent.keyDown(input, { key: \"ArrowDown\" });\n    expect(handleChange).toHaveBeenCalledWith(4);\n  });",
          "description": "Test keyboard navigation with separate test cases or reset state between key events",
          "content": "  it(\"handles keyboard navigation\", () => {\n    const handleChange = jest.fn();\n    const { rerender } = render(\n      <GlassNumberInput\n        label=\"Keyboard Test\"\n        defaultValue={5}\n        onChange={handleChange}\n      />,\n    );\n\n    const input = screen.getByRole(\"spinbutton\");\n\n    // Arrow up should increment\n    fireEvent.keyDown(input, { key: \"ArrowUp\" });\n    expect(handleChange).toHaveBeenCalledWith(6);\n\n    // Reset and test arrow down\n    handleChange.mockClear();\n    rerender(\n      <GlassNumberInput\n        label=\"Keyboard Test\"\n        defaultValue={5}\n        onChange={handleChange}\n      />\n    );\n\n    // Arrow down should decrement\n    fireEvent.keyDown(input, { key: \"ArrowDown\" });\n    expect(handleChange).toHaveBeenCalledWith(4);\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.test.tsx",
        "line": 53,
        "column": 29,
        "message": "Test assumes specific accessible names for increment/decrement buttons without verifying internationalization support",
        "description": "Test assumes specific accessible names for increment/decrement buttons without verifying internationalization support This code works but could be improved for better maintainability.",
        "suggestion": "Consider testing with data-testid or verifying that aria-labels are properly internationalized",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx",
        "line": 186,
        "column": 11,
        "message": "Button elements lack accessible labels and proper ARIA attributes",
        "description": "Button elements lack accessible labels and proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to buttons for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            onClick={() => setValue(0)}\n            className=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\"\n            aria-label=\"Reset value to 0\"\n          >\n            Reset to 0\n          </button>\n          <button\n            onClick={() => setValue(50)}\n            className=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\"\n            aria-label=\"Set value to 50\"\n          >\n            Set to 50\n          </button>\n          <button\n            onClick={() => setValue(undefined)}\n            className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm\"\n            aria-label=\"Clear value\"\n          >\n            Clear\n          </button>",
          "description": "Add aria-label attributes to buttons for screen reader accessibility",
          "content": "          <button\n            onClick={() => setValue(0)}\n            className=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\"\n            aria-label=\"Reset value to 0\"\n          >\n            Reset to 0\n          </button>\n          <button\n            onClick={() => setValue(50)}\n            className=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\"\n            aria-label=\"Set value to 50\"\n          >\n            Set to 50\n          </button>\n          <button\n            onClick={() => setValue(undefined)}\n            className=\"px-3 py-1 bg-gray-500 text-white rounded text-sm\"\n            aria-label=\"Clear value\"\n          >\n            Clear\n          </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx",
        "line": 3,
        "column": 10,
        "message": "Unused imports detected",
        "description": "Unused imports detected This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused imports to reduce bundle size",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { useState } from \"react\";",
          "description": "Remove unused imports to reduce bundle size",
          "content": "import { useState } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-number-input/glass-number-input.stories.tsx",
        "line": 212,
        "column": 9,
        "message": "Heading structure may be problematic without proper document hierarchy",
        "description": "Heading structure may be problematic without proper document hierarchy This code works but could be improved for better maintainability.",
        "suggestion": "Consider using semantic heading levels or role attributes for proper document structure",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/index.ts",
        "line": 4,
        "column": 42,
        "message": "Unnecessary trailing semicolon after export statement",
        "description": "Unnecessary trailing semicolon after export statement This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing semicolon as it's not required for export statements",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-notification\"",
          "description": "Remove the trailing semicolon as it's not required for export statements",
          "content": "export * from \"./glass-notification\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/index.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/index.ts",
        "line": 4,
        "column": 1,
        "message": "Barrel export without explicit type checking may cause runtime errors if the target module doesn't exist",
        "description": "Barrel export without explicit type checking may cause runtime errors if the target module doesn't exist This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding explicit imports or verify that './glass-notification' module exists and exports the expected items",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx",
        "line": 178,
        "column": 25,
        "message": "Dismiss button lacks proper accessibility group selector - 'group-hover:opacity-100' used without 'group' class on parent",
        "description": "Dismiss button lacks proper accessibility group selector - 'group-hover:opacity-100' used without 'group' class on parent This code works but could be improved for better maintainability.",
        "suggestion": "Add 'group' class to the parent notification button or use 'hover:opacity-100' instead",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  className={cn(\n                    \"border-[var(--liquid-glass-border)] border-b p-4 last:border-b-0\",\n                    \"group w-full cursor-pointer text-left hover:bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                    !notification.read && \"bg-blue-50/50 dark:bg-blue-950/20\",\n                  )}",
          "description": "Add 'group' class to the parent notification button or use 'hover:opacity-100' instead",
          "content": "                  className={cn(\n                    \"border-[var(--liquid-glass-border)] border-b p-4 last:border-b-0\",\n                    \"group w-full cursor-pointer text-left hover:bg-[var(--liquid-glass-bg)]\",\n                    microInteraction.gentle,\n                    !notification.read && \"bg-blue-50/50 dark:bg-blue-950/20\",\n                  )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx",
        "line": 169,
        "column": 21,
        "message": "Dismiss button lacks accessible label for screen readers",
        "description": "Dismiss button lacks accessible label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or title attribute to describe the dismiss action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    <button\n                      type=\"button\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDismiss?.(notification.id);\n                      }}\n                      className=\"rounded-lg p-1 text-[var(--text-tertiary)] opacity-0 transition-opacity hover:bg-[var(--liquid-glass-bg)] group-hover:opacity-100\"\n                      aria-label={`Dismiss notification: ${notification.title}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </button>",
          "description": "Add aria-label or title attribute to describe the dismiss action",
          "content": "                    <button\n                      type=\"button\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDismiss?.(notification.id);\n                      }}\n                      className=\"rounded-lg p-1 text-[var(--text-tertiary)] opacity-0 transition-opacity hover:bg-[var(--liquid-glass-bg)] group-hover:opacity-100\"\n                      aria-label={`Dismiss notification: ${notification.title}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx",
        "line": 50,
        "column": 19,
        "message": "formatTime function recreates Date object on every render for each notification",
        "description": "formatTime function recreates Date object on every render for each notification This implementation could impact application performance.",
        "suggestion": "Memoize the formatTime function or move it outside the component",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  AlertCircle,\n  AlertTriangle,\n  Bell,\n  CheckCircle,\n  Info,\n  X,\n} from \"lucide-react\";\nimport type React from \"react\";\nimport { useState, useCallback } from \"react\";",
          "description": "Memoize the formatTime function or move it outside the component",
          "content": "import {\n  AlertCircle,\n  AlertTriangle,\n  Bell,\n  CheckCircle,\n  Info,\n  X,\n} from \"lucide-react\";\nimport type React from \"react\";\nimport { useState, useCallback } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx",
        "line": 84,
        "column": 7,
        "message": "Potential memory leak - click outside handler not implemented for notification panel",
        "description": "Potential memory leak - click outside handler not implemented for notification panel This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add useEffect with click outside handler to close notification panel when clicking outside",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.tsx",
        "line": 160,
        "column": 25,
        "message": "Action button within notification button creates nested interactive elements",
        "description": "Action button within notification button creates nested interactive elements This code works but could be improved for better maintainability.",
        "suggestion": "Consider restructuring to avoid nested buttons or use div with role='button' for the parent",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 288,
        "column": 5,
        "message": "Memory leak potential - interval is created but cleanup may not work properly with useState return value",
        "description": "Memory leak potential - interval is created but cleanup may not work properly with useState return value This implementation could impact application performance.",
        "suggestion": "Use useEffect hook instead of useState for side effects like intervals",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    React.useEffect(() => {\n      const interval = setInterval(() => {\n        const types: Array<NotificationItem[\"type\"]> = [\n          \"success\",\n          \"error\",\n          \"warning\",\n          \"info\",\n          \"system\",\n        ];\n        const messages = [\n          \"New user signed up\",\n          \"Payment received\",\n          \"Server response slow\",\n          \"Backup completed\",\n          \"New message received\",\n        ];\n\n        const newNotification: NotificationItem = {\n          id: Date.now().toString(),\n          title: messages[Math.floor(Math.random() * messages.length)],\n          message: `Event occurred at ${new Date().toLocaleTimeString()}`,\n          type: types[Math.floor(Math.random() * types.length)],\n          timestamp: new Date(),\n          read: false,\n        };\n\n        setNotifications((prev) => [newNotification, ...prev].slice(0, 10));\n      }, 5000);\n\n      return () => clearInterval(interval);\n    }, []);",
          "description": "Use useEffect hook instead of useState for side effects like intervals",
          "content": "    React.useEffect(() => {\n      const interval = setInterval(() => {\n        const types: Array<NotificationItem[\"type\"]> = [\n          \"success\",\n          \"error\",\n          \"warning\",\n          \"info\",\n          \"system\",\n        ];\n        const messages = [\n          \"New user signed up\",\n          \"Payment received\",\n          \"Server response slow\",\n          \"Backup completed\",\n          \"New message received\",\n        ];\n\n        const newNotification: NotificationItem = {\n          id: Date.now().toString(),\n          title: messages[Math.floor(Math.random() * messages.length)],\n          message: `Event occurred at ${new Date().toLocaleTimeString()}`,\n          type: types[Math.floor(Math.random() * types.length)],\n          timestamp: new Date(),\n          read: false,\n        };\n\n        setNotifications((prev) => [newNotification, ...prev].slice(0, 10));\n      }, 5000);\n\n      return () => clearInterval(interval);\n    }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing import for React - using React.useEffect requires React import",
        "description": "Missing import for React - using React.useEffect requires React import This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add React import or import useEffect directly from react",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport React, { useState } from \"react\";",
          "description": "Add React import or import useEffect directly from react",
          "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport React, { useState } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 137,
        "column": 11,
        "message": "Interactive buttons lack proper semantic labeling for screen readers",
        "description": "Interactive buttons lack proper semantic labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-describedby attributes to buttons for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 139,
        "column": 14,
        "message": "Using Date.now().toString() for ID generation may cause collisions",
        "description": "Using Date.now().toString() for ID generation may cause collisions This implementation could impact application performance.",
        "suggestion": "Use crypto.randomUUID() or a proper ID generation library for unique IDs",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 297,
        "column": 16,
        "message": "Using Date.now().toString() for ID generation may cause collisions",
        "description": "Using Date.now().toString() for ID generation may cause collisions This implementation could impact application performance.",
        "suggestion": "Use crypto.randomUUID() or a proper ID generation library for unique IDs",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-notification/glass-notification.stories.tsx",
        "line": 415,
        "column": 9,
        "message": "Inline styles in JSX should be avoided for better performance and maintainability",
        "description": "Inline styles in JSX should be avoided for better performance and maintainability This violates code style conventions and may reduce readability.",
        "suggestion": "Move styles to a CSS file or use CSS-in-JS solution",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant re-export - the wildcard export already includes the named export",
        "description": "Redundant re-export - the wildcard export already includes the named export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant named export since the wildcard export on line 7 already exports everything",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Glass Modal Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-modal\";",
          "description": "Remove the redundant named export since the wildcard export on line 7 already exports everything",
          "content": "/**\n * Glass Modal Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-modal\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 1,
        "column": 1,
        "message": "Modal is missing focus trap implementation, which can cause keyboard navigation to escape the modal",
        "description": "Modal is missing focus trap implementation, which can cause keyboard navigation to escape the modal This will likely cause errors during execution.",
        "suggestion": "Implement focus trapping to ensure keyboard navigation stays within the modal when open",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 94,
        "column": 9,
        "message": "aria-describedby always references descriptionId even when children might not contain descriptive text",
        "description": "aria-describedby always references descriptionId even when children might not contain descriptive text This code works but could be improved for better maintainability.",
        "suggestion": "Only set aria-describedby when there is actual descriptive content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        aria-describedby={children ? descriptionId : undefined}",
          "description": "Only set aria-describedby when there is actual descriptive content",
          "content": "        aria-describedby={children ? descriptionId : undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-memory-leak-2",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 75,
        "column": 7,
        "message": "Event listener cleanup may not work properly due to stale closure in handleEscape callback",
        "description": "Event listener cleanup may not work properly due to stale closure in handleEscape callback This code works but could be improved for better maintainability.",
        "suggestion": "Move event listener inside useEffect to avoid stale closure issues",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Manage body scroll lock and keyboard events\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (closeOnEscape && event.key === \"Escape\") {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      // Lock body scroll\n      const scrollbarWidth =\n        window.innerWidth - document.documentElement.clientWidth;\n      document.body.style.overflow = \"hidden\";\n      document.body.style.paddingRight = `${scrollbarWidth}px`;\n\n      // Add escape key listener\n      document.addEventListener(\"keydown\", handleEscape);\n\n      // Focus management\n      if (initialFocus?.current) {\n        initialFocus.current.focus();\n      } else if (closeButtonRef.current) {\n        closeButtonRef.current.focus();\n      }\n    } else {\n      // Restore body scroll\n      document.body.style.overflow = \"\";\n      document.body.style.paddingRight = \"\";\n    }\n\n    return () => {\n      document.body.style.overflow = \"\";\n      document.body.style.paddingRight = \"\";\n      document.removeEventListener(\"keydown\", handleEscape);\n    };\n  }, [isOpen, closeOnEscape, onClose, initialFocus]);",
          "description": "Move event listener inside useEffect to avoid stale closure issues",
          "content": "  // Manage body scroll lock and keyboard events\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (closeOnEscape && event.key === \"Escape\") {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      // Lock body scroll\n      const scrollbarWidth =\n        window.innerWidth - document.documentElement.clientWidth;\n      document.body.style.overflow = \"hidden\";\n      document.body.style.paddingRight = `${scrollbarWidth}px`;\n\n      // Add escape key listener\n      document.addEventListener(\"keydown\", handleEscape);\n\n      // Focus management\n      if (initialFocus?.current) {\n        initialFocus.current.focus();\n      } else if (closeButtonRef.current) {\n        closeButtonRef.current.focus();\n      }\n    } else {\n      // Restore body scroll\n      document.body.style.overflow = \"\";\n      document.body.style.paddingRight = \"\";\n    }\n\n    return () => {\n      document.body.style.overflow = \"\";\n      document.body.style.paddingRight = \"\";\n      document.removeEventListener(\"keydown\", handleEscape);\n    };\n  }, [isOpen, closeOnEscape, onClose, initialFocus]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 142,
        "column": 12,
        "message": "Unnecessary wrapper div when rendering modal content directly",
        "description": "Unnecessary wrapper div when rendering modal content directly This implementation could impact application performance.",
        "suggestion": "Return modalContent directly instead of wrapping in additional div",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return modalContent;",
          "description": "Return modalContent directly instead of wrapping in additional div",
          "content": "    return modalContent;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 110,
        "column": 15,
        "message": "Close button should be placed after the title in DOM order for better screen reader navigation",
        "description": "Close button should be placed after the title in DOM order for better screen reader navigation This code works but could be improved for better maintainability.",
        "suggestion": "Move close button after the title element or use CSS to visually position it",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.tsx",
        "line": 77,
        "column": 7,
        "message": "No error boundary or error handling for focus management failures",
        "description": "No error boundary or error handling for focus management failures This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch around focus operations to handle cases where elements might not be focusable",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Focus management\n      try {\n        if (initialFocus?.current) {\n          initialFocus.current.focus();\n        } else if (closeButtonRef.current) {\n          closeButtonRef.current.focus();\n        }\n      } catch (error) {\n        console.warn('Failed to set initial focus in modal:', error);\n      }",
          "description": "Add try-catch around focus operations to handle cases where elements might not be focusable",
          "content": "      // Focus management\n      try {\n        if (initialFocus?.current) {\n          initialFocus.current.focus();\n        } else if (closeButtonRef.current) {\n          closeButtonRef.current.focus();\n        }\n      } catch (error) {\n        console.warn('Failed to set initial focus in modal:', error);\n      }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx-architecture-0",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx",
        "line": 9,
        "column": 3,
        "message": "Using require.cache manipulation for mocking is brittle and may not work reliably with TypeScript/bundlers",
        "description": "Using require.cache manipulation for mocking is brittle and may not work reliably with TypeScript/bundlers This code works but could be improved for better maintainability.",
        "suggestion": "Use proper mocking frameworks like jest.mock() or vi.mock() instead of manual require.cache manipulation",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx",
        "line": 26,
        "column": 20,
        "message": "Mock announcer.announce function is empty and may hide accessibility issues in tests",
        "description": "Mock announcer.announce function is empty and may hide accessibility issues in tests This code works but could be improved for better maintainability.",
        "suggestion": "Add proper mock implementation to track announce calls for accessibility testing",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "announce: vi.fn(),",
          "description": "Add proper mock implementation to track announce calls for accessibility testing",
          "content": "announce: vi.fn(),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx",
        "line": 270,
        "column": 25,
        "message": "Using querySelector in tests can be slower and less reliable than testing-library queries",
        "description": "Using querySelector in tests can be slower and less reliable than testing-library queries This implementation could impact application performance.",
        "suggestion": "Use testing-library queries like getByRole or getByTestId instead of querySelector",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx",
        "line": 245,
        "column": 18,
        "message": "Test assumes specific SVG structure for close button icon without verifying accessibility",
        "description": "Test assumes specific SVG structure for close button icon without verifying accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Test should verify the close button has proper accessible name rather than testing internal SVG structure",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.test.tsx",
        "line": 172,
        "column": 5,
        "message": "Test does not verify escape key behavior is actually handled, only checks prop existence",
        "description": "Test does not verify escape key behavior is actually handled, only checks prop existence This code works but could be improved for better maintainability.",
        "suggestion": "Add actual keyboard event simulation to test escape key functionality",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 617,
        "column": 13,
        "message": "Card component is used but not imported",
        "description": "Card component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Import the Card component or use GlassCard instead",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard>",
          "description": "Import the Card component or use GlassCard instead",
          "content": "        <GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 618,
        "column": 11,
        "message": "Card.Header component is used but not imported",
        "description": "Card.Header component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Use GlassCard components or import Card components",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"mb-4\">",
          "description": "Use GlassCard components or import Card components",
          "content": "          <div className=\"mb-4\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 619,
        "column": 13,
        "message": "Card.Title component is used but not imported",
        "description": "Card.Title component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Use appropriate heading element",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <h3 className=\"font-semibold text-lg mb-2\">Focus Management</h3>",
          "description": "Use appropriate heading element",
          "content": "            <h3 className=\"font-semibold text-lg mb-2\">Focus Management</h3>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 620,
        "column": 13,
        "message": "Card.Description component is used but not imported",
        "description": "Card.Description component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Use paragraph element with appropriate styling",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <p className=\"text-gray-600 text-sm dark:text-gray-400\">",
          "description": "Use paragraph element with appropriate styling",
          "content": "            <p className=\"text-gray-600 text-sm dark:text-gray-400\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-4",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 623,
        "column": 11,
        "message": "Card.Content component is used but not imported",
        "description": "Card.Content component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Use div with appropriate styling",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <div className=\"p-4\">",
          "description": "Use div with appropriate styling",
          "content": "          <div className=\"p-4\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-5",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 627,
        "column": 9,
        "message": "Closing Card component not imported",
        "description": "Closing Card component not imported This will likely cause errors during execution.",
        "suggestion": "Replace with GlassCard closing tag",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        </GlassCard>",
          "description": "Replace with GlassCard closing tag",
          "content": "        </GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-error-6",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 629,
        "column": 9,
        "message": "Card component is used but not imported",
        "description": "Card component is used but not imported This will likely cause errors during execution.",
        "suggestion": "Import the Card component or use GlassCard instead",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard>",
          "description": "Import the Card component or use GlassCard instead",
          "content": "        <GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 419,
        "column": 15,
        "message": "Interactive button missing accessible name or aria-label",
        "description": "Interactive button missing accessible name or aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                className=\"text-blue-500 text-sm hover:underline\"\n                aria-label=\"Reset password\"\n              >",
          "description": "Add aria-label to describe the action",
          "content": "              <button\n                type=\"button\"\n                className=\"text-blue-500 text-sm hover:underline\"\n                aria-label=\"Reset password\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 453,
        "column": 15,
        "message": "Form elements should have associated labels",
        "description": "Form elements should have associated labels This code works but could be improved for better maintainability.",
        "suggestion": "Add proper label association for the URL input",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div className=\"flex items-center gap-2 rounded-lg border border-gray-200 p-3 dark:border-gray-700\">\n              <label htmlFor=\"share-url\" className=\"sr-only\">Share URL</label>\n              <input\n                id=\"share-url\"\n                type=\"text\"\n                value=\"https://example.com/shared-content\"\n                readOnly\n                className=\"flex-1 bg-transparent text-sm outline-none\"\n                aria-label=\"Shareable URL\"\n              />",
          "description": "Add proper label association for the URL input",
          "content": "            <div className=\"flex items-center gap-2 rounded-lg border border-gray-200 p-3 dark:border-gray-700\">\n              <label htmlFor=\"share-url\" className=\"sr-only\">Share URL</label>\n              <input\n                id=\"share-url\"\n                type=\"text\"\n                value=\"https://example.com/shared-content\"\n                readOnly\n                className=\"flex-1 bg-transparent text-sm outline-none\"\n                aria-label=\"Shareable URL\"\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 463,
        "column": 17,
        "message": "Interactive button without accessible name",
        "description": "Interactive button without accessible name This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the copy action",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassButton size=\"sm\" variant=\"ghost\" aria-label=\"Copy URL to clipboard\">",
          "description": "Add aria-label to describe the copy action",
          "content": "              <GlassButton size=\"sm\" variant=\"ghost\" aria-label=\"Copy URL to clipboard\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-performance-10",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 97,
        "column": 5,
        "message": "Multiple state variables that could be consolidated",
        "description": "Multiple state variables that could be consolidated This implementation could impact application performance.",
        "suggestion": "Consider using a single state object with useReducer for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx-performance-11",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-modal/glass-modal.stories.tsx",
        "line": 140,
        "column": 5,
        "message": "Multiple state variables that could be consolidated",
        "description": "Multiple state variables that could be consolidated This implementation could impact application performance.",
        "suggestion": "Consider using a single state object with useReducer for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/index.ts",
        "line": 1,
        "column": 1,
        "message": "Inconsistent comment formatting - mixed single-line and block comment styles",
        "description": "Inconsistent comment formatting - mixed single-line and block comment styles This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent comment style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-mobile-nav Component Export\n * Re-export everything for compatibility\n */",
          "description": "Use consistent comment style throughout the file",
          "content": "/**\n * glass-mobile-nav Component Export\n * Re-export everything for compatibility\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/index.ts",
        "line": 4,
        "column": 41,
        "message": "Unnecessary trailing semicolon after export statement",
        "description": "Unnecessary trailing semicolon after export statement This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing semicolon from export statement",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-mobile-nav\"",
          "description": "Remove trailing semicolon from export statement",
          "content": "export * from \"./glass-mobile-nav\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 269,
        "column": 15,
        "message": "Missing keyboard navigation for expandable menu items - chevron animation should be accessible to screen readers",
        "description": "Missing keyboard navigation for expandable menu items - chevron animation should be accessible to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative chevron icon to prevent screen reader confusion",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <motion.div\n                animate={{ rotate: isExpanded ? 90 : 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"flex-shrink-0\"\n                aria-hidden=\"true\"\n              >\n                <svg\n                  className=\"h-4 w-4 text-[var(--text-secondary)]\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 5l7 7-7 7\"\n                  />\n                </svg>\n              </motion.div>",
          "description": "Add aria-hidden='true' to decorative chevron icon to prevent screen reader confusion",
          "content": "              <motion.div\n                animate={{ rotate: isExpanded ? 90 : 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"flex-shrink-0\"\n                aria-hidden=\"true\"\n              >\n                <svg\n                  className=\"h-4 w-4 text-[var(--text-secondary)]\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 5l7 7-7 7\"\n                  />\n                </svg>\n              </motion.div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 193,
        "column": 5,
        "message": "Document body style manipulation may cause layout thrashing when multiple components modify overflow",
        "description": "Document body style manipulation may cause layout thrashing when multiple components modify overflow This implementation could impact application performance.",
        "suggestion": "Use a centralized body scroll lock manager or CSS class-based approach to prevent conflicts",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 177,
        "column": 5,
        "message": "Focus trap is incomplete - focus should be trapped within the modal when open",
        "description": "Focus trap is incomplete - focus should be trapped within the modal when open This code works but could be improved for better maintainability.",
        "suggestion": "Implement proper focus trapping that cycles focus between first and last focusable elements",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 157,
        "column": 5,
        "message": "Potential memory leak - document event listener cleanup may not execute if component unmounts while isOpen is false",
        "description": "Potential memory leak - document event listener cleanup may not execute if component unmounts while isOpen is false This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move event listener cleanup outside the early return condition",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Handle click outside\n    useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (\n          isOpen &&\n          drawerRef.current &&\n          !drawerRef.current.contains(event.target as Node) &&\n          hamburgerRef.current &&\n          !hamburgerRef.current.contains(event.target as Node)\n        ) {\n          setIsOpen(false);\n        }\n      };\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () =>\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [isOpen]);",
          "description": "Move event listener cleanup outside the early return condition",
          "content": "    // Handle click outside\n    useEffect(() => {\n      const handleClickOutside = (event: MouseEvent) => {\n        if (\n          isOpen &&\n          drawerRef.current &&\n          !drawerRef.current.contains(event.target as Node) &&\n          hamburgerRef.current &&\n          !hamburgerRef.current.contains(event.target as Node)\n        ) {\n          setIsOpen(false);\n        }\n      };\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () =>\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [isOpen]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 384,
        "column": 9,
        "message": "Missing role and proper ARIA attributes for hamburger button that controls modal",
        "description": "Missing role and proper ARIA attributes for hamburger button that controls modal This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button' and proper ARIA attributes for modal control",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          ref={hamburgerRef}\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className={cn(\n            hamburgerVariants({ size, isOpen: isOpen ? \"true\" : \"false\" }),\n          )}\n          aria-label={hamburgerLabel}\n          aria-expanded={isOpen}\n          aria-controls={navId}\n          aria-haspopup=\"dialog\"\n        >",
          "description": "Add role='button' and proper ARIA attributes for modal control",
          "content": "        <button\n          ref={hamburgerRef}\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className={cn(\n            hamburgerVariants({ size, isOpen: isOpen ? \"true\" : \"false\" }),\n          )}\n          aria-label={hamburgerLabel}\n          aria-expanded={isOpen}\n          aria-controls={navId}\n          aria-haspopup=\"dialog\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.tsx",
        "line": 206,
        "column": 5,
        "message": "Recursive renderNavItem function recreated on every render - should be memoized",
        "description": "Recursive renderNavItem function recreated on every render - should be memoized This implementation could impact application performance.",
        "suggestion": "Use useCallback to memoize the renderNavItem function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Render navigation item\n    const renderNavItem = useCallback((item: NavItem, level = 0) => {\n      const isActive = activeItemId === item.id;\n      const isExpanded = expandedItems.has(item.id);\n      const hasChildren = item.children && item.children.length > 0;\n\n      return (\n        <div key={item.id}>\n          <button\n            type=\"button\"\n            onClick={() => handleItemClick(item)}\n            disabled={item.disabled}\n            className={cn(\n              navItemVariants({ size, isActive: isActive ? \"true\" : \"false\" }),\n              item.disabled && \"opacity-50 cursor-not-allowed\",\n              level > 0 && \"ml-4 border-l border-[var(--liquid-glass-border)] pl-4\",\n            )}\n            aria-expanded={hasChildren ? isExpanded : undefined}\n            aria-current={isActive ? \"page\" : undefined}\n          >\n            {item.icon && (\n              <span className=\"flex-shrink-0 text-[var(--text-secondary)]\">\n                {item.icon}\n              </span>\n            )}\n\n            <span className=\"flex-1 text-left\">{item.label}</span>\n\n            {item.badge && (\n              <span className=\"flex h-5 min-w-[20px] items-center justify-center rounded-full bg-blue-500 px-1.5 text-xs font-medium text-white\">\n                {item.badge}\n              </span>\n            )}\n\n            {hasChildren && (\n              <motion.div\n                animate={{ rotate: isExpanded ? 90 : 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"flex-shrink-0\"\n                aria-hidden=\"true\"\n              >\n                <svg\n                  className=\"h-4 w-4 text-[var(--text-secondary)]\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 5l7 7-7 7\"\n                  />\n                </svg>\n              </motion.div>\n            )}\n          </button>\n\n          {/* Render children */}\n          <AnimatePresence>\n            {hasChildren && isExpanded && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"py-1\">\n                  {item.children?.map((child) =>\n                    renderNavItem(child, level + 1),\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      );\n    }, [activeItemId, expandedItems, handleItemClick, size]);",
          "description": "Use useCallback to memoize the renderNavItem function",
          "content": "    // Render navigation item\n    const renderNavItem = useCallback((item: NavItem, level = 0) => {\n      const isActive = activeItemId === item.id;\n      const isExpanded = expandedItems.has(item.id);\n      const hasChildren = item.children && item.children.length > 0;\n\n      return (\n        <div key={item.id}>\n          <button\n            type=\"button\"\n            onClick={() => handleItemClick(item)}\n            disabled={item.disabled}\n            className={cn(\n              navItemVariants({ size, isActive: isActive ? \"true\" : \"false\" }),\n              item.disabled && \"opacity-50 cursor-not-allowed\",\n              level > 0 && \"ml-4 border-l border-[var(--liquid-glass-border)] pl-4\",\n            )}\n            aria-expanded={hasChildren ? isExpanded : undefined}\n            aria-current={isActive ? \"page\" : undefined}\n          >\n            {item.icon && (\n              <span className=\"flex-shrink-0 text-[var(--text-secondary)]\">\n                {item.icon}\n              </span>\n            )}\n\n            <span className=\"flex-1 text-left\">{item.label}</span>\n\n            {item.badge && (\n              <span className=\"flex h-5 min-w-[20px] items-center justify-center rounded-full bg-blue-500 px-1.5 text-xs font-medium text-white\">\n                {item.badge}\n              </span>\n            )}\n\n            {hasChildren && (\n              <motion.div\n                animate={{ rotate: isExpanded ? 90 : 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"flex-shrink-0\"\n                aria-hidden=\"true\"\n              >\n                <svg\n                  className=\"h-4 w-4 text-[var(--text-secondary)]\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9 5l7 7-7 7\"\n                  />\n                </svg>\n              </motion.div>\n            )}\n          </button>\n\n          {/* Render children */}\n          <AnimatePresence>\n            {hasChildren && isExpanded && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"py-1\">\n                  {item.children?.map((child) =>\n                    renderNavItem(child, level + 1),\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      );\n    }, [activeItemId, expandedItems, handleItemClick, size]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx",
        "line": 286,
        "column": 7,
        "message": "Potential false positive in overlay test - the selector logic is incorrect",
        "description": "Potential false positive in overlay test - the selector logic is incorrect This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "The test should look for a specific overlay element, not check if any button has overlay classes",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    await waitFor(() => {\n      // Should not render overlay\n      const overlay = document.querySelector('[data-testid=\"nav-overlay\"]');\n      expect(overlay).not.toBeInTheDocument();\n    });",
          "description": "The test should look for a specific overlay element, not check if any button has overlay classes",
          "content": "    await waitFor(() => {\n      // Should not render overlay\n      const overlay = document.querySelector('[data-testid=\"nav-overlay\"]');\n      expect(overlay).not.toBeInTheDocument();\n    });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing accessibility test for keyboard navigation within drawer items",
        "description": "Missing accessibility test for keyboard navigation within drawer items This code works but could be improved for better maintainability.",
        "suggestion": "Add test cases for Tab key navigation and Enter/Space key activation of drawer items",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "\n  it(\"supports keyboard navigation within drawer\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const homeButton = screen.getByText(\"Home\");\n      fireEvent.keyDown(homeButton, { key: \"Enter\" });\n      // Should handle Enter key activation\n      \n      fireEvent.keyDown(homeButton, { key: \" \" });\n      // Should handle Space key activation\n    });\n  });\n\n  it(\"supports tab navigation through menu items\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const navigation = screen.getByRole(\"navigation\");\n      fireEvent.keyDown(navigation, { key: \"Tab\" });\n      // Should move focus to next focusable element\n    });\n  });",
          "description": "Add test cases for Tab key navigation and Enter/Space key activation of drawer items",
          "content": "\n  it(\"supports keyboard navigation within drawer\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const homeButton = screen.getByText(\"Home\");\n      fireEvent.keyDown(homeButton, { key: \"Enter\" });\n      // Should handle Enter key activation\n      \n      fireEvent.keyDown(homeButton, { key: \" \" });\n      // Should handle Space key activation\n    });\n  });\n\n  it(\"supports tab navigation through menu items\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const navigation = screen.getByRole(\"navigation\");\n      fireEvent.keyDown(navigation, { key: \"Tab\" });\n      // Should move focus to next focusable element\n    });\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing test for focus management when drawer opens and closes",
        "description": "Missing test for focus management when drawer opens and closes This code works but could be improved for better maintainability.",
        "suggestion": "Add test to verify focus is properly managed when drawer opens/closes for screen reader users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "\n  it(\"manages focus correctly when opening and closing drawer\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      // Focus should move into the drawer\n      const navigation = screen.getByRole(\"navigation\");\n      expect(navigation).toBeInTheDocument();\n    });\n\n    const closeButton = screen.getByLabelText(\"Close navigation menu\");\n    fireEvent.click(closeButton);\n\n    await waitFor(() => {\n      // Focus should return to hamburger button\n      expect(hamburgerButton).toHaveFocus();\n    });\n  });",
          "description": "Add test to verify focus is properly managed when drawer opens/closes for screen reader users",
          "content": "\n  it(\"manages focus correctly when opening and closing drawer\", async () => {\n    render(<GlassMobileNav items={mockNavItems} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      // Focus should move into the drawer\n      const navigation = screen.getByRole(\"navigation\");\n      expect(navigation).toBeInTheDocument();\n    });\n\n    const closeButton = screen.getByLabelText(\"Close navigation menu\");\n    fireEvent.click(closeButton);\n\n    await waitFor(() => {\n      // Focus should return to hamburger button\n      expect(hamburgerButton).toHaveFocus();\n    });\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing test for performance with large number of navigation items",
        "description": "Missing test for performance with large number of navigation items This implementation could impact application performance.",
        "suggestion": "Add test case with many navigation items to ensure component handles large lists efficiently",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "\n  it(\"handles large number of navigation items efficiently\", async () => {\n    const manyItems: NavItem[] = Array.from({ length: 100 }, (_, i) => ({\n      id: `item-${i}`,\n      label: `Item ${i}`,\n      icon: <Home className=\"h-5 w-5\" />,\n    }));\n\n    const startTime = performance.now();\n    render(<GlassMobileNav items={manyItems} />);\n    const renderTime = performance.now() - startTime;\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    const openStartTime = performance.now();\n    fireEvent.click(hamburgerButton);\n    \n    await waitFor(() => {\n      expect(screen.getByRole(\"navigation\")).toBeInTheDocument();\n    });\n    \n    const openTime = performance.now() - openStartTime;\n    \n    // Performance assertions (adjust thresholds as needed)\n    expect(renderTime).toBeLessThan(100); // 100ms render threshold\n    expect(openTime).toBeLessThan(200); // 200ms open threshold\n  });",
          "description": "Add test case with many navigation items to ensure component handles large lists efficiently",
          "content": "\n  it(\"handles large number of navigation items efficiently\", async () => {\n    const manyItems: NavItem[] = Array.from({ length: 100 }, (_, i) => ({\n      id: `item-${i}`,\n      label: `Item ${i}`,\n      icon: <Home className=\"h-5 w-5\" />,\n    }));\n\n    const startTime = performance.now();\n    render(<GlassMobileNav items={manyItems} />);\n    const renderTime = performance.now() - startTime;\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    const openStartTime = performance.now();\n    fireEvent.click(hamburgerButton);\n    \n    await waitFor(() => {\n      expect(screen.getByRole(\"navigation\")).toBeInTheDocument();\n    });\n    \n    const openTime = performance.now() - openStartTime;\n    \n    // Performance assertions (adjust thresholds as needed)\n    expect(renderTime).toBeLessThan(100); // 100ms render threshold\n    expect(openTime).toBeLessThan(200); // 200ms open threshold\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing test cases for error scenarios and edge cases",
        "description": "Missing test cases for error scenarios and edge cases This code works but could be improved for better maintainability.",
        "suggestion": "Add test cases for empty items array, malformed items, and error handling in callbacks",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "\n  it(\"handles empty items array gracefully\", async () => {\n    render(<GlassMobileNav items={[]} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const navigation = screen.getByRole(\"navigation\");\n      expect(navigation).toBeInTheDocument();\n      // Should not crash with empty items\n    });\n  });\n\n  it(\"handles malformed navigation items\", async () => {\n    const malformedItems: NavItem[] = [\n      { id: \"\", label: \"\" }, // Empty id and label\n      { id: \"test\", label: \"Test\" }, // Valid item\n    ];\n\n    expect(() => {\n      render(<GlassMobileNav items={malformedItems} />);\n    }).not.toThrow();\n  });\n\n  it(\"handles errors in onItemClick callback\", async () => {\n    const errorCallback = jest.fn().mockImplementation(() => {\n      throw new Error(\"Callback error\");\n    });\n\n    render(<GlassMobileNav items={mockNavItems} onItemClick={errorCallback} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const homeButton = screen.getByText(\"Home\");\n      expect(() => fireEvent.click(homeButton)).not.toThrow();\n    });\n  });",
          "description": "Add test cases for empty items array, malformed items, and error handling in callbacks",
          "content": "\n  it(\"handles empty items array gracefully\", async () => {\n    render(<GlassMobileNav items={[]} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const navigation = screen.getByRole(\"navigation\");\n      expect(navigation).toBeInTheDocument();\n      // Should not crash with empty items\n    });\n  });\n\n  it(\"handles malformed navigation items\", async () => {\n    const malformedItems: NavItem[] = [\n      { id: \"\", label: \"\" }, // Empty id and label\n      { id: \"test\", label: \"Test\" }, // Valid item\n    ];\n\n    expect(() => {\n      render(<GlassMobileNav items={malformedItems} />);\n    }).not.toThrow();\n  });\n\n  it(\"handles errors in onItemClick callback\", async () => {\n    const errorCallback = jest.fn().mockImplementation(() => {\n      throw new Error(\"Callback error\");\n    });\n\n    render(<GlassMobileNav items={mockNavItems} onItemClick={errorCallback} />);\n\n    const hamburgerButton = screen.getByLabelText(\"Open navigation menu\");\n    fireEvent.click(hamburgerButton);\n\n    await waitFor(() => {\n      const homeButton = screen.getByText(\"Home\");\n      expect(() => fireEvent.click(homeButton)).not.toThrow();\n    });\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx",
        "line": 78,
        "column": 11,
        "message": "Missing alt text or aria-label for icon elements that may not be properly announced by screen readers",
        "description": "Missing alt text or aria-label for icon elements that may not be properly announced by screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-hidden attributes to icon elements, or ensure the parent component handles accessibility properly",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx",
        "line": 78,
        "column": 11,
        "message": "React components are being recreated on every render in story functions",
        "description": "React components are being recreated on every render in story functions This implementation could impact application performance.",
        "suggestion": "Move static icon components outside of the array definition or memoize them to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Move icons outside to prevent recreation\nconst homeIcon = <Home className=\"h-5 w-5\" />;\nconst userIcon = <User className=\"h-5 w-5\" />;\nconst settingsIcon = <Settings className=\"h-5 w-5\" />;\nconst bellIcon = <Bell className=\"h-5 w-5\" />;\nconst bookOpenIcon = <BookOpen className=\"h-5 w-5\" />;\nconst cameraIcon = <Camera className=\"h-4 w-4\" />;\nconst musicIcon = <Music className=\"h-4 w-4\" />;\nconst messageCircleIcon = <MessageCircle className=\"h-5 w-5\" />;\n\nconst basicNavItems: NavItem[] = [\n  {\n    id: \"home\",\n    label: \"Home\",\n    icon: homeIcon,\n  },\n  {\n    id: \"profile\",\n    label: \"Profile\",\n    icon: userIcon,\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: settingsIcon,\n  },\n  {\n    id: \"notifications\",\n    label: \"Notifications\",\n    icon: bellIcon,\n    badge: 3,\n  },\n];\n\nconst nestedNavItems: NavItem[] = [\n  {\n    id: \"home\",\n    label: \"Home\",\n    icon: homeIcon,\n  },\n  {\n    id: \"profile\",\n    label: \"Profile\",\n    icon: userIcon,\n    children: [\n      {\n        id: \"edit-profile\",\n        label: \"Edit Profile\",\n        icon: <Settings className=\"h-4 w-4\" />,\n      },\n      {\n        id: \"preferences\",\n        label: \"Preferences\",\n        icon: <Settings className=\"h-4 w-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"content\",\n    label: \"Content\",\n    icon: bookOpenIcon,\n    children: [\n      {\n        id: \"articles\",\n        label: \"Articles\",\n        icon: <BookOpen className=\"h-4 w-4\" />,\n      },\n      {\n        id: \"videos\",\n        label: \"Videos\",\n        icon: cameraIcon,\n      },\n      {\n        id: \"music\",\n        label: \"Music\",\n        icon: musicIcon,\n      },\n    ],\n  },\n  {\n    id: \"messages\",\n    label: \"Messages\",\n    icon: messageCircleIcon,\n    badge: \"12\",\n  },\n];",
          "description": "Move static icon components outside of the array definition or memoize them to prevent unnecessary re-renders",
          "content": "// Move icons outside to prevent recreation\nconst homeIcon = <Home className=\"h-5 w-5\" />;\nconst userIcon = <User className=\"h-5 w-5\" />;\nconst settingsIcon = <Settings className=\"h-5 w-5\" />;\nconst bellIcon = <Bell className=\"h-5 w-5\" />;\nconst bookOpenIcon = <BookOpen className=\"h-5 w-5\" />;\nconst cameraIcon = <Camera className=\"h-4 w-4\" />;\nconst musicIcon = <Music className=\"h-4 w-4\" />;\nconst messageCircleIcon = <MessageCircle className=\"h-5 w-5\" />;\n\nconst basicNavItems: NavItem[] = [\n  {\n    id: \"home\",\n    label: \"Home\",\n    icon: homeIcon,\n  },\n  {\n    id: \"profile\",\n    label: \"Profile\",\n    icon: userIcon,\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: settingsIcon,\n  },\n  {\n    id: \"notifications\",\n    label: \"Notifications\",\n    icon: bellIcon,\n    badge: 3,\n  },\n];\n\nconst nestedNavItems: NavItem[] = [\n  {\n    id: \"home\",\n    label: \"Home\",\n    icon: homeIcon,\n  },\n  {\n    id: \"profile\",\n    label: \"Profile\",\n    icon: userIcon,\n    children: [\n      {\n        id: \"edit-profile\",\n        label: \"Edit Profile\",\n        icon: <Settings className=\"h-4 w-4\" />,\n      },\n      {\n        id: \"preferences\",\n        label: \"Preferences\",\n        icon: <Settings className=\"h-4 w-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"content\",\n    label: \"Content\",\n    icon: bookOpenIcon,\n    children: [\n      {\n        id: \"articles\",\n        label: \"Articles\",\n        icon: <BookOpen className=\"h-4 w-4\" />,\n      },\n      {\n        id: \"videos\",\n        label: \"Videos\",\n        icon: cameraIcon,\n      },\n      {\n        id: \"music\",\n        label: \"Music\",\n        icon: musicIcon,\n      },\n    ],\n  },\n  {\n    id: \"messages\",\n    label: \"Messages\",\n    icon: messageCircleIcon,\n    badge: \"12\",\n  },\n];"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx",
        "line": 162,
        "column": 12,
        "message": "Inconsistent badge types - mixing number and string types",
        "description": "Inconsistent badge types - mixing number and string types This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent badge types throughout the examples, preferably numbers for counts and strings for labels",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    badge: 12,",
          "description": "Use consistent badge types throughout the examples, preferably numbers for counts and strings for labels",
          "content": "    badge: 12,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx",
        "line": 237,
        "column": 3,
        "message": "Components are being recreated in render functions without useMemo or useCallback optimization",
        "description": "Components are being recreated in render functions without useMemo or useCallback optimization This implementation could impact application performance.",
        "suggestion": "Wrap static arrays and callback functions with useMemo and useCallback respectively to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Wrap static arrays and callback functions with useMemo and useCallback respectively to prevent unnecessary re-renders",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-mobile-nav/glass-mobile-nav.stories.tsx",
        "line": 246,
        "column": 16,
        "message": "Magic number timeout without explanation",
        "description": "Magic number timeout without explanation This violates code style conventions and may reduce readability.",
        "suggestion": "Extract magic number to a named constant or add a comment explaining the timeout duration",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const FEEDBACK_DISPLAY_DURATION = 2000; // 2 seconds\n      setTimeout(() => setClickedItem(null), FEEDBACK_DISPLAY_DURATION);",
          "description": "Extract magic number to a named constant or add a comment explaining the timeout duration",
          "content": "      const FEEDBACK_DISPLAY_DURATION = 2000; // 2 seconds\n      setTimeout(() => setClickedItem(null), FEEDBACK_DISPLAY_DURATION);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - the wildcard export already includes the named export",
        "description": "Redundant export statement - the wildcard export already includes the named export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the explicit named export since the wildcard export on line 7 already exports everything from the module",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-loading Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-loading\";",
          "description": "Remove the explicit named export since the wildcard export on line 7 already exports everything from the module",
          "content": "/**\n * glass-loading Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-loading\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx",
        "line": 81,
        "column": 5,
        "message": "Missing ARIA attributes for loading component - screen readers cannot properly announce loading state",
        "description": "Missing ARIA attributes for loading component - screen readers cannot properly announce loading state This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live, aria-label, and role attributes to make loading state accessible to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n        ref={ref}\n        className={cn(\n          \"liquid-glass\",\n          \"flex flex-col items-center justify-center space-y-3\",\n          className,\n        )}\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-label={text || \"Loading\"}\n        {...props}\n      >",
          "description": "Add aria-live, aria-label, and role attributes to make loading state accessible to screen readers",
          "content": "    <div\n        ref={ref}\n        className={cn(\n          \"liquid-glass\",\n          \"flex flex-col items-center justify-center space-y-3\",\n          className,\n        )}\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-label={text || \"Loading\"}\n        {...props}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx",
        "line": 13,
        "column": 5,
        "message": "Object creation inside render function causes unnecessary re-renders",
        "description": "Object creation inside render function causes unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move size configuration objects outside the component to prevent recreation on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const sizeClasses = {\n  sm: \"w-4 h-4\",\n  md: \"w-6 h-6\",\n  lg: \"w-8 h-8\",\n  xl: \"w-12 h-12\",\n};\n\nconst dotSizes = {\n  sm: \"w-1 h-1\",\n  md: \"w-1.5 h-1.5\",\n  lg: \"w-2 h-2\",\n  xl: \"w-3 h-3\",\n};\n\nconst barSizes = {\n  sm: \"w-0.5 h-3\",\n  md: \"w-0.5 h-4\",\n  lg: \"w-1 h-5\",\n  xl: \"w-1 h-6\",\n};\n\nexport const GlassLoading = React.forwardRef<HTMLDivElement, GlassLoadingProps>(\n  ({ size = \"md\", variant = \"spinner\", className, text, ...props }, ref) => {",
          "description": "Move size configuration objects outside the component to prevent recreation on every render",
          "content": "const sizeClasses = {\n  sm: \"w-4 h-4\",\n  md: \"w-6 h-6\",\n  lg: \"w-8 h-8\",\n  xl: \"w-12 h-12\",\n};\n\nconst dotSizes = {\n  sm: \"w-1 h-1\",\n  md: \"w-1.5 h-1.5\",\n  lg: \"w-2 h-2\",\n  xl: \"w-3 h-3\",\n};\n\nconst barSizes = {\n  sm: \"w-0.5 h-3\",\n  md: \"w-0.5 h-4\",\n  lg: \"w-1 h-5\",\n  xl: \"w-1 h-6\",\n};\n\nexport const GlassLoading = React.forwardRef<HTMLDivElement, GlassLoadingProps>(\n  ({ size = \"md\", variant = \"spinner\", className, text, ...props }, ref) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx",
        "line": 47,
        "column": 13,
        "message": "Inline style objects in map functions create new objects on each render",
        "description": "Inline style objects in map functions create new objects on each render This implementation could impact application performance.",
        "suggestion": "Use CSS classes with CSS custom properties or memoize style objects to avoid recreation",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx",
        "line": 66,
        "column": 13,
        "message": "Inline style objects in map functions create new objects on each render",
        "description": "Inline style objects in map functions create new objects on each render This implementation could impact application performance.",
        "suggestion": "Use CSS classes with CSS custom properties or memoize style objects to avoid recreation",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.tsx",
        "line": 92,
        "column": 9,
        "message": "Loading text should be properly associated with loading indicator for screen readers",
        "description": "Loading text should be properly associated with loading indicator for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Use aria-describedby to associate text with loading indicator or include text in aria-label",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {text && (\n          <p \n            className=\"animate-pulse text-gray-600 text-sm dark:text-gray-400\"\n            aria-hidden=\"true\"\n          >\n            {text}\n          </p>\n        )}",
          "description": "Use aria-describedby to associate text with loading indicator or include text in aria-label",
          "content": "        {text && (\n          <p \n            className=\"animate-pulse text-gray-600 text-sm dark:text-gray-400\"\n            aria-hidden=\"true\"\n          >\n            {text}\n          </p>\n        )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 56,
        "column": 46,
        "message": "Missing aria-label attribute in GlassCard component usage",
        "description": "Missing aria-label attribute in GlassCard component usage This code works but could be improved for better maintainability.",
        "suggestion": "Add proper aria-label attribute to GlassCard for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCard aria-label=\"Glass card example\">",
          "description": "Add proper aria-label attribute to GlassCard for screen readers",
          "content": "<GlassCard aria-label=\"Glass card example\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 207,
        "column": 19,
        "message": "Event handler wrapping creates unnecessary function call that could fail",
        "description": "Event handler wrapping creates unnecessary function call that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Simplify event handler to call function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"save\");\n                }\n              }}",
          "description": "Simplify event handler to call function directly",
          "content": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"save\");\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 228,
        "column": 19,
        "message": "Event handler wrapping creates unnecessary function call that could fail",
        "description": "Event handler wrapping creates unnecessary function call that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Simplify event handler to call function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"upload\");\n                }\n              }}",
          "description": "Simplify event handler to call function directly",
          "content": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"upload\");\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 249,
        "column": 19,
        "message": "Event handler wrapping creates unnecessary function call that could fail",
        "description": "Event handler wrapping creates unnecessary function call that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Simplify event handler to call function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"download\");\n                }\n              }}",
          "description": "Simplify event handler to call function directly",
          "content": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"download\");\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 270,
        "column": 19,
        "message": "Event handler wrapping creates unnecessary function call that could fail",
        "description": "Event handler wrapping creates unnecessary function call that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Simplify event handler to call function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"send\");\n                }\n              }}",
          "description": "Simplify event handler to call function directly",
          "content": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  simulateLoading(\"send\");\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 415,
        "column": 15,
        "message": "Label htmlFor attribute references an ID that doesn't match the actual input ID",
        "description": "Label htmlFor attribute references an ID that doesn't match the actual input ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure label htmlFor matches the actual input ID for proper accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label\n                htmlFor=\"show-text-checkbox\"\n                className=\"flex items-center gap-2\"\n              >\n                <input\n                  id=\"show-text-checkbox\"\n                  type=\"checkbox\"\n                  checked={showText}\n                  onChange={(e) => setShowText(e.target.checked)}\n                />\n                <span className=\"text-sm text-white/90\">Show Text</span>\n              </label>",
          "description": "Ensure label htmlFor matches the actual input ID for proper accessibility",
          "content": "              <label\n                htmlFor=\"show-text-checkbox\"\n                className=\"flex items-center gap-2\"\n              >\n                <input\n                  id=\"show-text-checkbox\"\n                  type=\"checkbox\"\n                  checked={showText}\n                  onChange={(e) => setShowText(e.target.checked)}\n                />\n                <span className=\"text-sm text-white/90\">Show Text</span>\n              </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 425,
        "column": 15,
        "message": "Label htmlFor attribute references an ID that doesn't match the actual input ID",
        "description": "Label htmlFor attribute references an ID that doesn't match the actual input ID This code works but could be improved for better maintainability.",
        "suggestion": "Ensure label htmlFor matches the actual input ID for proper accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label\n                htmlFor=\"is-loading-checkbox\"\n                className=\"flex items-center gap-2\"\n              >\n                <input\n                  id=\"is-loading-checkbox\"\n                  type=\"checkbox\"\n                  checked={isLoading}\n                  onChange={(e) => setIsLoading(e.target.checked)}\n                />\n                <span className=\"text-sm text-white/90\">Is Loading</span>\n              </label>",
          "description": "Ensure label htmlFor matches the actual input ID for proper accessibility",
          "content": "              <label\n                htmlFor=\"is-loading-checkbox\"\n                className=\"flex items-center gap-2\"\n              >\n                <input\n                  id=\"is-loading-checkbox\"\n                  type=\"checkbox\"\n                  checked={isLoading}\n                  onChange={(e) => setIsLoading(e.target.checked)}\n                />\n                <span className=\"text-sm text-white/90\">Is Loading</span>\n              </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-loading/glass-loading.stories.tsx",
        "line": 475,
        "column": 19,
        "message": "Event handler wrapping creates unnecessary function call that could fail",
        "description": "Event handler wrapping creates unnecessary function call that could fail This code works but could be improved for better maintainability.",
        "suggestion": "Simplify event handler to call function directly",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  setShowMany(!showMany);\n                }\n              }}",
          "description": "Simplify event handler to call function directly",
          "content": "onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  setShowMany(!showMany);\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/index.ts",
        "line": 1,
        "column": 1,
        "message": "Multi-line comment should be converted to single-line comment for better consistency",
        "description": "Multi-line comment should be converted to single-line comment for better consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Use single-line comment for brief descriptions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// glass-input Component Export",
          "description": "Use single-line comment for brief descriptions",
          "content": "// glass-input Component Export"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant comment - the comment on line 4 repeats information already conveyed by the export statement",
        "description": "Redundant comment - the comment on line 4 repeats information already conveyed by the export statement This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant comment as the export statement is self-explanatory",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 55,
        "column": 7,
        "message": "Potential inconsistency in controlled vs uncontrolled component behavior",
        "description": "Potential inconsistency in controlled vs uncontrolled component behavior This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Initialize currentValue based on controlled/uncontrolled pattern consistently",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [currentValue, setCurrentValue] = useState(() => {\n      if (value !== undefined) {\n        return value;\n      }\n      return props.defaultValue || \"\";\n    });",
          "description": "Initialize currentValue based on controlled/uncontrolled pattern consistently",
          "content": "    const [currentValue, setCurrentValue] = useState(() => {\n      if (value !== undefined) {\n        return value;\n      }\n      return props.defaultValue || \"\";\n    });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 85,
        "column": 9,
        "message": "Creating synthetic events incorrectly - this may not work as expected with React's SyntheticEvent system",
        "description": "Creating synthetic events incorrectly - this may not work as expected with React's SyntheticEvent system This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use a proper approach to update controlled components or create synthetic events correctly",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const handleClearInput = () => {\n      const newValue = \"\";\n      setCurrentValue(newValue);\n      \n      if (internalInputRef.current && onChange) {\n        // Create a proper synthetic event\n        const syntheticEvent = {\n          target: { ...internalInputRef.current, value: newValue },\n          currentTarget: internalInputRef.current,\n          preventDefault: () => {},\n          stopPropagation: () => {},\n        } as React.ChangeEvent<HTMLInputElement>;\n        \n        onChange(syntheticEvent);\n        internalInputRef.current.focus();\n      }\n    };",
          "description": "Use a proper approach to update controlled components or create synthetic events correctly",
          "content": "    const handleClearInput = () => {\n      const newValue = \"\";\n      setCurrentValue(newValue);\n      \n      if (internalInputRef.current && onChange) {\n        // Create a proper synthetic event\n        const syntheticEvent = {\n          target: { ...internalInputRef.current, value: newValue },\n          currentTarget: internalInputRef.current,\n          preventDefault: () => {},\n          stopPropagation: () => {},\n        } as React.ChangeEvent<HTMLInputElement>;\n        \n        onChange(syntheticEvent);\n        internalInputRef.current.focus();\n      }\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 147,
        "column": 11,
        "message": "Missing proper ARIA labeling for input when leftIcon or rightIcon is present",
        "description": "Missing proper ARIA labeling for input when leftIcon or rightIcon is present This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby attributes when icons provide important context",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 138,
        "column": 13,
        "message": "Inconsistent JSX formatting and indentation",
        "description": "Inconsistent JSX formatting and indentation This violates code style conventions and may reduce readability.",
        "suggestion": "Maintain consistent indentation and formatting",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            {leftIcon && (\n              <div className=\"pointer-events-none absolute top-1/2 left-3 -translate-y-1/2 transform text-liquid-grey z-10\">\n                {leftIcon}\n              </div>\n            )}",
          "description": "Maintain consistent indentation and formatting",
          "content": "            {leftIcon && (\n              <div className=\"pointer-events-none absolute top-1/2 left-3 -translate-y-1/2 transform text-liquid-grey z-10\">\n                {leftIcon}\n              </div>\n            )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 72,
        "column": 5,
        "message": "Redundant effect for value synchronization that could cause unnecessary re-renders",
        "description": "Redundant effect for value synchronization that could cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Consider removing this effect if currentValue initialization handles the controlled component pattern properly",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider removing this effect if currentValue initialization handles the controlled component pattern properly",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 203,
        "column": 13,
        "message": "Potential layout issue with rightIcon display logic",
        "description": "Potential layout issue with rightIcon display logic This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Simplify the conditional logic for rightIcon display",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            {rightIcon && variant !== \"password\" && !(clearable && hasValue) && (\n              <div className=\"pointer-events-none text-liquid-grey\">\n                {rightIcon}\n              </div>\n            )}",
          "description": "Simplify the conditional logic for rightIcon display",
          "content": "            {rightIcon && variant !== \"password\" && !(clearable && hasValue) && (\n              <div className=\"pointer-events-none text-liquid-grey\">\n                {rightIcon}\n              </div>\n            )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.tsx",
        "line": 210,
        "column": 9,
        "message": "Missing closing tag indentation consistency",
        "description": "Missing closing tag indentation consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Maintain consistent indentation for closing tags",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        </div>\n        {helperText && (",
          "description": "Maintain consistent indentation for closing tags",
          "content": "        </div>\n        {helperText && ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx",
        "line": 21,
        "column": 5,
        "message": "Test assumes DOM changes will be synchronous with state changes in controlled component test",
        "description": "Test assumes DOM changes will be synchronous with state changes in controlled component test This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the assertion on input value attribute as it may not reflect internal state changes immediately",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    fireEvent.change(input, { target: { value: \"Hello World\" } });\n\n    expect(value).toBe(\"Hello World\");",
          "description": "Remove the assertion on input value attribute as it may not reflect internal state changes immediately",
          "content": "    fireEvent.change(input, { target: { value: \"Hello World\" } });\n\n    expect(value).toBe(\"Hello World\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx",
        "line": 46,
        "column": 27,
        "message": "Fragile DOM query using document.querySelector instead of testing-library queries",
        "description": "Fragile DOM query using document.querySelector instead of testing-library queries This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use screen.getByRole or screen.getByTestId instead of document.querySelector for better test reliability",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx",
        "line": 80,
        "column": 5,
        "message": "Test mutates external variable instead of using proper state management pattern",
        "description": "Test mutates external variable instead of using proper state management pattern This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use React state or a more robust state management pattern for testing controlled components",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"renders with clearable functionality\", () => {\n    const TestComponent = () => {\n      const [value, setValue] = React.useState(\"test\");\n      const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n      };\n      return <GlassInput clearable value={value} onChange={handleChange} />;\n    };\n\n    render(<TestComponent />);",
          "description": "Use React state or a more robust state management pattern for testing controlled components",
          "content": "  it(\"renders with clearable functionality\", () => {\n    const TestComponent = () => {\n      const [value, setValue] = React.useState(\"test\");\n      const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n      };\n      return <GlassInput clearable value={value} onChange={handleChange} />;\n    };\n\n    render(<TestComponent />);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx",
        "line": 127,
        "column": 20,
        "message": "Test checks for aria-describedby attribute but doesn't verify the ID relationship",
        "description": "Test checks for aria-describedby attribute but doesn't verify the ID relationship This code works but could be improved for better maintainability.",
        "suggestion": "Verify that the aria-describedby value matches the actual helper text element ID",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.test.tsx",
        "line": 57,
        "column": 5,
        "message": "Repeated screen queries could be optimized by storing references",
        "description": "Repeated screen queries could be optimized by storing references This implementation could impact application performance.",
        "suggestion": "Store frequently accessed elements in variables to avoid repeated DOM queries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"renders password variant with toggle\", () => {\n    render(<GlassInput variant=\"password\" placeholder=\"Password\" />);\n\n    const input = screen.getByPlaceholderText(\"Password\");\n    expect(input).toHaveAttribute(\"type\", \"password\");\n\n    // Toggle button should be present\n    let toggleButton = screen.getByLabelText(\"Show password\");\n    expect(toggleButton).toBeInTheDocument();\n\n    // Click to show password\n    fireEvent.click(toggleButton);\n    expect(input).toHaveAttribute(\"type\", \"text\");\n    \n    toggleButton = screen.getByLabelText(\"Hide password\");\n    expect(toggleButton).toBeInTheDocument();\n\n    // Click to hide password\n    fireEvent.click(toggleButton);\n    expect(input).toHaveAttribute(\"type\", \"password\");\n  });",
          "description": "Store frequently accessed elements in variables to avoid repeated DOM queries",
          "content": "  it(\"renders password variant with toggle\", () => {\n    render(<GlassInput variant=\"password\" placeholder=\"Password\" />);\n\n    const input = screen.getByPlaceholderText(\"Password\");\n    expect(input).toHaveAttribute(\"type\", \"password\");\n\n    // Toggle button should be present\n    let toggleButton = screen.getByLabelText(\"Show password\");\n    expect(toggleButton).toBeInTheDocument();\n\n    // Click to show password\n    fireEvent.click(toggleButton);\n    expect(input).toHaveAttribute(\"type\", \"text\");\n    \n    toggleButton = screen.getByLabelText(\"Hide password\");\n    expect(toggleButton).toBeInTheDocument();\n\n    // Click to hide password\n    fireEvent.click(toggleButton);\n    expect(input).toHaveAttribute(\"type\", \"password\");\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 573,
        "column": 25,
        "message": "Missing import for 'cn' utility function",
        "description": "Missing import for 'cn' utility function This will likely cause errors during execution.",
        "suggestion": "Add import for 'cn' utility function or replace with appropriate class name utility",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { cn } from \"@/lib/utils\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";",
          "description": "Add import for 'cn' utility function or replace with appropriate class name utility",
          "content": "import { cn } from \"@/lib/utils\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 364,
        "column": 9,
        "message": "Missing import for 'Card' component",
        "description": "Missing import for 'Card' component This will likely cause errors during execution.",
        "suggestion": "Add import for Card component or replace with GlassCard",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <GlassCard className=\"w-full max-w-md\">\n        <GlassCard.Header>\n          <GlassCard.Title>Create Account</GlassCard.Title>\n          <GlassCard.Description>\n            Fill in your details to get started\n          </GlassCard.Description>\n        </GlassCard.Header>\n        <GlassCard.Content>",
          "description": "Add import for Card component or replace with GlassCard",
          "content": "      <GlassCard className=\"w-full max-w-md\">\n        <GlassCard.Header>\n          <GlassCard.Title>Create Account</GlassCard.Title>\n          <GlassCard.Description>\n            Fill in your details to get started\n          </GlassCard.Description>\n        </GlassCard.Header>\n        <GlassCard.Content>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 249,
        "column": 23,
        "message": "htmlFor attribute references non-existent input IDs",
        "description": "htmlFor attribute references non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attribute or ensure corresponding input has matching id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label className=\"font-medium text-sm\">\n          Default\n        </label>",
          "description": "Remove htmlFor attribute or ensure corresponding input has matching id",
          "content": "        <label className=\"font-medium text-sm\">\n          Default\n        </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 256,
        "column": 23,
        "message": "htmlFor attribute references non-existent input IDs",
        "description": "htmlFor attribute references non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attribute or ensure corresponding input has matching id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label className=\"font-medium text-sm\">\n          Search\n        </label>",
          "description": "Remove htmlFor attribute or ensure corresponding input has matching id",
          "content": "        <label className=\"font-medium text-sm\">\n          Search\n        </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 263,
        "column": 23,
        "message": "htmlFor attribute references non-existent input IDs",
        "description": "htmlFor attribute references non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attribute or ensure corresponding input has matching id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label className=\"font-medium text-sm\">\n          Password\n        </label>",
          "description": "Remove htmlFor attribute or ensure corresponding input has matching id",
          "content": "        <label className=\"font-medium text-sm\">\n          Password\n        </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 270,
        "column": 23,
        "message": "htmlFor attribute references non-existent input IDs",
        "description": "htmlFor attribute references non-existent input IDs This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attribute or ensure corresponding input has matching id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label className=\"font-medium text-sm\">\n          Email\n        </label>",
          "description": "Remove htmlFor attribute or ensure corresponding input has matching id",
          "content": "        <label className=\"font-medium text-sm\">\n          Email\n        </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-input/glass-input.stories.tsx",
        "line": 317,
        "column": 25,
        "message": "htmlFor attribute references non-existent input IDs in Features section",
        "description": "htmlFor attribute references non-existent input IDs in Features section This code works but could be improved for better maintainability.",
        "suggestion": "Remove htmlFor attribute or ensure corresponding input has matching id",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <label className=\"font-medium text-sm\">\n          Clearable Input\n        </label>",
          "description": "Remove htmlFor attribute or ensure corresponding input has matching id",
          "content": "        <label className=\"font-medium text-sm\">\n          Clearable Input\n        </label>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/index.ts",
        "line": 7,
        "column": 1,
        "message": "Trailing newline is unnecessary in export-only index file",
        "description": "Trailing newline is unnecessary in export-only index file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line for cleaner formatting",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-form-field Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-form-field\";",
          "description": "Remove the trailing empty line for cleaner formatting",
          "content": "/**\n * glass-form-field Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-form-field\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/index.ts",
        "line": 6,
        "column": 1,
        "message": "Potential module resolution issue - exported module './glass-form-field' may not exist or have proper exports",
        "description": "Potential module resolution issue - exported module './glass-form-field' may not exist or have proper exports This will likely cause errors during execution.",
        "suggestion": "Verify that './glass-form-field' module exists and has proper exports, or add explicit type checking",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 127,
        "column": 14,
        "message": "Missing import for useGlassStateTransitions hook",
        "description": "Missing import for useGlassStateTransitions hook This will likely cause errors during execution.",
        "suggestion": "Import the useGlassStateTransitions hook or implement it locally",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 144,
        "column": 7,
        "message": "Variable 'hapticFeedback' is used but never declared",
        "description": "Variable 'hapticFeedback' is used but never declared This will likely cause errors during execution.",
        "suggestion": "Add hapticFeedback to the interface or remove from destructuring",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      hapticFeedback = false,",
          "description": "Add hapticFeedback to the interface or remove from destructuring",
          "content": "      hapticFeedback = false,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 302,
        "column": 13,
        "message": "Inconsistent aria-live attribute values",
        "description": "Inconsistent aria-live attribute values This code works but could be improved for better maintainability.",
        "suggestion": "Use 'assertive' for errors to ensure immediate announcement",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-live={error ? \"assertive\" : undefined}",
          "description": "Use 'assertive' for errors to ensure immediate announcement",
          "content": "            aria-live={error ? \"assertive\" : undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 240,
        "column": 31,
        "message": "React.Children.map creates unnecessary re-renders",
        "description": "React.Children.map creates unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize children enhancement",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Clone children to add proper IDs and aria attributes\n    const enhancedChildren = useMemo(() => {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child as React.ReactElement<any>, {\n            ...child.props,\n            id: finalId,\n            \"aria-describedby\": message ? `${finalId}-message` : undefined,\n            \"aria-invalid\": error ? true : undefined,\n            \"aria-required\": required || undefined,\n            disabled,\n          });\n        }\n        return child;\n      });\n    }, [children, finalId, message, error, required, disabled]);",
          "description": "Use useMemo to memoize children enhancement",
          "content": "    // Clone children to add proper IDs and aria attributes\n    const enhancedChildren = useMemo(() => {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child as React.ReactElement<any>, {\n            ...child.props,\n            id: finalId,\n            \"aria-describedby\": message ? `${finalId}-message` : undefined,\n            \"aria-invalid\": error ? true : undefined,\n            \"aria-required\": required || undefined,\n            disabled,\n          });\n        }\n        return child;\n      });\n    }, [children, finalId, message, error, required, disabled]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-security-4",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 20,
        "column": 26,
        "message": "Console.debug in production code can expose sensitive information",
        "description": "Console.debug in production code can expose sensitive information This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Use proper logging mechanism or remove debug statements",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    announce: (message: string) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.debug(`Announced: ${message}`);\n      }\n    },",
          "description": "Use proper logging mechanism or remove debug statements",
          "content": "    announce: (message: string) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.debug(`Announced: ${message}`);\n      }\n    },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-naming-5",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 77,
        "column": 3,
        "message": "Inconsistent boolean prop type definition",
        "description": "Inconsistent boolean prop type definition This code works but could be improved for better maintainability.",
        "suggestion": "Use consistent boolean type instead of boolean | string for error prop",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-memory-6",
        "type": "memory",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 206,
        "column": 25,
        "message": "Missing dependencies in useMemo/useCallback hooks",
        "description": "Missing dependencies in useMemo/useCallback hooks This code works but could be improved for better maintainability.",
        "suggestion": "Add missing dependencies to dependency array",
        "rule": "memory",
        "category": "Memory Leaks & Resources",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const handleMouseEnter = useCallback(() => {\n      if (hover && !disabled && !disableAnimations) {\n        transitionToState(\"hover\");\n      }\n    }, [hover, disabled, disableAnimations, transitionToState]);",
          "description": "Add missing dependencies to dependency array",
          "content": "    const handleMouseEnter = useCallback(() => {\n      if (hover && !disabled && !disableAnimations) {\n        transitionToState(\"hover\");\n      }\n    }, [hover, disabled, disableAnimations, transitionToState]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.tsx",
        "line": 77,
        "column": 12,
        "message": "Inconsistent string literal quotes",
        "description": "Inconsistent string literal quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  error?: boolean | string;",
          "description": "Use consistent quote style throughout the file",
          "content": "  error?: boolean | string;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 102,
        "column": 25,
        "message": "Using generic 'group' role for form field container may not provide optimal screen reader experience",
        "description": "Using generic 'group' role for form field container may not provide optimal screen reader experience This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific ARIA roles or semantic HTML elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 124,
        "column": 17,
        "message": "Using generic 'group' role for form field container may not provide optimal screen reader experience",
        "description": "Using generic 'group' role for form field container may not provide optimal screen reader experience This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific ARIA roles or semantic HTML elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 140,
        "column": 9,
        "message": "Using generic 'group' role for form field container may not provide optimal screen reader experience",
        "description": "Using generic 'group' role for form field container may not provide optimal screen reader experience This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific ARIA roles or semantic HTML elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 154,
        "column": 9,
        "message": "Using generic 'group' role for form field container may not provide optimal screen reader experience",
        "description": "Using generic 'group' role for form field container may not provide optimal screen reader experience This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific ARIA roles or semantic HTML elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 168,
        "column": 9,
        "message": "Using generic 'group' role for form field container may not provide optimal screen reader experience",
        "description": "Using generic 'group' role for form field container may not provide optimal screen reader experience This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more specific ARIA roles or semantic HTML elements for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-bug-5",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 129,
        "column": 5,
        "message": "Test assumes specific CSS classes are applied but doesn't verify the actual styling behavior",
        "description": "Test assumes specific CSS classes are applied but doesn't verify the actual styling behavior This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Consider testing the actual computed styles or visual effects rather than just CSS class presence",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx-convention-6",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Repetitive test setup with same props could be extracted to a helper function",
        "description": "Repetitive test setup with same props could be extracted to a helper function This code works but could be improved for better maintainability.",
        "suggestion": "Create a helper function to reduce code duplication in test setup",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { describe, expect, it } from \"bun:test\";\nimport { fireEvent, render, screen } from \"@testing-library/react\";\nimport React from \"react\";\nimport { GlassFormField } from \"./glass-form-field\";\n\nconst defaultProps = {\n  glassEffect: { intensity: \"medium\" as const },\n  animation: \"normal\" as const,\n};\n\nconst renderGlassFormField = (props: any, children = <input type=\"email\" />) => {\n  return render(\n    <GlassFormField {...defaultProps} {...props}>\n      {children}\n    </GlassFormField>\n  );\n};\n\ndescribe(\"GlassFormField\", () => {\n  it(\"renders with label\", () => {\n    renderGlassFormField({ label: \"Email\" });\n\n    expect(screen.getByText(\"Email\")).toBeInTheDocument();\n  });\n\n  it(\"renders with helper text\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      helperText: \"Enter your email address\",\n    });\n\n    expect(screen.getByText(\"Enter your email address\")).toBeInTheDocument();\n  });\n\n  it(\"renders with error state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      error: \"Email is required\",\n    });\n\n    expect(screen.getByText(\"Email is required\")).toBeInTheDocument();\n    const helperText = screen.getByText(\"Email is required\");\n    expect(helperText).toHaveClass(\"text-red-400\");\n  });\n\n  it(\"renders with success state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      success: \"Email looks good!\",\n    });\n\n    expect(screen.getByText(\"Email looks good!\")).toBeInTheDocument();\n    const helperText = screen.getByText(\"Email looks good!\");\n    expect(helperText).toHaveClass(\"text-green-400\");\n  });\n\n  it(\"renders with warning state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      warning: \"Please check your email format\",\n    });\n\n    expect(\n      screen.getByText(\"Please check your email format\"),\n    ).toBeInTheDocument();\n    const helperText = screen.getByText(\"Please check your email format\");\n    expect(helperText).toHaveClass(\"text-yellow-400\");\n  });\n\n  it(\"shows required indicator when required\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      required: true,\n    });\n\n    expect(screen.getByText(\"*\")).toBeInTheDocument();\n  });\n\n  it(\"applies disabled state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      disabled: true,\n    });\n\n    const field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"cursor-not-allowed\", \"opacity-50\");\n  });\n\n  it(\"passes props to child input\", () => {\n    renderGlassFormField(\n      {\n        label: \"Email\",\n        error: \"Invalid email\",\n      },\n      <input type=\"email\" placeholder=\"Enter email\" />\n    );\n\n    const input = screen.getByPlaceholderText(\"Enter email\");\n    expect(input).toHaveAttribute(\"aria-invalid\", \"true\");\n    expect(input).toHaveAttribute(\"aria-describedby\");\n  });\n\n  it(\"renders with different variants\", () => {\n    const { rerender } = renderGlassFormField({\n      label: \"Email\",\n      variant: \"default\",\n    });\n\n    let field = screen.getByRole(\"group\");\n    // Default variant should not have card-specific classes\n    expect(field).not.toHaveClass(\"rounded-xl\", \"border\", \"p-4\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        variant=\"card\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"rounded-xl\", \"border\", \"p-4\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        variant=\"inline\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"flex\", \"items-center\");\n  });\n\n  it(\"renders with different sizes\", () => {\n    const { rerender } = renderGlassFormField({\n      label: \"Email\",\n      size: \"sm\",\n    });\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-xs\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        size=\"md\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-sm\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        size=\"lg\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-base\");\n  });\n\n  it(\"associates label with input through htmlFor\", () => {\n    renderGlassFormField(\n      { label: \"Email\" },\n      <input type=\"email\" id=\"email-input\" />\n    );\n\n    const label = screen.getByText(\"Email\");\n    const input = screen.getByLabelText(\"Email\");\n    expect(label).toHaveAttribute(\"for\", \"email-input\");\n    expect(input).toHaveAttribute(\"id\", \"email-input\");\n  });\n});",
          "description": "Create a helper function to reduce code duplication in test setup",
          "content": "import { describe, expect, it } from \"bun:test\";\nimport { fireEvent, render, screen } from \"@testing-library/react\";\nimport React from \"react\";\nimport { GlassFormField } from \"./glass-form-field\";\n\nconst defaultProps = {\n  glassEffect: { intensity: \"medium\" as const },\n  animation: \"normal\" as const,\n};\n\nconst renderGlassFormField = (props: any, children = <input type=\"email\" />) => {\n  return render(\n    <GlassFormField {...defaultProps} {...props}>\n      {children}\n    </GlassFormField>\n  );\n};\n\ndescribe(\"GlassFormField\", () => {\n  it(\"renders with label\", () => {\n    renderGlassFormField({ label: \"Email\" });\n\n    expect(screen.getByText(\"Email\")).toBeInTheDocument();\n  });\n\n  it(\"renders with helper text\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      helperText: \"Enter your email address\",\n    });\n\n    expect(screen.getByText(\"Enter your email address\")).toBeInTheDocument();\n  });\n\n  it(\"renders with error state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      error: \"Email is required\",\n    });\n\n    expect(screen.getByText(\"Email is required\")).toBeInTheDocument();\n    const helperText = screen.getByText(\"Email is required\");\n    expect(helperText).toHaveClass(\"text-red-400\");\n  });\n\n  it(\"renders with success state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      success: \"Email looks good!\",\n    });\n\n    expect(screen.getByText(\"Email looks good!\")).toBeInTheDocument();\n    const helperText = screen.getByText(\"Email looks good!\");\n    expect(helperText).toHaveClass(\"text-green-400\");\n  });\n\n  it(\"renders with warning state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      warning: \"Please check your email format\",\n    });\n\n    expect(\n      screen.getByText(\"Please check your email format\"),\n    ).toBeInTheDocument();\n    const helperText = screen.getByText(\"Please check your email format\");\n    expect(helperText).toHaveClass(\"text-yellow-400\");\n  });\n\n  it(\"shows required indicator when required\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      required: true,\n    });\n\n    expect(screen.getByText(\"*\")).toBeInTheDocument();\n  });\n\n  it(\"applies disabled state\", () => {\n    renderGlassFormField({\n      label: \"Email\",\n      disabled: true,\n    });\n\n    const field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"cursor-not-allowed\", \"opacity-50\");\n  });\n\n  it(\"passes props to child input\", () => {\n    renderGlassFormField(\n      {\n        label: \"Email\",\n        error: \"Invalid email\",\n      },\n      <input type=\"email\" placeholder=\"Enter email\" />\n    );\n\n    const input = screen.getByPlaceholderText(\"Enter email\");\n    expect(input).toHaveAttribute(\"aria-invalid\", \"true\");\n    expect(input).toHaveAttribute(\"aria-describedby\");\n  });\n\n  it(\"renders with different variants\", () => {\n    const { rerender } = renderGlassFormField({\n      label: \"Email\",\n      variant: \"default\",\n    });\n\n    let field = screen.getByRole(\"group\");\n    // Default variant should not have card-specific classes\n    expect(field).not.toHaveClass(\"rounded-xl\", \"border\", \"p-4\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        variant=\"card\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"rounded-xl\", \"border\", \"p-4\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        variant=\"inline\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    field = screen.getByRole(\"group\");\n    expect(field).toHaveClass(\"flex\", \"items-center\");\n  });\n\n  it(\"renders with different sizes\", () => {\n    const { rerender } = renderGlassFormField({\n      label: \"Email\",\n      size: \"sm\",\n    });\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-xs\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        size=\"md\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-sm\");\n\n    rerender(\n      <GlassFormField\n        {...defaultProps}\n        label=\"Email\"\n        size=\"lg\"\n      >\n        <input type=\"email\" />\n      </GlassFormField>,\n    );\n\n    expect(screen.getByText(\"Email\")).toHaveClass(\"text-base\");\n  });\n\n  it(\"associates label with input through htmlFor\", () => {\n    renderGlassFormField(\n      { label: \"Email\" },\n      <input type=\"email\" id=\"email-input\" />\n    );\n\n    const label = screen.getByText(\"Email\");\n    const input = screen.getByLabelText(\"Email\");\n    expect(label).toHaveAttribute(\"for\", \"email-input\");\n    expect(input).toHaveAttribute(\"id\", \"email-input\");\n  });\n});"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 261,
        "column": 15,
        "message": "Native HTML select and input elements used without proper ARIA attributes and styling consistency",
        "description": "Native HTML select and input elements used without proper ARIA attributes and styling consistency This code works but could be improved for better maintainability.",
        "suggestion": "Replace native HTML elements with accessible Glass components for consistency",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassSelect\n                value={fieldState}\n                onChange={(value) => setFieldState(value as any)}\n                options={[\n                  { value: \"default\", label: \"Default\" },\n                  { value: \"error\", label: \"Error\" },\n                  { value: \"success\", label: \"Success\" },\n                  { value: \"warning\", label: \"Warning\" }\n                ]}\n              />",
          "description": "Replace native HTML elements with accessible Glass components for consistency",
          "content": "              <GlassSelect\n                value={fieldState}\n                onChange={(value) => setFieldState(value as any)}\n                options={[\n                  { value: \"default\", label: \"Default\" },\n                  { value: \"error\", label: \"Error\" },\n                  { value: \"success\", label: \"Success\" },\n                  { value: \"warning\", label: \"Warning\" }\n                ]}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 278,
        "column": 15,
        "message": "Native HTML select element used without proper ARIA attributes",
        "description": "Native HTML select element used without proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Replace with GlassSelect component for consistency and better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassSelect\n                value={variant}\n                onChange={(value) => setVariant(value as any)}\n                options={[\n                  { value: \"default\", label: \"Default\" },\n                  { value: \"card\", label: \"Card\" },\n                  { value: \"inline\", label: \"Inline\" }\n                ]}\n              />",
          "description": "Replace with GlassSelect component for consistency and better accessibility",
          "content": "              <GlassSelect\n                value={variant}\n                onChange={(value) => setVariant(value as any)}\n                options={[\n                  { value: \"default\", label: \"Default\" },\n                  { value: \"card\", label: \"Card\" },\n                  { value: \"inline\", label: \"Inline\" }\n                ]}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 293,
        "column": 15,
        "message": "Native HTML select element used without proper ARIA attributes",
        "description": "Native HTML select element used without proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Replace with GlassSelect component for consistency and better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassSelect\n                value={size}\n                onChange={(value) => setSize(value as any)}\n                options={[\n                  { value: \"sm\", label: \"Small\" },\n                  { value: \"md\", label: \"Medium\" },\n                  { value: \"lg\", label: \"Large\" }\n                ]}\n              />",
          "description": "Replace with GlassSelect component for consistency and better accessibility",
          "content": "              <GlassSelect\n                value={size}\n                onChange={(value) => setSize(value as any)}\n                options={[\n                  { value: \"sm\", label: \"Small\" },\n                  { value: \"md\", label: \"Medium\" },\n                  { value: \"lg\", label: \"Large\" }\n                ]}\n              />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 304,
        "column": 17,
        "message": "Native HTML checkbox inputs missing proper labeling and ARIA attributes",
        "description": "Native HTML checkbox inputs missing proper labeling and ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add proper id, htmlFor attributes and consider using a Glass checkbox component",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <input\n                  id=\"required-checkbox\"\n                  type=\"checkbox\"\n                  checked={isRequired}\n                  onChange={(e) => setIsRequired(e.target.checked)}\n                  aria-describedby=\"required-label\"\n                />\n                <span id=\"required-label\" className=\"text-sm text-white/90\">Required</span>",
          "description": "Add proper id, htmlFor attributes and consider using a Glass checkbox component",
          "content": "                <input\n                  id=\"required-checkbox\"\n                  type=\"checkbox\"\n                  checked={isRequired}\n                  onChange={(e) => setIsRequired(e.target.checked)}\n                  aria-describedby=\"required-label\"\n                />\n                <span id=\"required-label\" className=\"text-sm text-white/90\">Required</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 309,
        "column": 17,
        "message": "Native HTML checkbox input missing proper labeling and ARIA attributes",
        "description": "Native HTML checkbox input missing proper labeling and ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add proper id, htmlFor attributes and consider using a Glass checkbox component",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <input\n                  id=\"disabled-checkbox\"\n                  type=\"checkbox\"\n                  checked={isDisabled}\n                  onChange={(e) => setIsDisabled(e.target.checked)}\n                  aria-describedby=\"disabled-label\"\n                />\n                <span id=\"disabled-label\" className=\"text-sm text-white/90\">Disabled</span>",
          "description": "Add proper id, htmlFor attributes and consider using a Glass checkbox component",
          "content": "                <input\n                  id=\"disabled-checkbox\"\n                  type=\"checkbox\"\n                  checked={isDisabled}\n                  onChange={(e) => setIsDisabled(e.target.checked)}\n                  aria-describedby=\"disabled-label\"\n                />\n                <span id=\"disabled-label\" className=\"text-sm text-white/90\">Disabled</span>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 75,
        "column": 15,
        "message": "Native HTML checkbox input in inline variant missing proper accessibility attributes",
        "description": "Native HTML checkbox input in inline variant missing proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add proper id and aria-labelledby attributes for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <input \n                id=\"newsletter-checkbox\"\n                type=\"checkbox\" \n                className=\"mr-2\"\n                aria-labelledby=\"newsletter-label\"\n              />\n              <span id=\"newsletter-label\" className=\"text-sm text-white/70\">",
          "description": "Add proper id and aria-labelledby attributes for better screen reader support",
          "content": "              <input \n                id=\"newsletter-checkbox\"\n                type=\"checkbox\" \n                className=\"mr-2\"\n                aria-labelledby=\"newsletter-label\"\n              />\n              <span id=\"newsletter-label\" className=\"text-sm text-white/70\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 263,
        "column": 52,
        "message": "Type assertion 'as any' used multiple times, reducing type safety",
        "description": "Type assertion 'as any' used multiple times, reducing type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type definitions instead of 'any' assertions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                onChange={(e) => setFieldState(e.target.value as \"default\" | \"error\" | \"success\" | \"warning\")}",
          "description": "Use proper type definitions instead of 'any' assertions",
          "content": "                onChange={(e) => setFieldState(e.target.value as \"default\" | \"error\" | \"success\" | \"warning\")}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 280,
        "column": 50,
        "message": "Type assertion 'as any' used, reducing type safety",
        "description": "Type assertion 'as any' used, reducing type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type definitions instead of 'any' assertions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                onChange={(e) => setVariant(e.target.value as \"default\" | \"card\" | \"inline\")}",
          "description": "Use proper type definitions instead of 'any' assertions",
          "content": "                onChange={(e) => setVariant(e.target.value as \"default\" | \"card\" | \"inline\")}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-form-field/glass-form-field.stories.tsx",
        "line": 295,
        "column": 45,
        "message": "Type assertion 'as any' used, reducing type safety",
        "description": "Type assertion 'as any' used, reducing type safety This violates code style conventions and may reduce readability.",
        "suggestion": "Use proper type definitions instead of 'any' assertions",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                onChange={(e) => setSize(e.target.value as \"sm\" | \"md\" | \"lg\")}",
          "description": "Use proper type definitions instead of 'any' assertions",
          "content": "                onChange={(e) => setSize(e.target.value as \"sm\" | \"md\" | \"lg\")}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - the wildcard export already includes the named export",
        "description": "Redundant export statement - the wildcard export already includes the named export This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the explicit named export since it's already covered by the wildcard export",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-focus-trap Component Export\n */\n\n// Export everything from the glass-focus-trap module\nexport * from \"./glass-focus-trap\";\n",
          "description": "Remove the explicit named export since it's already covered by the wildcard export",
          "content": "/**\n * glass-focus-trap Component Export\n */\n\n// Export everything from the glass-focus-trap module\nexport * from \"./glass-focus-trap\";\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 306,
        "column": 7,
        "message": "accessibilityManager.announce method is called but not defined in the mock object",
        "description": "accessibilityManager.announce method is called but not defined in the mock object This will likely cause errors during execution.",
        "suggestion": "Add the announce method to the accessibilityManager mock or implement proper accessibility manager",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Mock accessibilityManager since it was removed\nconst accessibilityManager = {\n  trapFocus: (container: HTMLElement) => () => {},\n  announce: (message: string, priority: string = 'polite') => {\n    // Create an aria-live region for announcements\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', priority);\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.style.position = 'absolute';\n    announcement.style.left = '-10000px';\n    announcement.style.width = '1px';\n    announcement.style.height = '1px';\n    announcement.style.overflow = 'hidden';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  },\n};",
          "description": "Add the announce method to the accessibilityManager mock or implement proper accessibility manager",
          "content": "// Mock accessibilityManager since it was removed\nconst accessibilityManager = {\n  trapFocus: (container: HTMLElement) => () => {},\n  announce: (message: string, priority: string = 'polite') => {\n    // Create an aria-live region for announcements\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', priority);\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.style.position = 'absolute';\n    announcement.style.left = '-10000px';\n    announcement.style.width = '1px';\n    announcement.style.height = '1px';\n    announcement.style.overflow = 'hidden';\n    announcement.textContent = message;\n    document.body.appendChild(announcement);\n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  },\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 383,
        "column": 7,
        "message": "accessibilityManager.announce method is called but not defined in the mock object",
        "description": "accessibilityManager.announce method is called but not defined in the mock object This will likely cause errors during execution.",
        "suggestion": "This is resolved by fixing the accessibilityManager mock above",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 274,
        "column": 11,
        "message": "Potential null pointer exception when accessing focusableElements[0]",
        "description": "Potential null pointer exception when accessing focusableElements[0] This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add null check before accessing array element",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        const focusableElements = getFocusableElements();\n        const firstElement = focusableElements[0];\n        if (firstElement) {\n          firstElement.focus(focusOptions);\n          lastFocusedElement.current = firstElement;\n        } else if (fallbackFocus?.current) {",
          "description": "Add null check before accessing array element",
          "content": "        const focusableElements = getFocusableElements();\n        const firstElement = focusableElements[0];\n        if (firstElement) {\n          firstElement.focus(focusOptions);\n          lastFocusedElement.current = firstElement;\n        } else if (fallbackFocus?.current) {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 295,
        "column": 28,
        "message": "getFocusableElements is called multiple times in effect callbacks, causing unnecessary DOM queries",
        "description": "getFocusableElements is called multiple times in effect callbacks, causing unnecessary DOM queries This implementation could impact application performance.",
        "suggestion": "Cache focusable elements and update only when container changes",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 395,
        "column": 5,
        "message": "Missing aria-describedby or aria-labelledby attributes for screen reader context",
        "description": "Missing aria-describedby or aria-labelledby attributes for screen reader context This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby or aria-labelledby to provide context for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n      ref={containerRef}\n      className={cn(\"liquid-glass-interactive:focus-visible-trap\", className)}\n      data-focus-trap-active={isActive}\n      aria-modal={isActive ? \"true\" : undefined}\n      role={isActive ? \"dialog\" : undefined}\n      aria-label={isActive ? \"Focus trapped dialog\" : undefined}\n    >",
          "description": "Add aria-describedby or aria-labelledby to provide context for screen readers",
          "content": "    <div\n      ref={containerRef}\n      className={cn(\"liquid-glass-interactive:focus-visible-trap\", className)}\n      data-focus-trap-active={isActive}\n      aria-modal={isActive ? \"true\" : undefined}\n      role={isActive ? \"dialog\" : undefined}\n      aria-label={isActive ? \"Focus trapped dialog\" : undefined}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-memory-leak-5",
        "type": "memory-leak",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 36,
        "column": 7,
        "message": "Global focusTrapStack array may accumulate stale references if cleanup fails",
        "description": "Global focusTrapStack array may accumulate stale references if cleanup fails This code works but could be improved for better maintainability.",
        "suggestion": "Add WeakSet or implement better cleanup mechanism for trap instances",
        "rule": "memory-leak",
        "category": "Memory Leaks & Resources"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 188,
        "column": 33,
        "message": "Type assertion without null check could cause runtime error",
        "description": "Type assertion without null check could cause runtime error This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add null check before type assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const lastElement = focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : undefined;",
          "description": "Add null check before type assertion",
          "content": "      const lastElement = focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : undefined;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-trap/glass-focus-trap.tsx",
        "line": 374,
        "column": 9,
        "message": "Empty catch block silently ignores potential focus errors",
        "description": "Empty catch block silently ignores potential focus errors This code works but could be improved for better maintainability.",
        "suggestion": "Add proper error handling or logging for focus failures",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        } catch (error) {\n          console.warn('Failed to restore focus to previous element:', error);\n        }",
          "description": "Add proper error handling or logging for focus failures",
          "content": "        } catch (error) {\n          console.warn('Failed to restore focus to previous element:', error);\n        }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/index.ts-error-0",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/index.ts",
        "line": 4,
        "column": 1,
        "message": "Potential module resolution issue - the imported module './glass-focus-demo' may not exist or may not have proper exports",
        "description": "Potential module resolution issue - the imported module './glass-focus-demo' may not exist or may not have proper exports This will likely cause errors during execution.",
        "suggestion": "Verify that the './glass-focus-demo' module exists and has proper exports, or consider using a more explicit import/export pattern",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/index.ts",
        "line": 5,
        "column": 1,
        "message": "Trailing empty line at end of file",
        "description": "Trailing empty line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-focus-demo Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-focus-demo\";",
          "description": "Remove trailing empty line",
          "content": "/**\n * glass-focus-demo Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-focus-demo\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 62,
        "column": 11,
        "message": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels",
        "description": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels This code works but could be improved for better maintainability.",
        "suggestion": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 1\n          </a>",
          "description": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
          "content": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 1\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 70,
        "column": 11,
        "message": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels",
        "description": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels This code works but could be improved for better maintainability.",
        "suggestion": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 2\n          </a>",
          "description": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
          "content": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 2\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 78,
        "column": 11,
        "message": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels",
        "description": "Button elements styled as links should use proper link semantics or have appropriate ARIA labels This code works but could be improved for better maintainability.",
        "suggestion": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 3\n          </a>",
          "description": "Use anchor tags for navigation or add role='link' and proper ARIA attributes",
          "content": "          <a\n            href=\"#\"\n            onClick={(e) => { e.preventDefault(); }}\n            className=\"cursor-pointer text-blue-500 hover:underline\"\n          >\n            Link 3\n          </a>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-bug-3",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 16,
        "column": 5,
        "message": "Type assertion used incorrectly - menuItemReferences.current already has correct type",
        "description": "Type assertion used incorrectly - menuItemReferences.current already has correct type This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove unnecessary type assertion",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const menuItems = menuItemReferences.current.filter(Boolean) as Array<HTMLElement>;",
          "description": "Remove unnecessary type assertion",
          "content": "  const menuItems = menuItemReferences.current.filter(Boolean) as Array<HTMLElement>;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 219,
        "column": 25,
        "message": "Checking for function type on string action property will always be false",
        "description": "Checking for function type on string action property will always be false This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the type check since action is always a string",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    onClick={() => {\n                      console.log(option.action);\n                    }}",
          "description": "Remove the type check since action is always a string",
          "content": "                    onClick={() => {\n                      console.log(option.action);\n                    }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 210,
        "column": 21,
        "message": "Type assertion used in ref callback instead of proper typing",
        "description": "Type assertion used in ref callback instead of proper typing This violates code style conventions and may reduce readability.",
        "suggestion": "Remove type assertion from ref callback",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    ref={(element) => {\n                      menuItemReferences.current[index] = element;\n                    }}",
          "description": "Remove type assertion from ref callback",
          "content": "                    ref={(element) => {\n                      menuItemReferences.current[index] = element;\n                    }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-focus-demo/glass-focus-demo.tsx",
        "line": 132,
        "column": 19,
        "message": "Form should have proper submit handling and validation",
        "description": "Form should have proper submit handling and validation This code works but could be improved for better maintainability.",
        "suggestion": "Add proper form submission handler and validation",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts",
        "line": 2,
        "column": 1,
        "message": "Inconsistent comment formatting - block comment followed by line comment",
        "description": "Inconsistent comment formatting - block comment followed by line comment This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent comment style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-file-upload Component Export\n * Re-export everything for compatibility\n */",
          "description": "Use consistent comment style throughout the file",
          "content": "/**\n * glass-file-upload Component Export\n * Re-export everything for compatibility\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts",
        "line": 4,
        "column": 1,
        "message": "Missing explicit export validation - re-exporting without knowing what's being exported",
        "description": "Missing explicit export validation - re-exporting without knowing what's being exported This will likely cause errors during execution.",
        "suggestion": "Consider using named exports or add validation that the target file exists",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts-convention-2",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/index.ts",
        "line": 4,
        "column": 15,
        "message": "Missing file extension in export path may cause resolution issues",
        "description": "Missing file extension in export path may cause resolution issues This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit .js extension or ensure module resolution is properly configured",
        "rule": "convention",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-file-upload.js\";",
          "description": "Add explicit .js extension or ensure module resolution is properly configured",
          "content": "export * from \"./glass-file-upload.js\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 130,
        "column": 34,
        "message": "Stale closure in handleUpload callback - files state may be outdated when callback executes",
        "description": "Stale closure in handleUpload callback - files state may be outdated when callback executes This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use functional state updates to avoid stale closure issues",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const handleUpload = useCallback(\n      async (filesToUpload: Array<FileUploadItem>) => {\n        if (!onUpload) {\n          return;\n        }\n\n        setUploadState(\"uploading\");\n\n        try {\n          // Update files to uploading state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return { ...f, status: \"uploading\" as const };\n            }\n            return f;\n          }));\n\n          // Upload files\n          await onUpload(filesToUpload.map((f) => f.file));\n\n          // Update files to success state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return { ...f, status: \"success\" as const };\n            }\n            return f;\n          }));\n          setUploadState(\"idle\");\n        } catch (error) {\n          // Update files to error state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return {\n                ...f,\n                status: \"error\" as const,\n                error: error instanceof Error ? error.message : \"Upload failed\",\n              };\n            }\n            return f;\n          }));\n          setUploadState(\"error\");\n        }\n      },\n      [onUpload],\n    );",
          "description": "Use functional state updates to avoid stale closure issues",
          "content": "    const handleUpload = useCallback(\n      async (filesToUpload: Array<FileUploadItem>) => {\n        if (!onUpload) {\n          return;\n        }\n\n        setUploadState(\"uploading\");\n\n        try {\n          // Update files to uploading state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return { ...f, status: \"uploading\" as const };\n            }\n            return f;\n          }));\n\n          // Upload files\n          await onUpload(filesToUpload.map((f) => f.file));\n\n          // Update files to success state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return { ...f, status: \"success\" as const };\n            }\n            return f;\n          }));\n          setUploadState(\"idle\");\n        } catch (error) {\n          // Update files to error state\n          setFiles(currentFiles => currentFiles.map((f) => {\n            if (filesToUpload.find((u) => u.id === f.id)) {\n              return {\n                ...f,\n                status: \"error\" as const,\n                error: error instanceof Error ? error.message : \"Upload failed\",\n              };\n            }\n            return f;\n          }));\n          setUploadState(\"error\");\n        }\n      },\n      [onUpload],\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 240,
        "column": 27,
        "message": "Function formatFileSize is included in validateFile dependencies but defined after it, causing potential reference error",
        "description": "Function formatFileSize is included in validateFile dependencies but defined after it, causing potential reference error This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move formatFileSize function definition before validateFile or remove from dependencies",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Validate file\n    const validateFile = useCallback(\n      (file: File): string | null => {\n        if (maxFileSize && file.size > maxFileSize) {\n          return `File size exceeds ${formatFileSize(maxFileSize)}`;\n        }\n\n        if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\n          return \"File type not allowed\";\n        }\n\n        return null;\n      },\n      [maxFileSize, allowedTypes],\n    );",
          "description": "Move formatFileSize function definition before validateFile or remove from dependencies",
          "content": "    // Validate file\n    const validateFile = useCallback(\n      (file: File): string | null => {\n        if (maxFileSize && file.size > maxFileSize) {\n          return `File size exceeds ${formatFileSize(maxFileSize)}`;\n        }\n\n        if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\n          return \"File type not allowed\";\n        }\n\n        return null;\n      },\n      [maxFileSize, allowedTypes],\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-bug-2",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 320,
        "column": 19,
        "message": "Function createPreview is included in processFiles dependencies but defined after it, causing potential reference error",
        "description": "Function createPreview is included in processFiles dependencies but defined after it, causing potential reference error This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move createPreview function definition before processFiles or remove from dependencies",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        [files, disabled, maxFiles, onFilesChange, onUpload, showPreview, validateFile, handleUpload],",
          "description": "Move createPreview function definition before processFiles or remove from dependencies",
          "content": "        [files, disabled, maxFiles, onFilesChange, onUpload, showPreview, validateFile, handleUpload],"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 406,
        "column": 5,
        "message": "Interactive element missing proper keyboard event handlers",
        "description": "Interactive element missing proper keyboard event handlers This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler to support keyboard interaction for accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div\n        ref={ref}\n        className={cn(\n          \"liquid-glass\",\n          fileUploadVariants({ size, state: currentState }),\n          className,\n        )}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            openFileDialog();\n          }\n        }}\n      >",
          "description": "Add onKeyDown handler to support keyboard interaction for accessibility",
          "content": "      <div\n        ref={ref}\n        className={cn(\n          \"liquid-glass\",\n          fileUploadVariants({ size, state: currentState }),\n          className,\n        )}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            openFileDialog();\n          }\n        }}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 199,
        "column": 5,
        "message": "Expensive file size formatting function called on every render",
        "description": "Expensive file size formatting function called on every render This implementation could impact application performance.",
        "suggestion": "Memoize formatFileSize function with useCallback",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Format file size\n    const formatFileSize = useCallback((bytes: number): string => {\n      if (bytes === 0) {\n        return \"0 Bytes\";\n      }\n      const k = 1024;\n      const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n      const index = Math.floor(Math.log(bytes) / Math.log(k));\n      return `${Number.parseFloat((bytes / k ** index).toFixed(2))} ${sizes[index]}`;\n    }, []);",
          "description": "Memoize formatFileSize function with useCallback",
          "content": "    // Format file size\n    const formatFileSize = useCallback((bytes: number): string => {\n      if (bytes === 0) {\n        return \"0 Bytes\";\n      }\n      const k = 1024;\n      const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n      const index = Math.floor(Math.log(bytes) / Math.log(k));\n      return `${Number.parseFloat((bytes / k ** index).toFixed(2))} ${sizes[index]}`;\n    }, []);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 505,
        "column": 25,
        "message": "Image element missing alt text fallback",
        "description": "Image element missing alt text fallback This code works but could be improved for better maintainability.",
        "suggestion": "Provide meaningful alt text or empty string for decorative images",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                        <img\n                          src={fileItem.preview}\n                          alt={fileItem.file.name || \"File preview\"}\n                          className=\"h-10 w-10 rounded object-cover\"\n                        />",
          "description": "Provide meaningful alt text or empty string for decorative images",
          "content": "                        <img\n                          src={fileItem.preview}\n                          alt={fileItem.file.name || \"File preview\"}\n                          className=\"h-10 w-10 rounded object-cover\"\n                        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.tsx",
        "line": 250,
        "column": 19,
        "message": "Potential memory leak - FileReader not properly cleaned up",
        "description": "Potential memory leak - FileReader not properly cleaned up This implementation could impact application performance.",
        "suggestion": "Add proper cleanup for FileReader to prevent memory leaks",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Create file preview\n    const createPreview = (file: File): Promise<string | null> => {\n      return new Promise((resolve) => {\n        if (file.type.startsWith(\"image/\")) {\n          const reader = new FileReader();\n          \n          const cleanup = () => {\n            reader.removeEventListener('load', onLoad);\n            reader.removeEventListener('error', onError);\n          };\n          \n          const onLoad = (e: ProgressEvent<FileReader>) => {\n            cleanup();\n            const result = e.target?.result;\n            resolve(result ? (result as string) : null);\n          };\n          \n          const onError = () => {\n            cleanup();\n            resolve(null);\n          };\n          \n          reader.addEventListener(\"load\", onLoad);\n          reader.addEventListener(\"error\", onError);\n          reader.readAsDataURL(file);\n        } else {\n          resolve(null);\n        }\n      });\n    };",
          "description": "Add proper cleanup for FileReader to prevent memory leaks",
          "content": "    // Create file preview\n    const createPreview = (file: File): Promise<string | null> => {\n      return new Promise((resolve) => {\n        if (file.type.startsWith(\"image/\")) {\n          const reader = new FileReader();\n          \n          const cleanup = () => {\n            reader.removeEventListener('load', onLoad);\n            reader.removeEventListener('error', onError);\n          };\n          \n          const onLoad = (e: ProgressEvent<FileReader>) => {\n            cleanup();\n            const result = e.target?.result;\n            resolve(result ? (result as string) : null);\n          };\n          \n          const onError = () => {\n            cleanup();\n            resolve(null);\n          };\n          \n          reader.addEventListener(\"load\", onLoad);\n          reader.addEventListener(\"error\", onError);\n          reader.readAsDataURL(file);\n        } else {\n          resolve(null);\n        }\n      });\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx-naming-0",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx",
        "line": 336,
        "column": 12,
        "message": "Unused variable '_uploadingFiles' with underscore prefix should be consistently named or removed",
        "description": "Unused variable '_uploadingFiles' with underscore prefix should be consistently named or removed This code works but could be improved for better maintainability.",
        "suggestion": "Either remove the unused variable or use it consistently without the underscore prefix",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const [uploadingFiles, setUploadingFiles] = useState<\n      Array<FileUploadItem>\n    >([]);",
          "description": "Either remove the unused variable or use it consistently without the underscore prefix",
          "content": "const [uploadingFiles, setUploadingFiles] = useState<\n      Array<FileUploadItem>\n    >([]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx-naming-1",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx",
        "line": 441,
        "column": 12,
        "message": "Unused variable '_documentFiles' with underscore prefix should be consistently named or removed",
        "description": "Unused variable '_documentFiles' with underscore prefix should be consistently named or removed This code works but could be improved for better maintainability.",
        "suggestion": "Either remove the unused variable or use it consistently without the underscore prefix",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const [documentFiles, setDocumentFiles] = useState<Array<FileUploadItem>>(\n      [],\n    );",
          "description": "Either remove the unused variable or use it consistently without the underscore prefix",
          "content": "const [documentFiles, setDocumentFiles] = useState<Array<FileUploadItem>>(\n      [],\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx",
        "line": 339,
        "column": 30,
        "message": "Missing error handling in async upload simulation function",
        "description": "Missing error handling in async upload simulation function This code works but could be improved for better maintainability.",
        "suggestion": "Add try-catch block to handle potential errors during upload simulation",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const simulateUpload = async (_files: Array<File>) => {\n      try {\n        // Simulate upload progress\n        for (let i = 0; i <= 100; i += 10) {\n          await new Promise((resolve) => setTimeout(resolve, 100));\n          setUploadingFiles((current) =>\n            current.map((file) => ({\n              ...file,\n              progress: i,\n              status: i === 100 ? \"success\" : \"uploading\",\n            })),\n          );\n        }\n      } catch (error) {\n        console.error('Upload simulation failed:', error);\n        setUploadingFiles((current) =>\n          current.map((file) => ({\n            ...file,\n            status: \"error\",\n          })),\n        );\n      }\n    };",
          "description": "Add try-catch block to handle potential errors during upload simulation",
          "content": "const simulateUpload = async (_files: Array<File>) => {\n      try {\n        // Simulate upload progress\n        for (let i = 0; i <= 100; i += 10) {\n          await new Promise((resolve) => setTimeout(resolve, 100));\n          setUploadingFiles((current) =>\n            current.map((file) => ({\n              ...file,\n              progress: i,\n              status: i === 100 ? \"success\" : \"uploading\",\n            })),\n          );\n        }\n      } catch (error) {\n        console.error('Upload simulation failed:', error);\n        setUploadingFiles((current) =>\n          current.map((file) => ({\n            ...file,\n            status: \"error\",\n          })),\n        );\n      }\n    };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx",
        "line": 189,
        "column": 44,
        "message": "Multiple console.log statements in production code should be replaced with proper logging or removed",
        "description": "Multiple console.log statements in production code should be replaced with proper logging or removed This implementation could impact application performance.",
        "suggestion": "Replace console.log with proper logging mechanism or remove for production",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-file-upload/glass-file-upload.stories.tsx",
        "line": 180,
        "column": 5,
        "message": "Missing ARIA labels for form sections and file upload examples",
        "description": "Missing ARIA labels for form sections and file upload examples This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or aria-labelledby attributes to form sections for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<div className=\"space-y-8\" role=\"region\" aria-label=\"File upload examples\">\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"simple-upload-heading\">\n          Simple File Upload\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          aria-labelledby=\"simple-upload-heading\"\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"single-upload-heading\">\n          Single File Upload\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          multiple={false}\n          maxFiles={1}\n          dropzoneText=\"Drop a single file here\"\n          browseText=\"Choose file\"\n          aria-labelledby=\"single-upload-heading\"\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"restricted-upload-heading\">\n          With File Restrictions\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          accept=\"image/*\"\n          maxFiles={3}\n          maxFileSize={5 * 1024 * 1024} // 5MB\n          dropzoneText=\"Drop images here (max 5MB each)\"\n          aria-labelledby=\"restricted-upload-heading\"\n        />\n      </div>\n    </div>",
          "description": "Add aria-label or aria-labelledby attributes to form sections for better screen reader support",
          "content": "<div className=\"space-y-8\" role=\"region\" aria-label=\"File upload examples\">\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"simple-upload-heading\">\n          Simple File Upload\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          aria-labelledby=\"simple-upload-heading\"\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"single-upload-heading\">\n          Single File Upload\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          multiple={false}\n          maxFiles={1}\n          dropzoneText=\"Drop a single file here\"\n          browseText=\"Choose file\"\n          aria-labelledby=\"single-upload-heading\"\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium text-sm text-white/80\" id=\"restricted-upload-heading\">\n          With File Restrictions\n        </h3>\n        <GlassFileUpload\n          onFilesChange={(files) => console.log(\"Files:\", files)}\n          accept=\"image/*\"\n          maxFiles={3}\n          maxFileSize={5 * 1024 * 1024} // 5MB\n          dropzoneText=\"Drop images here (max 5MB each)\"\n          aria-labelledby=\"restricted-upload-heading\"\n        />\n      </div>\n    </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing blank line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-dropdown Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-dropdown\";",
          "description": "Remove the trailing blank line",
          "content": "/**\n * glass-dropdown Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-dropdown\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 157,
        "column": 21,
        "message": "Dropdown menu items missing ARIA roles and keyboard navigation support",
        "description": "Dropdown menu items missing ARIA roles and keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add role='menuitem', aria-selected, and keyboard navigation (arrow keys, Enter, Escape) for proper accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 125,
        "column": 11,
        "message": "Missing aria-controls attribute on trigger button to reference dropdown menu",
        "description": "Missing aria-controls attribute on trigger button to reference dropdown menu This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-controls with unique ID referencing the dropdown menu",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <button\n              type=\"button\"\n              ref={triggerRef}\n              onClick={() => setIsOpen(!isOpen)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  setIsOpen(!isOpen);\n                }\n              }}\n              aria-expanded={isOpen}\n              aria-haspopup=\"menu\"\n              aria-controls={isOpen ? \"dropdown-menu\" : undefined}\n              className=\"cursor-pointer\"\n            >",
          "description": "Add aria-controls with unique ID referencing the dropdown menu",
          "content": "            <button\n              type=\"button\"\n              ref={triggerRef}\n              onClick={() => setIsOpen(!isOpen)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  setIsOpen(!isOpen);\n                }\n              }}\n              aria-expanded={isOpen}\n              aria-haspopup=\"menu\"\n              aria-controls={isOpen ? \"dropdown-menu\" : undefined}\n              className=\"cursor-pointer\"\n            >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 142,
        "column": 13,
        "message": "Dropdown menu missing role='menu' and id for proper ARIA labeling",
        "description": "Dropdown menu missing role='menu' and id for proper ARIA labeling This code works but could be improved for better maintainability.",
        "suggestion": "Add role='menu' and id='dropdown-menu' to the dropdown container",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div\n              ref={dropdownRef}\n              style={dropdownStyle}\n              role=\"menu\"\n              id=\"dropdown-menu\"\n              className={cn(\n                getGlassClass(\"elevated\"),\n                \"rounded-xl border border-white/20 py-1 dark:border-white/10\",\n                \"min-w-[160px] max-w-[300px]\",\n                \"fade-in-0 zoom-in-95 animate-in duration-200\",\n                contentClassName,\n              )}\n            >",
          "description": "Add role='menu' and id='dropdown-menu' to the dropdown container",
          "content": "            <div\n              ref={dropdownRef}\n              style={dropdownStyle}\n              role=\"menu\"\n              id=\"dropdown-menu\"\n              className={cn(\n                getGlassClass(\"elevated\"),\n                \"rounded-xl border border-white/20 py-1 dark:border-white/10\",\n                \"min-w-[160px] max-w-[300px]\",\n                \"fade-in-0 zoom-in-95 animate-in duration-200\",\n                contentClassName,\n              )}\n            >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 66,
        "column": 7,
        "message": "Expensive DOM calculations on every render when dropdown is open",
        "description": "Expensive DOM calculations on every render when dropdown is open This implementation could impact application performance.",
        "suggestion": "Debounce or throttle the positioning calculations, or use ResizeObserver for better performance",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 57,
        "column": 9,
        "message": "Potential race condition in useEffect cleanup - event listeners may be removed incorrectly",
        "description": "Potential race condition in useEffect cleanup - event listeners may be removed incorrectly This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move event listener cleanup inside the conditional check or use a cleanup flag",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        return () => {\n          if (isOpen) {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n            document.removeEventListener(\"keydown\", handleEscape);\n          }\n        };",
          "description": "Move event listener cleanup inside the conditional check or use a cleanup flag",
          "content": "        return () => {\n          if (isOpen) {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n            document.removeEventListener(\"keydown\", handleEscape);\n          }\n        };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 146,
        "column": 15,
        "message": "Inconsistent spacing in className concatenation",
        "description": "Inconsistent spacing in className concatenation This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent indentation for multiline className calls",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              className={cn(\n                getGlassClass(\"elevated\"),\n                \"rounded-xl border border-white/20 py-1 dark:border-white/10\",\n                \"min-w-[160px] max-w-[300px]\",\n                \"fade-in-0 zoom-in-95 animate-in duration-200\",\n                contentClassName,\n              )}",
          "description": "Use consistent indentation for multiline className calls",
          "content": "              className={cn(\n                getGlassClass(\"elevated\"),\n                \"rounded-xl border border-white/20 py-1 dark:border-white/10\",\n                \"min-w-[160px] max-w-[300px]\",\n                \"fade-in-0 zoom-in-95 animate-in duration-200\",\n                contentClassName,\n              )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx-architecture-6",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.tsx",
        "line": 89,
        "column": 17,
        "message": "Magic numbers used for viewport margins and z-index should be constants",
        "description": "Magic numbers used for viewport margins and z-index should be constants This code works but could be improved for better maintainability.",
        "suggestion": "Extract magic numbers (8, 9999) into named constants for better maintainability",
        "rule": "architecture",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const VIEWPORT_MARGIN = 8;\nconst DROPDOWN_Z_INDEX = 9999;\n\n        // Keep dropdown within viewport\n        const viewport = {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        };\n\n        if (left < VIEWPORT_MARGIN) {\n          left = VIEWPORT_MARGIN;\n        }\n        if (left + dropdownRect.width > viewport.width - VIEWPORT_MARGIN) {\n          left = viewport.width - dropdownRect.width - VIEWPORT_MARGIN;\n        }\n        if (top + dropdownRect.height > viewport.height - VIEWPORT_MARGIN) {\n          top = triggerRect.top - dropdownRect.height - sideOffset;\n        }\n\n        setDropdownStyle({\n          position: \"fixed\",\n          top: `${top}px`,\n          left: `${left}px`,\n          zIndex: DROPDOWN_Z_INDEX,\n        });",
          "description": "Extract magic numbers (8, 9999) into named constants for better maintainability",
          "content": "const VIEWPORT_MARGIN = 8;\nconst DROPDOWN_Z_INDEX = 9999;\n\n        // Keep dropdown within viewport\n        const viewport = {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        };\n\n        if (left < VIEWPORT_MARGIN) {\n          left = VIEWPORT_MARGIN;\n        }\n        if (left + dropdownRect.width > viewport.width - VIEWPORT_MARGIN) {\n          left = viewport.width - dropdownRect.width - VIEWPORT_MARGIN;\n        }\n        if (top + dropdownRect.height > viewport.height - VIEWPORT_MARGIN) {\n          top = triggerRect.top - dropdownRect.height - sideOffset;\n        }\n\n        setDropdownStyle({\n          position: \"fixed\",\n          top: `${top}px`,\n          left: `${left}px`,\n          zIndex: DROPDOWN_Z_INDEX,\n        });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 337,
        "column": 41,
        "message": "Missing import for 'Upload' component from lucide-react",
        "description": "Missing import for 'Upload' component from lucide-react This will likely cause errors during execution.",
        "suggestion": "Add 'Upload' to the lucide-react imports",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  AlignLeft,\n  Archive,\n  ArrowDown,\n  ArrowUp,\n  BarChart,\n  Bell,\n  Calendar,\n  Check,\n  ChevronDown,\n  Circle,\n  Code,\n  Copy,\n  Database,\n  Download,\n  Edit,\n  Eye,\n  File,\n  FileText,\n  Flag,\n  Folder,\n  Grid,\n  HardDrive,\n  HelpCircle,\n  Keyboard,\n  List,\n  Lock,\n  LogOut,\n  MoreVertical,\n  Printer,\n  RefreshCw,\n  Save,\n  Server,\n  Settings,\n  Share2,\n  Square,\n  Star,\n  Trash2,\n  Upload,\n  User,\n  Video,\n  X,\n} from \"lucide-react\";",
          "description": "Add 'Upload' to the lucide-react imports",
          "content": "import {\n  AlignLeft,\n  Archive,\n  ArrowDown,\n  ArrowUp,\n  BarChart,\n  Bell,\n  Calendar,\n  Check,\n  ChevronDown,\n  Circle,\n  Code,\n  Copy,\n  Database,\n  Download,\n  Edit,\n  Eye,\n  File,\n  FileText,\n  Flag,\n  Folder,\n  Grid,\n  HardDrive,\n  HelpCircle,\n  Keyboard,\n  List,\n  Lock,\n  LogOut,\n  MoreVertical,\n  Printer,\n  RefreshCw,\n  Save,\n  Server,\n  Settings,\n  Share2,\n  Square,\n  Star,\n  Trash2,\n  Upload,\n  User,\n  Video,\n  X,\n} from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 289,
        "column": 11,
        "message": "Missing import for 'Card' component",
        "description": "Missing import for 'Card' component This will likely cause errors during execution.",
        "suggestion": "Add import for Card component or use GlassCard instead",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassCard>",
          "description": "Add import for Card component or use GlassCard instead",
          "content": "          <GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 290,
        "column": 13,
        "message": "Missing import for 'Card' component usage",
        "description": "Missing import for 'Card' component usage This will likely cause errors during execution.",
        "suggestion": "Use GlassCard.Header or import Card component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassCard.Header>",
          "description": "Use GlassCard.Header or import Card component",
          "content": "            <GlassCard.Header>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 292,
        "column": 17,
        "message": "Missing import for 'Card' component usage",
        "description": "Missing import for 'Card' component usage This will likely cause errors during execution.",
        "suggestion": "Use GlassCard.Title or import Card component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <GlassCard.Title>Documents</GlassCard.Title>",
          "description": "Use GlassCard.Title or import Card component",
          "content": "                <GlassCard.Title>Documents</GlassCard.Title>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-4",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 381,
        "column": 15,
        "message": "Missing import for 'Card' component usage",
        "description": "Missing import for 'Card' component usage This will likely cause errors during execution.",
        "suggestion": "Use GlassCard.Header or import Card component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            </GlassCard.Header>",
          "description": "Use GlassCard.Header or import Card component",
          "content": "            </GlassCard.Header>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-5",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 382,
        "column": 13,
        "message": "Missing import for 'Card' component usage",
        "description": "Missing import for 'Card' component usage This will likely cause errors during execution.",
        "suggestion": "Use GlassCard.Content or import Card component",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassCard.Content>",
          "description": "Use GlassCard.Content or import Card component",
          "content": "            <GlassCard.Content>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-6",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 575,
        "column": 27,
        "message": "Missing import for 'cn' utility function",
        "description": "Missing import for 'cn' utility function This will likely cause errors during execution.",
        "suggestion": "Add import for cn utility function from your utils",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "add",
          "oldCode": "",
          "newCode": "import { cn } from \"@/lib/utils\";",
          "description": "Add import for cn utility function from your utils",
          "content": "import { cn } from \"@/lib/utils\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-error-7",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 720,
        "column": 41,
        "message": "Missing import for 'Users' component from lucide-react",
        "description": "Missing import for 'Users' component from lucide-react This will likely cause errors during execution.",
        "suggestion": "Add 'Users' to the lucide-react imports",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  AlignLeft,\n  Archive,\n  ArrowDown,\n  ArrowUp,\n  BarChart,\n  Bell,\n  Calendar,\n  Check,\n  ChevronDown,\n  Circle,\n  Code,\n  Copy,\n  Database,\n  Download,\n  Edit,\n  Eye,\n  File,\n  FileText,\n  Flag,\n  Folder,\n  Grid,\n  HardDrive,\n  HelpCircle,\n  Keyboard,\n  List,\n  Lock,\n  LogOut,\n  MoreVertical,\n  Printer,\n  RefreshCw,\n  Save,\n  Server,\n  Settings,\n  Share2,\n  Square,\n  Star,\n  Trash2,\n  Upload,\n  User,\n  Users,\n  Video,\n  X,\n} from \"lucide-react\";",
          "description": "Add 'Users' to the lucide-react imports",
          "content": "import {\n  AlignLeft,\n  Archive,\n  ArrowDown,\n  ArrowUp,\n  BarChart,\n  Bell,\n  Calendar,\n  Check,\n  ChevronDown,\n  Circle,\n  Code,\n  Copy,\n  Database,\n  Download,\n  Edit,\n  Eye,\n  File,\n  FileText,\n  Flag,\n  Folder,\n  Grid,\n  HardDrive,\n  HelpCircle,\n  Keyboard,\n  List,\n  Lock,\n  LogOut,\n  MoreVertical,\n  Printer,\n  RefreshCw,\n  Save,\n  Server,\n  Settings,\n  Share2,\n  Square,\n  Star,\n  Trash2,\n  Upload,\n  User,\n  Users,\n  Video,\n  X,\n} from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 248,
        "column": 35,
        "message": "Unused state variable '_selectedSort' is prefixed with underscore but still declared",
        "description": "Unused state variable '_selectedSort' is prefixed with underscore but still declared This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the unused state variable or use it in the component",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [selectedSort, setSelectedSort] = React.useState(\"name\");",
          "description": "Remove the unused state variable or use it in the component",
          "content": "    const [selectedSort, setSelectedSort] = React.useState(\"name\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-style-9",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 249,
        "column": 35,
        "message": "Unused state variable '_selectedFilter' is prefixed with underscore but still declared",
        "description": "Unused state variable '_selectedFilter' is prefixed with underscore but still declared This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the unused state variable or use it in the component",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [selectedFilter, setSelectedFilter] = React.useState(\"all\");",
          "description": "Remove the unused state variable or use it in the component",
          "content": "    const [selectedFilter, setSelectedFilter] = React.useState(\"all\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-accessibility-10",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 408,
        "column": 25,
        "message": "Button element inside file card lacks proper accessibility attributes",
        "description": "Button element inside file card lacks proper accessibility attributes This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to describe the action for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                          <button\n                            type=\"button\"\n                            className=\"opacity-0 transition-opacity hover:opacity-100\"\n                            aria-label={`More actions for ${file}`}\n                          >",
          "description": "Add aria-label to describe the action for screen readers",
          "content": "                          <button\n                            type=\"button\"\n                            className=\"opacity-0 transition-opacity hover:opacity-100\"\n                            aria-label={`More actions for ${file}`}\n                          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx-performance-11",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-dropdown/glass-dropdown.stories.tsx",
        "line": 573,
        "column": 25,
        "message": "Inline styles and className concatenation in table row may cause unnecessary re-renders",
        "description": "Inline styles and className concatenation in table row may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move className logic to a separate function or useMemo to optimize performance",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Move className logic to a separate function or useMemo to optimize performance",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/index.ts",
        "line": 7,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing blank line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-drawer Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-drawer\";",
          "description": "Remove the trailing blank line",
          "content": "/**\n * glass-drawer Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-drawer\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 222,
        "column": 13,
        "message": "Close button in overlay position lacks accessible text color contrast and proper focus styling",
        "description": "Close button in overlay position lacks accessible text color contrast and proper focus styling This code works but could be improved for better maintainability.",
        "suggestion": "Add proper color contrast and focus styling for accessibility compliance",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <GlassDrawerClose className=\"absolute top-4 right-4 rounded-md opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-white/10 text-white hover:bg-white/20\">\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </GlassDrawerClose>",
          "description": "Add proper color contrast and focus styling for accessibility compliance",
          "content": "            <GlassDrawerClose className=\"absolute top-4 right-4 rounded-md opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-white/10 text-white hover:bg-white/20\">\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </GlassDrawerClose>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 205,
        "column": 7,
        "message": "Missing keyboard navigation support for drawer content",
        "description": "Missing keyboard navigation support for drawer content This code works but could be improved for better maintainability.",
        "suggestion": "Add focus management and keyboard event handlers for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 207,
        "column": 9,
        "message": "Motion.div component may cause unnecessary re-renders due to inline animation props",
        "description": "Motion.div component may cause unnecessary re-renders due to inline animation props This implementation could impact application performance.",
        "suggestion": "Move animation configuration to a constant outside the component to prevent recreation on each render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const drawerAnimationConfig = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n  exit: { opacity: 0 },\n  transition: { duration: 0.2 }\n};\n\n// ... later in component\n        <motion.div\n          {...drawerAnimationConfig}\n          className=\"flex h-full flex-col\"\n        >",
          "description": "Move animation configuration to a constant outside the component to prevent recreation on each render",
          "content": "const drawerAnimationConfig = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n  exit: { opacity: 0 },\n  transition: { duration: 0.2 }\n};\n\n// ... later in component\n        <motion.div\n          {...drawerAnimationConfig}\n          className=\"flex h-full flex-col\"\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 31,
        "column": 1,
        "message": "Inconsistent use of 'as const' assertions in variant definitions",
        "description": "Inconsistent use of 'as const' assertions in variant definitions This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant 'as const' assertions as they are not needed when using TypeScript with proper typing",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  compoundVariants: [\n    {\n      side: \"left\",\n      size: \"sm\",\n      class: \"max-w-xs\",\n    },\n    {\n      side: \"right\",\n      size: \"sm\",\n      class: \"max-w-xs\",\n    },\n    // ... continue pattern for all compound variants\n  ],\n  defaultVariants: {\n    side: \"right\",\n    size: \"md\",\n  },",
          "description": "Remove redundant 'as const' assertions as they are not needed when using TypeScript with proper typing",
          "content": "  compoundVariants: [\n    {\n      side: \"left\",\n      size: \"sm\",\n      class: \"max-w-xs\",\n    },\n    {\n      side: \"right\",\n      size: \"sm\",\n      class: \"max-w-xs\",\n    },\n    // ... continue pattern for all compound variants\n  ],\n  defaultVariants: {\n    side: \"right\",\n    size: \"md\",\n  },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-architecture-4",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 125,
        "column": 1,
        "message": "Missing prop validation and default props documentation",
        "description": "Missing prop validation and default props documentation This code works but could be improved for better maintainability.",
        "suggestion": "Add JSDoc comments and consider using prop validation for better type safety and documentation",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.tsx",
        "line": 200,
        "column": 7,
        "message": "Drawer content lacks proper ARIA attributes for screen readers",
        "description": "Drawer content lacks proper ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-modal, aria-labelledby, and aria-describedby attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(drawerVariants({ side, size }), className)}\n        aria-modal=\"true\"\n        role=\"dialog\"\n        {...props}\n      >",
          "description": "Add aria-modal, aria-labelledby, and aria-describedby attributes",
          "content": "      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(drawerVariants({ side, size }), className)}\n        aria-modal=\"true\"\n        role=\"dialog\"\n        {...props}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 269,
        "column": 15,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"flex items-center gap-2\">",
          "description": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
          "content": "            <label className=\"flex items-center gap-2\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 275,
        "column": 13,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"flex items-center gap-2\">",
          "description": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
          "content": "            <label className=\"flex items-center gap-2\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 280,
        "column": 13,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <label className=\"flex items-center gap-2\">",
          "description": "Remove 'htmlFor' attribute or ensure it references the correct input ID",
          "content": "            <label className=\"flex items-center gap-2\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 420,
        "column": 15,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Ensure 'htmlFor' attribute references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label\n                htmlFor=\"input-290\"\n                className=\"mb-2 block font-medium text-sm\"\n              >",
          "description": "Ensure 'htmlFor' attribute references the correct input ID",
          "content": "              <label\n                htmlFor=\"input-290\"\n                className=\"mb-2 block font-medium text-sm\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 434,
        "column": 15,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Ensure 'htmlFor' attribute references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label\n                htmlFor=\"input-298\"\n                className=\"mb-2 block font-medium text-sm\"\n              >",
          "description": "Ensure 'htmlFor' attribute references the correct input ID",
          "content": "              <label\n                htmlFor=\"input-298\"\n                className=\"mb-2 block font-medium text-sm\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 448,
        "column": 15,
        "message": "Missing label association - 'htmlFor' attribute references non-existent element",
        "description": "Missing label association - 'htmlFor' attribute references non-existent element This code works but could be improved for better maintainability.",
        "suggestion": "Ensure 'htmlFor' attribute references the correct input ID",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <label\n                htmlFor=\"textarea-1-tg7lb0\"\n                className=\"mb-2 block font-medium text-sm\"\n              >",
          "description": "Ensure 'htmlFor' attribute references the correct input ID",
          "content": "              <label\n                htmlFor=\"textarea-1-tg7lb0\"\n                className=\"mb-2 block font-medium text-sm\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 25,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Default drawer",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// Default drawer"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 65,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Different sides",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// Different sides"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 318,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Different sizes",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// Different sizes"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-9",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 396,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// With form",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// With form"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-10",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 470,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Without close button",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// Without close button"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx-style-11",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-drawer/glass-drawer.stories.tsx",
        "line": 510,
        "column": 1,
        "message": "Using JSX comment syntax in wrong context",
        "description": "Using JSX comment syntax in wrong context This violates code style conventions and may reduce readability.",
        "suggestion": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// With scrollable content",
          "description": "Use regular JavaScript comments instead of JSX comments outside of JSX context",
          "content": "// With scrollable content"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/index.ts",
        "line": 7,
        "column": 1,
        "message": "File has trailing empty lines which should be removed for consistency",
        "description": "File has trailing empty lines which should be removed for consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty lines at the end of the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-date-picker Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-date-picker\";",
          "description": "Remove trailing empty lines at the end of the file",
          "content": "/**\n * glass-date-picker Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-date-picker\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 254,
        "column": 9,
        "message": "Date picker trigger button lacks proper ARIA attributes for accessibility",
        "description": "Date picker trigger button lacks proper ARIA attributes for accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-expanded, aria-haspopup, and aria-label attributes to improve screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          ref={triggerRef}\n          type=\"button\"\n          className={cn(\n            triggerVariants({ isOpen: isOpen ? \"true\" : \"false\", size }),\n            focusRing,\n            disabled && \"cursor-not-allowed\",\n          )}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          disabled={disabled}\n          aria-expanded={isOpen}\n          aria-haspopup=\"dialog\"\n          aria-label={selectedDate ? `Selected date: ${formatDate(selectedDate)}` : placeholder}\n        >",
          "description": "Add aria-expanded, aria-haspopup, and aria-label attributes to improve screen reader support",
          "content": "        <button\n          ref={triggerRef}\n          type=\"button\"\n          className={cn(\n            triggerVariants({ isOpen: isOpen ? \"true\" : \"false\", size }),\n            focusRing,\n            disabled && \"cursor-not-allowed\",\n          )}\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          disabled={disabled}\n          aria-expanded={isOpen}\n          aria-haspopup=\"dialog\"\n          aria-label={selectedDate ? `Selected date: ${formatDate(selectedDate)}` : placeholder}\n        >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 289,
        "column": 19,
        "message": "Calendar navigation buttons lack descriptive labels for screen readers",
        "description": "Calendar navigation buttons lack descriptive labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to previous/next month buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  <button\n                    type=\"button\"\n                    onClick={() => navigateMonth(\"prev\")}\n                    className=\"rounded-lg p-2 transition-colors hover:bg-white/10\"\n                    aria-label=\"Previous month\"\n                  >",
          "description": "Add aria-label attributes to previous/next month buttons",
          "content": "                  <button\n                    type=\"button\"\n                    onClick={() => navigateMonth(\"prev\")}\n                    className=\"rounded-lg p-2 transition-colors hover:bg-white/10\"\n                    aria-label=\"Previous month\"\n                  >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 305,
        "column": 19,
        "message": "Calendar navigation buttons lack descriptive labels for screen readers",
        "description": "Calendar navigation buttons lack descriptive labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to previous/next month buttons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  <button\n                    type=\"button\"\n                    onClick={() => navigateMonth(\"next\")}\n                    className=\"rounded-lg p-2 transition-colors hover:bg-white/10\"\n                    aria-label=\"Next month\"\n                  >",
          "description": "Add aria-label attributes to previous/next month buttons",
          "content": "                  <button\n                    type=\"button\"\n                    onClick={() => navigateMonth(\"next\")}\n                    className=\"rounded-lg p-2 transition-colors hover:bg-white/10\"\n                    aria-label=\"Next month\"\n                  >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 334,
        "column": 25,
        "message": "Date selection buttons lack descriptive labels for screen readers",
        "description": "Date selection buttons lack descriptive labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label with full date information for each date button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      <button\n                        key={index}\n                        type=\"button\"\n                        onClick={() => handleDateSelect(date)}\n                        disabled={disabled}\n                        aria-label={`${date.toLocaleDateString(locale, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}${isSelected ? ', selected' : ''}${isToday ? ', today' : ''}`}\n                        aria-selected={isSelected}\n                        className={cn(\n                          \"rounded-lg p-2 text-center text-sm transition-all duration-200\",\n                          \"hover:bg-white/10 focus:bg-white/10 focus:outline-none\",\n                          !isCurrentMonth && \"text-white/30\",\n                          isSelected && \"bg-blue-500/20 text-blue-400\",\n                          isToday && !isSelected && \"bg-white/10 text-white\",\n                          disabled && \"cursor-not-allowed opacity-50\",\n                        )}\n                      >",
          "description": "Add aria-label with full date information for each date button",
          "content": "                      <button\n                        key={index}\n                        type=\"button\"\n                        onClick={() => handleDateSelect(date)}\n                        disabled={disabled}\n                        aria-label={`${date.toLocaleDateString(locale, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}${isSelected ? ', selected' : ''}${isToday ? ', today' : ''}`}\n                        aria-selected={isSelected}\n                        className={cn(\n                          \"rounded-lg p-2 text-center text-sm transition-all duration-200\",\n                          \"hover:bg-white/10 focus:bg-white/10 focus:outline-none\",\n                          !isCurrentMonth && \"text-white/30\",\n                          isSelected && \"bg-blue-500/20 text-blue-400\",\n                          isToday && !isSelected && \"bg-white/10 text-white\",\n                          disabled && \"cursor-not-allowed opacity-50\",\n                        )}\n                      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 360,
        "column": 25,
        "message": "Time input fields lack proper labels for screen readers",
        "description": "Time input fields lack proper labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to hour and minute input fields",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"23\"\n                          value={timeValue.hours}\n                          onChange={(e) =>\n                            handleTimeChange(\n                              \"hours\",\n                              Number.parseInt(e.target.value),\n                            )\n                          }\n                          aria-label=\"Hours\"\n                          className=\"w-16 rounded border border-white/10 bg-white/5 px-2 py-1 text-center text-white\"\n                        />",
          "description": "Add aria-label attributes to hour and minute input fields",
          "content": "                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"23\"\n                          value={timeValue.hours}\n                          onChange={(e) =>\n                            handleTimeChange(\n                              \"hours\",\n                              Number.parseInt(e.target.value),\n                            )\n                          }\n                          aria-label=\"Hours\"\n                          className=\"w-16 rounded border border-white/10 bg-white/5 px-2 py-1 text-center text-white\"\n                        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 374,
        "column": 25,
        "message": "Time input fields lack proper labels for screen readers",
        "description": "Time input fields lack proper labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to hour and minute input fields",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"59\"\n                          value={timeValue.minutes}\n                          onChange={(e) =>\n                            handleTimeChange(\n                              \"minutes\",\n                              Number.parseInt(e.target.value),\n                            )\n                          }\n                          aria-label=\"Minutes\"\n                          className=\"w-16 rounded border border-white/10 bg-white/5 px-2 py-1 text-center text-white\"\n                        />",
          "description": "Add aria-label attributes to hour and minute input fields",
          "content": "                        <input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"59\"\n                          value={timeValue.minutes}\n                          onChange={(e) =>\n                            handleTimeChange(\n                              \"minutes\",\n                              Number.parseInt(e.target.value),\n                            )\n                          }\n                          aria-label=\"Minutes\"\n                          className=\"w-16 rounded border border-white/10 bg-white/5 px-2 py-1 text-center text-white\"\n                        />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 365,
        "column": 31,
        "message": "Potential runtime error when parsing invalid number input",
        "description": "Potential runtime error when parsing invalid number input This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add validation to handle invalid or empty input values",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                            handleTimeChange(\n                              \"hours\",\n                              Math.max(0, Math.min(23, Number.parseInt(e.target.value) || 0)),\n                            )",
          "description": "Add validation to handle invalid or empty input values",
          "content": "                            handleTimeChange(\n                              \"hours\",\n                              Math.max(0, Math.min(23, Number.parseInt(e.target.value) || 0)),\n                            )"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 379,
        "column": 31,
        "message": "Potential runtime error when parsing invalid number input",
        "description": "Potential runtime error when parsing invalid number input This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add validation to handle invalid or empty input values",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                            handleTimeChange(\n                              \"minutes\",\n                              Math.max(0, Math.min(59, Number.parseInt(e.target.value) || 0)),\n                            )",
          "description": "Add validation to handle invalid or empty input values",
          "content": "                            handleTimeChange(\n                              \"minutes\",\n                              Math.max(0, Math.min(59, Number.parseInt(e.target.value) || 0)),\n                            )"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-performance-8",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 236,
        "column": 5,
        "message": "Calendar grid recalculates on every render even when viewDate hasn't changed",
        "description": "Calendar grid recalculates on every render even when viewDate hasn't changed This implementation could impact application performance.",
        "suggestion": "Memoize the getDaysInMonth calculation using useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { forwardRef, useEffect, useRef, useState, useMemo } from \"react\";",
          "description": "Memoize the getDaysInMonth calculation using useMemo",
          "content": "import { forwardRef, useEffect, useRef, useState, useMemo } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.tsx",
        "line": 237,
        "column": 5,
        "message": "Week days array recalculates on every render",
        "description": "Week days array recalculates on every render This implementation could impact application performance.",
        "suggestion": "Move static arrays outside component or use useMemo",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const days = useMemo(() => getDaysInMonth(viewDate), [viewDate, weekStartsOn]);\n    const reorderedWeekDays = useMemo(() => {\n      const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n      return [\n        ...weekDays.slice(weekStartsOn),\n        ...weekDays.slice(0, weekStartsOn),\n      ];\n    }, [weekStartsOn]);",
          "description": "Move static arrays outside component or use useMemo",
          "content": "    const days = useMemo(() => getDaysInMonth(viewDate), [viewDate, weekStartsOn]);\n    const reorderedWeekDays = useMemo(() => {\n      const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n      return [\n        ...weekDays.slice(weekStartsOn),\n        ...weekDays.slice(0, weekStartsOn),\n      ];\n    }, [weekStartsOn]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 25,
        "column": 7,
        "message": "Missing semantic HTML structure - headings (h3) should be properly structured with appropriate heading hierarchy",
        "description": "Missing semantic HTML structure - headings (h3) should be properly structured with appropriate heading hierarchy This code works but could be improved for better maintainability.",
        "suggestion": "Ensure heading hierarchy is logical and consider using proper semantic structure",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 32,
        "column": 17,
        "message": "Hard-coded dates may not be internationalized and could cause issues in different locales",
        "description": "Hard-coded dates may not be internationalized and could cause issues in different locales This code works but could be improved for better maintainability.",
        "suggestion": "Consider using locale-aware date construction or relative dates",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 32,
        "column": 32,
        "message": "Inconsistent string quotes - mixing single and double quotes",
        "description": "Inconsistent string quotes - mixing single and double quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        minDate={new Date('2024-01-01')}\n        maxDate={new Date('2024-12-31')}",
          "description": "Use consistent quote style throughout the file",
          "content": "        minDate={new Date('2024-01-01')}\n        maxDate={new Date('2024-12-31')}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 33,
        "column": 32,
        "message": "Inconsistent string quotes - mixing single and double quotes",
        "description": "Inconsistent string quotes - mixing single and double quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        maxDate={new Date('2024-12-31')}",
          "description": "Use consistent quote style throughout the file",
          "content": "        maxDate={new Date('2024-12-31')}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 44,
        "column": 56,
        "message": "Inconsistent string quotes - mixing single and double quotes",
        "description": "Inconsistent string quotes - mixing single and double quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassDatePicker placeholder='MM/DD/YYYY format...' format='MM/dd/yyyy' />",
          "description": "Use consistent quote style throughout the file",
          "content": "    <GlassDatePicker placeholder='MM/DD/YYYY format...' format='MM/dd/yyyy' />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 47,
        "column": 49,
        "message": "Inconsistent string quotes - mixing single and double quotes",
        "description": "Inconsistent string quotes - mixing single and double quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      format='EEEE, MMMM do, yyyy'",
          "description": "Use consistent quote style throughout the file",
          "content": "      format='EEEE, MMMM do, yyyy'"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-date-picker/glass-date-picker.stories.tsx",
        "line": 49,
        "column": 50,
        "message": "Inconsistent string quotes - mixing single and double quotes",
        "description": "Inconsistent string quotes - mixing single and double quotes This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent quote style throughout the file",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <GlassDatePicker placeholder='ISO format...' format='yyyy-MM-dd' />",
          "description": "Use consistent quote style throughout the file",
          "content": "    <GlassDatePicker placeholder='ISO format...' format='yyyy-MM-dd' />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary trailing empty line at end of file",
        "description": "Unnecessary trailing empty line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-command Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-command\";",
          "description": "Remove the trailing empty line",
          "content": "/**\n * glass-command Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-command\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx",
        "line": 114,
        "column": 5,
        "message": "useEffect dependency array is empty but should include 'query' to reset selectedIndex when query changes",
        "description": "useEffect dependency array is empty but should include 'query' to reset selectedIndex when query changes This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add 'query' to the dependency array to properly reset selectedIndex when search query changes",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  useEffect(() => {\n    setSelectedIndex(0);\n  }, [query]);",
          "description": "Add 'query' to the dependency array to properly reset selectedIndex when search query changes",
          "content": "  useEffect(() => {\n    setSelectedIndex(0);\n  }, [query]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx",
        "line": 241,
        "column": 11,
        "message": "Missing aria-describedby attribute to associate search input with instructions",
        "description": "Missing aria-describedby attribute to associate search input with instructions This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby attribute to connect the input with footer instructions for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <input\n            ref={inputRef}\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder={placeholder}\n            aria-describedby=\"command-palette-instructions\"\n            className={cn(\n              \"flex-1 border-none bg-transparent outline-none\",\n              \"text-[var(--text-primary)] placeholder:text-[var(--text-secondary)]\",\n              \"text-lg\",\n            )}\n          />",
          "description": "Add aria-describedby attribute to connect the input with footer instructions for screen readers",
          "content": "          <input\n            ref={inputRef}\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder={placeholder}\n            aria-describedby=\"command-palette-instructions\"\n            className={cn(\n              \"flex-1 border-none bg-transparent outline-none\",\n              \"text-[var(--text-primary)] placeholder:text-[var(--text-secondary)]\",\n              \"text-lg\",\n            )}\n          />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx",
        "line": 327,
        "column": 9,
        "message": "Footer instructions should have an id to be referenced by aria-describedby",
        "description": "Footer instructions should have an id to be referenced by aria-describedby This code works but could be improved for better maintainability.",
        "suggestion": "Add id=\"command-palette-instructions\" to the footer div for proper ARIA association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <div id=\"command-palette-instructions\" className=\"flex items-center justify-between border-[var(--liquid-glass-border)] border-t px-4 py-3 text-[var(--text-tertiary)] text-xs\">",
          "description": "Add id=\"command-palette-instructions\" to the footer div for proper ARIA association",
          "content": "        <div id=\"command-palette-instructions\" className=\"flex items-center justify-between border-[var(--liquid-glass-border)] border-t px-4 py-3 text-[var(--text-tertiary)] text-xs\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx",
        "line": 214,
        "column": 7,
        "message": "Command palette modal needs proper ARIA attributes for dialog accessibility",
        "description": "Command palette modal needs proper ARIA attributes for dialog accessibility This code works but could be improved for better maintainability.",
        "suggestion": "Add role=\"dialog\", aria-modal=\"true\", and aria-labelledby attributes to make this a proper modal dialog",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div\n        ref={containerRef}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"command-palette-title\"\n        className={cn(\n          \"relative mx-4 w-full max-w-2xl overflow-hidden rounded-2xl border\",\n          getGlassClass(\"elevated\"),\n          \"border-[var(--liquid-glass-border)]\",\n          \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        )}\n      >",
          "description": "Add role=\"dialog\", aria-modal=\"true\", and aria-labelledby attributes to make this a proper modal dialog",
          "content": "      <div\n        ref={containerRef}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"command-palette-title\"\n        className={cn(\n          \"relative mx-4 w-full max-w-2xl overflow-hidden rounded-2xl border\",\n          getGlassClass(\"elevated\"),\n          \"border-[var(--liquid-glass-border)]\",\n          \"fade-in-0 zoom-in-95 animate-in duration-200\",\n        )}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.tsx",
        "line": 38,
        "column": 3,
        "message": "Expensive filtering and categorization operations run on every render",
        "description": "Expensive filtering and categorization operations run on every render This implementation could impact application performance.",
        "suggestion": "Wrap filtering and categorization logic in useMemo to prevent unnecessary recalculations",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  // Filter and categorize items\n  const { filteredItems, categorizedItems, allFilteredItems } = useMemo(() => {\n    const filtered = items.filter((item) => {\n      const searchTerms = query.toLowerCase().split(\" \");\n      const itemText =\n        `${item.label} ${item.description || \"\"} ${item.keywords?.join(\" \") || \"\"}`.toLowerCase();\n      return searchTerms.every((term) => itemText.includes(term));\n    });\n\n    const categorized = filtered.reduce(\n      (accumulator, item) => {\n        const category = item.category || \"General\";\n        if (!accumulator[category]) {\n          accumulator[category] = [];\n        }\n        accumulator[category].push(item);\n        return accumulator;\n      },\n      {} as Record<string, Array<CommandItem>>,\n    );\n\n    const allFiltered = Object.values(categorized).flat();\n\n    return {\n      filteredItems: filtered,\n      categorizedItems: categorized,\n      allFilteredItems: allFiltered\n    };\n  }, [items, query]);",
          "description": "Wrap filtering and categorization logic in useMemo to prevent unnecessary recalculations",
          "content": "  // Filter and categorize items\n  const { filteredItems, categorizedItems, allFilteredItems } = useMemo(() => {\n    const filtered = items.filter((item) => {\n      const searchTerms = query.toLowerCase().split(\" \");\n      const itemText =\n        `${item.label} ${item.description || \"\"} ${item.keywords?.join(\" \") || \"\"}`.toLowerCase();\n      return searchTerms.every((term) => itemText.includes(term));\n    });\n\n    const categorized = filtered.reduce(\n      (accumulator, item) => {\n        const category = item.category || \"General\";\n        if (!accumulator[category]) {\n          accumulator[category] = [];\n        }\n        accumulator[category].push(item);\n        return accumulator;\n      },\n      {} as Record<string, Array<CommandItem>>,\n    );\n\n    const allFiltered = Object.values(categorized).flat();\n\n    return {\n      filteredItems: filtered,\n      categorizedItems: categorized,\n      allFilteredItems: allFiltered\n    };\n  }, [items, query]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 75,
        "column": 26,
        "message": "Hard-coded color values used without considering color contrast or theme support",
        "description": "Hard-coded color values used without considering color contrast or theme support This code works but could be improved for better maintainability.",
        "suggestion": "Use CSS custom properties or theme-aware classes instead of hard-coded text-white class",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 80,
        "column": 26,
        "message": "Hard-coded color values used without considering color contrast or theme support",
        "description": "Hard-coded color values used without considering color contrast or theme support This code works but could be improved for better maintainability.",
        "suggestion": "Use CSS custom properties or theme-aware classes instead of hard-coded text-white class",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 10,
        "column": 12,
        "message": "Inline JSX elements in array definition may cause unnecessary re-renders",
        "description": "Inline JSX elements in array definition may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Consider memoizing icons or moving them to a factory function to prevent recreation on each render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Consider memoizing icons or moving them to a factory function to prevent recreation on each render",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 13,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle settings action */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle settings action */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 22,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle profile action */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle profile action */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 31,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle search action */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle search action */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 40,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle new file action */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle new file action */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-7",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 49,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle quick actions */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle quick actions */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx-style-8",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-command/glass-command.stories.tsx",
        "line": 58,
        "column": 14,
        "message": "Console.log statements in production code",
        "description": "Console.log statements in production code This violates code style conventions and may reduce readability.",
        "suggestion": "Replace console.log with proper action handlers or remove for production",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    action: () => { /* Handle hashtags action */ },",
          "description": "Replace console.log with proper action handlers or remove for production",
          "content": "    action: () => { /* Handle hashtags action */ },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/index.ts",
        "line": 7,
        "column": 45,
        "message": "Trailing whitespace detected at end of line",
        "description": "Trailing whitespace detected at end of line This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing whitespace",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-checkbox-group\";",
          "description": "Remove trailing whitespace",
          "content": "export * from \"./glass-checkbox-group\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/index.ts",
        "line": 8,
        "column": 1,
        "message": "Unnecessary empty line at end of file",
        "description": "Unnecessary empty line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-checkbox-group Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-checkbox-group\";",
          "description": "Remove trailing empty line",
          "content": "/**\n * glass-checkbox-group Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-checkbox-group\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx",
        "line": 170,
        "column": 13,
        "message": "aria-describedby should not concatenate IDs with cn() function - use space-separated string instead",
        "description": "aria-describedby should not concatenate IDs with cn() function - use space-separated string instead This code works but could be improved for better maintainability.",
        "suggestion": "Concatenate description and error IDs with space separator instead of using cn() function",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          aria-describedby={\n            description || error\n              ? [description && descriptionId, error && errorId]\n                  .filter(Boolean)\n                  .join(' ')\n              : undefined\n          }",
          "description": "Concatenate description and error IDs with space separator instead of using cn() function",
          "content": "          aria-describedby={\n            description || error\n              ? [description && descriptionId, error && errorId]\n                  .filter(Boolean)\n                  .join(' ')\n              : undefined\n          }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx",
        "line": 183,
        "column": 21,
        "message": "Variant type mismatch - disabled variant expects boolean but receives string",
        "description": "Variant type mismatch - disabled variant expects boolean but receives string This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Pass boolean value directly instead of string to disabled variant",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                className={cn(\n                  checkboxItemVariants({\n                    itemSize: size,\n                    disabled: isDisabled,\n                  }),\n                )}",
          "description": "Pass boolean value directly instead of string to disabled variant",
          "content": "                className={cn(\n                  checkboxItemVariants({\n                    itemSize: size,\n                    disabled: isDisabled,\n                  }),\n                )}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx",
        "line": 42,
        "column": 5,
        "message": "defaultVariants for disabled should be boolean false, not string 'false'",
        "description": "defaultVariants for disabled should be boolean false, not string 'false' This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Change defaultVariants disabled value from string 'false' to boolean false",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  defaultVariants: {\n    itemSize: \"md\",\n    disabled: false,\n  },",
          "description": "Change defaultVariants disabled value from string 'false' to boolean false",
          "content": "  defaultVariants: {\n    itemSize: \"md\",\n    disabled: false,\n  },"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx",
        "line": 115,
        "column": 7,
        "message": "State initialization with value || defaultValue may cause unnecessary re-renders",
        "description": "State initialization with value || defaultValue may cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Use lazy initial state to avoid recalculating on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const [internalValue, setInternalValue] = useState<Array<string>>(() =>\n      value || defaultValue,\n    );",
          "description": "Use lazy initial state to avoid recalculating on every render",
          "content": "    const [internalValue, setInternalValue] = useState<Array<string>>(() =>\n      value || defaultValue,\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.tsx",
        "line": 66,
        "column": 3,
        "message": "Unused props in interface should be handled or documented",
        "description": "Unused props in interface should be handled or documented This violates code style conventions and may reduce readability.",
        "suggestion": "Either use the unused props (physics, magnetic, hapticFeedback, etc.) in component logic or document why they're unused",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx",
        "line": 19,
        "column": 5,
        "message": "Missing accessibility attributes for form group. Should include proper labeling and fieldset/legend structure for screen readers",
        "description": "Missing accessibility attributes for form group. Should include proper labeling and fieldset/legend structure for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Wrap checkbox groups in fieldset with legend or add aria-labelledby/aria-label attributes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <div className=\"apple-glass mx-auto max-w-md p-8\">\n    <fieldset>\n      <legend className=\"sr-only\">Select fruits</legend>\n      <GlassCheckboxGroup name=\"fruits\">\n        <GlassCheckbox label=\"Apple\" name=\"fruits\" value=\"apple\" />\n        <GlassCheckbox label=\"Banana\" name=\"fruits\" value=\"banana\" />\n        <GlassCheckbox label=\"Cherry\" name=\"fruits\" value=\"cherry\" />\n      </GlassCheckboxGroup>\n    </fieldset>\n  </div>",
          "description": "Wrap checkbox groups in fieldset with legend or add aria-labelledby/aria-label attributes",
          "content": "  <div className=\"apple-glass mx-auto max-w-md p-8\">\n    <fieldset>\n      <legend className=\"sr-only\">Select fruits</legend>\n      <GlassCheckboxGroup name=\"fruits\">\n        <GlassCheckbox label=\"Apple\" name=\"fruits\" value=\"apple\" />\n        <GlassCheckbox label=\"Banana\" name=\"fruits\" value=\"banana\" />\n        <GlassCheckbox label=\"Cherry\" name=\"fruits\" value=\"cherry\" />\n      </GlassCheckboxGroup>\n    </fieldset>\n  </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx",
        "line": 28,
        "column": 5,
        "message": "Missing accessibility attributes for form groups in edge cases example",
        "description": "Missing accessibility attributes for form groups in edge cases example This code works but could be improved for better maintainability.",
        "suggestion": "Add proper fieldset/legend structure for each checkbox group",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  <div className=\"apple-glass mx-auto max-w-md p-8\">\n    <fieldset>\n      <legend className=\"sr-only\">Empty group example</legend>\n      <GlassCheckboxGroup name=\"empty-group\">\n        {/* No children: should render an empty group gracefully */}\n      </GlassCheckboxGroup>\n    </fieldset>\n    <div className=\"mt-6\" />\n    <fieldset>\n      <legend className=\"sr-only\">Long labels example</legend>\n      <GlassCheckboxGroup name=\"long-labels\">\n        <GlassCheckbox\n          label=\"A very long label that should wrap and not break the layout of the checkbox group in any way.\"\n          name=\"long-labels\"\n          value=\"long1\"\n        />\n        <GlassCheckbox label=\"Short\" name=\"long-labels\" value=\"short\" />\n      </GlassCheckboxGroup>\n    </fieldset>\n  </div>",
          "description": "Add proper fieldset/legend structure for each checkbox group",
          "content": "  <div className=\"apple-glass mx-auto max-w-md p-8\">\n    <fieldset>\n      <legend className=\"sr-only\">Empty group example</legend>\n      <GlassCheckboxGroup name=\"empty-group\">\n        {/* No children: should render an empty group gracefully */}\n      </GlassCheckboxGroup>\n    </fieldset>\n    <div className=\"mt-6\" />\n    <fieldset>\n      <legend className=\"sr-only\">Long labels example</legend>\n      <GlassCheckboxGroup name=\"long-labels\">\n        <GlassCheckbox\n          label=\"A very long label that should wrap and not break the layout of the checkbox group in any way.\"\n          name=\"long-labels\"\n          value=\"long1\"\n        />\n        <GlassCheckbox label=\"Short\" name=\"long-labels\" value=\"short\" />\n      </GlassCheckboxGroup>\n    </fieldset>\n  </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox-group/glass-checkbox-group.stories.tsx",
        "line": 1,
        "column": 1,
        "message": "CSS class 'sr-only' used in fix may not be available. Consider using utility class or adding proper styles",
        "description": "CSS class 'sr-only' used in fix may not be available. Consider using utility class or adding proper styles This violates code style conventions and may reduce readability.",
        "suggestion": "Ensure sr-only utility class is available or use inline styles for screen reader only content",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/index.ts",
        "line": 2,
        "column": 1,
        "message": "Unnecessary comment line break and formatting inconsistency",
        "description": "Unnecessary comment line break and formatting inconsistency This violates code style conventions and may reduce readability.",
        "suggestion": "Combine comment into a single line or use proper JSDoc format",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-combobox Component Export\n * Re-export everything for compatibility\n */",
          "description": "Combine comment into a single line or use proper JSDoc format",
          "content": "/**\n * glass-combobox Component Export\n * Re-export everything for compatibility\n */"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/index.ts",
        "line": 4,
        "column": 1,
        "message": "Missing error handling for module re-export - if the target module doesn't exist, this will cause a runtime error",
        "description": "Missing error handling for module re-export - if the target module doesn't exist, this will cause a runtime error This will likely cause errors during execution.",
        "suggestion": "Consider adding explicit exports or error handling to ensure the target module exists",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 322,
        "column": 19,
        "message": "Undefined import 'Search' - component is used but not imported from lucide-react",
        "description": "Undefined import 'Search' - component is used but not imported from lucide-react This will likely cause errors during execution.",
        "suggestion": "Add Search to the lucide-react imports",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Check, ChevronDown, Search, X } from \"lucide-react\";",
          "description": "Add Search to the lucide-react imports",
          "content": "import { Check, ChevronDown, Search, X } from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 124,
        "column": 55,
        "message": "Potential memory leak: ref forwarding not properly handled",
        "description": "Potential memory leak: ref forwarding not properly handled This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use useImperativeHandle to properly expose ref methods or merge refs",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 257,
        "column": 13,
        "message": "Missing aria-describedby for helper text association",
        "description": "Missing aria-describedby for helper text association This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-describedby attribute to associate helper text with the combobox",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-describedby={helperText ? `${id}-helper` : undefined}",
          "description": "Add aria-describedby attribute to associate helper text with the combobox",
          "content": "            aria-describedby={helperText ? `${id}-helper` : undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 407,
        "column": 11,
        "message": "Helper text missing id for aria-describedby association",
        "description": "Helper text missing id for aria-describedby association This code works but could be improved for better maintainability.",
        "suggestion": "Add id attribute to helper text paragraph",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <p\n            id={`${id}-helper`}\n            className={cn(\n              \"mt-2 text-sm\",\n              error ? \"text-liquid-accent\" : \"text-liquid-secondary\",\n            )}\n          >",
          "description": "Add id attribute to helper text paragraph",
          "content": "          <p\n            id={`${id}-helper`}\n            className={cn(\n              \"mt-2 text-sm\",\n              error ? \"text-liquid-accent\" : \"text-liquid-secondary\",\n            )}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 141,
        "column": 5,
        "message": "Inefficient filtering on every render - consider memoization",
        "description": "Inefficient filtering on every render - consider memoization This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize filtered options",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    // Filter options based on search input\n    const filteredOptions = useMemo(() => \n      searchable\n        ? options.filter(\n            (option) =>\n              option.label.toLowerCase().includes(inputValue.toLowerCase()) ||\n              option.description\n                ?.toLowerCase()\n                .includes(inputValue.toLowerCase()),\n          )\n        : options,\n      [options, searchable, inputValue]\n    );",
          "description": "Use useMemo to memoize filtered options",
          "content": "    // Filter options based on search input\n    const filteredOptions = useMemo(() => \n      searchable\n        ? options.filter(\n            (option) =>\n              option.label.toLowerCase().includes(inputValue.toLowerCase()) ||\n              option.description\n                ?.toLowerCase()\n                .includes(inputValue.toLowerCase()),\n          )\n        : options,\n      [options, searchable, inputValue]\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 151,
        "column": 5,
        "message": "Inefficient slice operation on every render - consider memoization",
        "description": "Inefficient slice operation on every render - consider memoization This implementation could impact application performance.",
        "suggestion": "Use useMemo to memoize display options",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const displayOptions = useMemo(() => \n      filteredOptions.slice(0, maxDisplayOptions),\n      [filteredOptions, maxDisplayOptions]\n    );",
          "description": "Use useMemo to memoize display options",
          "content": "    const displayOptions = useMemo(() => \n      filteredOptions.slice(0, maxDisplayOptions),\n      [filteredOptions, maxDisplayOptions]\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-bug-6",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 4,
        "column": 10,
        "message": "Missing import for useMemo hook needed for performance optimization",
        "description": "Missing import for useMemo hook needed for performance optimization This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add useMemo to React imports",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { forwardRef, useEffect, useId, useMemo, useRef, useState } from \"react\";",
          "description": "Add useMemo to React imports",
          "content": "import { forwardRef, useEffect, useId, useMemo, useRef, useState } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.tsx",
        "line": 257,
        "column": 13,
        "message": "Button with combobox role should have proper aria-owns attribute",
        "description": "Button with combobox role should have proper aria-owns attribute This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-owns attribute to indicate ownership of the listbox",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            aria-owns={isOpen ? `${id}-listbox` : undefined}",
          "description": "Add aria-owns attribute to indicate ownership of the listbox",
          "content": "            aria-owns={isOpen ? `${id}-listbox` : undefined}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx",
        "line": 44,
        "column": 7,
        "message": "Hardcoded text content may not be accessible to non-English users or screen readers",
        "description": "Hardcoded text content may not be accessible to non-English users or screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Extract text strings to constants or use internationalization keys",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const LABELS = {\n  DISABLED_OPTIONS: 'Disabled Options',\n  LOADING_STATE: 'Loading State',\n  EMPTY_STATE: 'Empty State'\n};\n\n// Then use: <h3 className=\"mb-2 text-white\">{LABELS.DISABLED_OPTIONS}</h3>",
          "description": "Extract text strings to constants or use internationalization keys",
          "content": "const LABELS = {\n  DISABLED_OPTIONS: 'Disabled Options',\n  LOADING_STATE: 'Loading State',\n  EMPTY_STATE: 'Empty State'\n};\n\n// Then use: <h3 className=\"mb-2 text-white\">{LABELS.DISABLED_OPTIONS}</h3>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx",
        "line": 44,
        "column": 7,
        "message": "Missing semantic structure - h3 elements should be properly nested within a section or article",
        "description": "Missing semantic structure - h3 elements should be properly nested within a section or article This code works but could be improved for better maintainability.",
        "suggestion": "Wrap content sections in semantic HTML elements like <section> with proper heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<section>\n      <h3 className=\"mb-2 text-white\">Disabled Options</h3>\n      <GlassCombobox\n        options={disabledOptions}\n        placeholder=\"Some options are disabled...\"\n        searchable\n      />\n    </section>",
          "description": "Wrap content sections in semantic HTML elements like <section> with proper heading hierarchy",
          "content": "<section>\n      <h3 className=\"mb-2 text-white\">Disabled Options</h3>\n      <GlassCombobox\n        options={disabledOptions}\n        placeholder=\"Some options are disabled...\"\n        searchable\n      />\n    </section>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx",
        "line": 36,
        "column": 5,
        "message": "Missing aria-label or aria-labelledby for combobox components in story examples",
        "description": "Missing aria-label or aria-labelledby for combobox components in story examples This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or associate with heading using aria-labelledby for better screen reader support",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "<GlassCombobox\n      options={sampleOptions}\n      placeholder=\"Select a fruit...\"\n      searchable\n      clearable\n      aria-label=\"Fruit selection combobox\"\n    />",
          "description": "Add aria-label or associate with heading using aria-labelledby for better screen reader support",
          "content": "<GlassCombobox\n      options={sampleOptions}\n      placeholder=\"Select a fruit...\"\n      searchable\n      clearable\n      aria-label=\"Fruit selection combobox\"\n    />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx",
        "line": 4,
        "column": 1,
        "message": "Static arrays are recreated on every render",
        "description": "Static arrays are recreated on every render This implementation could impact application performance.",
        "suggestion": "Move static data outside component or use useMemo to prevent unnecessary re-creation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const sampleOptions = [\n  { value: \"apple\", label: \"Apple\", icon: \"🍎\" },\n  { value: \"banana\", label: \"Banana\", icon: \"🍌\" },\n  { value: \"cherry\", label: \"Cherry\", icon: \"🍒\" },\n  { value: \"dragonfruit\", label: \"Dragon Fruit\", icon: \"🐉\" },\n  { value: \"elderberry\", label: \"Elderberry\", icon: \"🫐\" },\n] as const;",
          "description": "Move static data outside component or use useMemo to prevent unnecessary re-creation",
          "content": "const sampleOptions = [\n  { value: \"apple\", label: \"Apple\", icon: \"🍎\" },\n  { value: \"banana\", label: \"Banana\", icon: \"🍌\" },\n  { value: \"cherry\", label: \"Cherry\", icon: \"🍒\" },\n  { value: \"dragonfruit\", label: \"Dragon Fruit\", icon: \"🐉\" },\n  { value: \"elderberry\", label: \"Elderberry\", icon: \"🫐\" },\n] as const;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-combobox/glass-combobox.stories.tsx",
        "line": 12,
        "column": 1,
        "message": "Static arrays are recreated on every render",
        "description": "Static arrays are recreated on every render This implementation could impact application performance.",
        "suggestion": "Move static data outside component or use useMemo to prevent unnecessary re-creation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const disabledOptions = [\n  { value: \"apple\", label: \"Apple\", icon: \"🍎\" },\n  { value: \"banana\", label: \"Banana\", icon: \"🍌\", disabled: true },\n  { value: \"cherry\", label: \"Cherry\", icon: \"🍒\" },\n  { value: \"dragonfruit\", label: \"Dragon Fruit\", icon: \"🐉\", disabled: true },\n  { value: \"elderberry\", label: \"Elderberry\", icon: \"🫐\" },\n] as const;",
          "description": "Move static data outside component or use useMemo to prevent unnecessary re-creation",
          "content": "const disabledOptions = [\n  { value: \"apple\", label: \"Apple\", icon: \"🍎\" },\n  { value: \"banana\", label: \"Banana\", icon: \"🍌\", disabled: true },\n  { value: \"cherry\", label: \"Cherry\", icon: \"🍒\" },\n  { value: \"dragonfruit\", label: \"Dragon Fruit\", icon: \"🐉\", disabled: true },\n  { value: \"elderberry\", label: \"Elderberry\", icon: \"🫐\" },\n] as const;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant re-export statement - 'export * from \"./glass-card\"' already exports GlassCard",
        "description": "Redundant re-export statement - 'export * from \"./glass-card\"' already exports GlassCard This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the named export since the wildcard export already includes it",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Glass Card Refactored Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-card\";\n",
          "description": "Remove the named export since the wildcard export already includes it",
          "content": "/**\n * Glass Card Refactored Component Export\n */\n\n// Re-export everything for compatibility\nexport * from \"./glass-card\";\n"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 92,
        "column": 11,
        "message": "Interactive card rendered as button but may contain non-interactive content that could cause accessibility issues",
        "description": "Interactive card rendered as button but may contain non-interactive content that could cause accessibility issues This code works but could be improved for better maintainability.",
        "suggestion": "Consider using div with role='button' and proper keyboard event handlers, or ensure button only contains appropriate content",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 93,
        "column": 17,
        "message": "Type casting ref from HTMLDivElement to HTMLButtonElement is unsafe and may cause runtime errors",
        "description": "Type casting ref from HTMLDivElement to HTMLButtonElement is unsafe and may cause runtime errors This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use proper ref typing with union types or separate refs for different elements",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const GlassCard = forwardRef<HTMLDivElement | HTMLButtonElement, GlassCardProps>(\n  (\n    {\n      children,\n      size = \"md\",\n      variant = \"default\",\n      interactive = false,\n      selected = false,\n      className,\n      onClick,\n      ...props\n    },\n    ref,\n  ) => {\n    const contextValue: CardContextValue = {\n      size,\n      variant,\n      interactive,\n      selected,\n    };\n\n    const cardClasses = cn(\n      // Use the layered liquid glass container system\n      \"liquid-glass-container\",\n\n      // Size and variant\n      sizeConfig[size],\n      variantConfig[variant],\n\n      // Interactive states\n      {\n        \"liquid-glass-interactive cursor-pointer\": interactive || onClick,\n        \"ring-2 ring-liquid-accent\": selected,\n      },\n\n      className,\n    );\n\n    return (\n      <CardContext.Provider value={contextValue}>\n        {interactive || onClick ? (\n          <button\n            ref={ref as React.RefObject<HTMLButtonElement>}\n            className={cardClasses}\n            onClick={onClick}\n            type=\"button\"\n            {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\n          >",
          "description": "Use proper ref typing with union types or separate refs for different elements",
          "content": "export const GlassCard = forwardRef<HTMLDivElement | HTMLButtonElement, GlassCardProps>(\n  (\n    {\n      children,\n      size = \"md\",\n      variant = \"default\",\n      interactive = false,\n      selected = false,\n      className,\n      onClick,\n      ...props\n    },\n    ref,\n  ) => {\n    const contextValue: CardContextValue = {\n      size,\n      variant,\n      interactive,\n      selected,\n    };\n\n    const cardClasses = cn(\n      // Use the layered liquid glass container system\n      \"liquid-glass-container\",\n\n      // Size and variant\n      sizeConfig[size],\n      variantConfig[variant],\n\n      // Interactive states\n      {\n        \"liquid-glass-interactive cursor-pointer\": interactive || onClick,\n        \"ring-2 ring-liquid-accent\": selected,\n      },\n\n      className,\n    );\n\n    return (\n      <CardContext.Provider value={contextValue}>\n        {interactive || onClick ? (\n          <button\n            ref={ref as React.RefObject<HTMLButtonElement>}\n            className={cardClasses}\n            onClick={onClick}\n            type=\"button\"\n            {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 96,
        "column": 13,
        "message": "Props spreading without proper type filtering may cause React warnings when spreading div props to button",
        "description": "Props spreading without proper type filtering may cause React warnings when spreading div props to button This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Filter props appropriately for button vs div elements",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-design-pattern-3",
        "type": "design-pattern",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 91,
        "column": 7,
        "message": "Context is provided but never consumed by child components, creating unnecessary overhead",
        "description": "Context is provided but never consumed by child components, creating unnecessary overhead This code works but could be improved for better maintainability.",
        "suggestion": "Either use the context in child components or remove it if not needed",
        "rule": "design-pattern",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 104,
        "column": 17,
        "message": "Hardcoded flex classes in content layer should be configurable or removed for flexibility",
        "description": "Hardcoded flex classes in content layer should be configurable or removed for flexibility This violates code style conventions and may reduce readability.",
        "suggestion": "Make layout classes configurable through props or remove hardcoded values",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            {/* Content Layer */}\n            <div className=\"liquid-glass-content\">\n              {children}\n            </div>",
          "description": "Make layout classes configurable through props or remove hardcoded values",
          "content": "            {/* Content Layer */}\n            <div className=\"liquid-glass-content\">\n              {children}\n            </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 116,
        "column": 17,
        "message": "Duplicate hardcoded flex classes in content layer",
        "description": "Duplicate hardcoded flex classes in content layer This violates code style conventions and may reduce readability.",
        "suggestion": "Make layout classes configurable through props or remove hardcoded values",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            {/* Content Layer */}\n            <div className=\"liquid-glass-content\">\n              {children}\n            </div>",
          "description": "Make layout classes configurable through props or remove hardcoded values",
          "content": "            {/* Content Layer */}\n            <div className=\"liquid-glass-content\">\n              {children}\n            </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx-architecture-6",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.tsx",
        "line": 92,
        "column": 9,
        "message": "Code duplication between button and div rendering paths",
        "description": "Code duplication between button and div rendering paths This code works but could be improved for better maintainability.",
        "suggestion": "Extract common rendering logic to reduce duplication",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx",
        "line": 141,
        "column": 7,
        "message": "Missing import for Card component - using Card in tests but only importing GlassCard",
        "description": "Missing import for Card component - using Card in tests but only importing GlassCard This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import the Card component or use GlassCard consistently throughout the tests",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { GlassCard as Card } from \"./glass-card\";",
          "description": "Import the Card component or use GlassCard consistently throughout the tests",
          "content": "import { GlassCard as Card } from \"./glass-card\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx",
        "line": 82,
        "column": 5,
        "message": "Test assertion may be too specific - checking for absence of 'p-' class may match other classes containing 'p-'",
        "description": "Test assertion may be too specific - checking for absence of 'p-' class may match other classes containing 'p-' This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use more specific assertion to check for specific padding classes instead of partial match",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx",
        "line": 55,
        "column": 5,
        "message": "Missing accessibility test for aria-pressed state changes in selectable card",
        "description": "Missing accessibility test for aria-pressed state changes in selectable card This code works but could be improved for better maintainability.",
        "suggestion": "Add assertion to verify aria-pressed changes to 'true' after selection",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"handles selectable state\", () => {\n    let selected = false;\n    const handleSelect = (isSelected: boolean) => {\n      selected = isSelected;\n    };\n\n    render(\n      <GlassCard selectable onCardSelect={handleSelect}>\n        Selectable Card\n      </GlassCard>,\n    );\n\n    const card = screen.getByRole(\"button\");\n    expect(card).toHaveAttribute(\"aria-pressed\", \"false\");\n\n    fireEvent.click(card);\n    expect(selected).toBe(true);\n    expect(card).toHaveAttribute(\"aria-pressed\", \"true\");\n  });",
          "description": "Add assertion to verify aria-pressed changes to 'true' after selection",
          "content": "  it(\"handles selectable state\", () => {\n    let selected = false;\n    const handleSelect = (isSelected: boolean) => {\n      selected = isSelected;\n    };\n\n    render(\n      <GlassCard selectable onCardSelect={handleSelect}>\n        Selectable Card\n      </GlassCard>,\n    );\n\n    const card = screen.getByRole(\"button\");\n    expect(card).toHaveAttribute(\"aria-pressed\", \"false\");\n\n    fireEvent.click(card);\n    expect(selected).toBe(true);\n    expect(card).toHaveAttribute(\"aria-pressed\", \"true\");\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx",
        "line": 141,
        "column": 7,
        "message": "Inconsistent component naming - mixing Card and GlassCard in the same test file",
        "description": "Inconsistent component naming - mixing Card and GlassCard in the same test file This violates code style conventions and may reduce readability.",
        "suggestion": "Use consistent component naming throughout the test file",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx-bug-4",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.test.tsx",
        "line": 122,
        "column": 3,
        "message": "Hover test doesn't assert any meaningful behavior - only fires events without verification",
        "description": "Hover test doesn't assert any meaningful behavior - only fires events without verification This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add assertions to verify hover state changes or remove the test if hover behavior is purely visual",
        "rule": "bug",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-0",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 258,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard.Header>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        <GlassCard.Header>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-1",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 259,
        "column": 11,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassCard.Title>Glass Card</GlassCard.Title>",
          "description": "Import Card component or use GlassCard instead",
          "content": "          <GlassCard.Title>Glass Card</GlassCard.Title>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-2",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 260,
        "column": 11,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <GlassCard.Description>",
          "description": "Import Card component or use GlassCard instead",
          "content": "          <GlassCard.Description>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-3",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 263,
        "column": 11,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          </GlassCard.Description>",
          "description": "Import Card component or use GlassCard instead",
          "content": "          </GlassCard.Description>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-4",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 264,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        </GlassCard.Header>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        </GlassCard.Header>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-5",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 265,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard.Content>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        <GlassCard.Content>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-6",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 271,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        </GlassCard.Content>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        </GlassCard.Content>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-7",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 272,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassCard.Footer>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        <GlassCard.Footer>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-bug-8",
        "type": "bug",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 276,
        "column": 9,
        "message": "Card component is referenced but not imported or defined",
        "description": "Card component is referenced but not imported or defined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import Card component or use GlassCard instead",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        </GlassCard.Footer>",
          "description": "Import Card component or use GlassCard instead",
          "content": "        </GlassCard.Footer>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-error-9",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 439,
        "column": 12,
        "message": "Unused variable '_selected3' declared but never used",
        "description": "Unused variable '_selected3' declared but never used This will likely cause errors during execution.",
        "suggestion": "Remove the unused variable or prefix with underscore if intentionally unused",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-error-10",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 439,
        "column": 25,
        "message": "Unused variable '_setSelected3' declared but never used",
        "description": "Unused variable '_setSelected3' declared but never used This will likely cause errors during execution.",
        "suggestion": "Remove the unused variable or prefix with underscore if intentionally unused",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx-accessibility-11",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card.stories.tsx",
        "line": 457,
        "column": 9,
        "message": "Button elements with click handlers should have proper role attributes when acting as cards",
        "description": "Button elements with click handlers should have proper role attributes when acting as cards This code works but could be improved for better maintainability.",
        "suggestion": "Add role='button' and proper ARIA attributes for interactive cards",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 8,
        "column": 29,
        "message": "Unused import 'fireEvent' from @testing-library/react",
        "description": "Unused import 'fireEvent' from @testing-library/react This implementation could impact application performance.",
        "suggestion": "Remove unused import to reduce bundle size",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { render, screen, waitFor } from \"@testing-library/react\";",
          "description": "Remove unused import to reduce bundle size",
          "content": "import { render, screen, waitFor } from \"@testing-library/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 8,
        "column": 48,
        "message": "Unused import 'waitFor' from @testing-library/react",
        "description": "Unused import 'waitFor' from @testing-library/react This implementation could impact application performance.",
        "suggestion": "Remove unused import to reduce bundle size",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { render, screen, fireEvent } from \"@testing-library/react\";",
          "description": "Remove unused import to reduce bundle size",
          "content": "import { render, screen, fireEvent } from \"@testing-library/react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 10,
        "column": 49,
        "message": "Unused import 'beforeEach' from vitest",
        "description": "Unused import 'beforeEach' from vitest This implementation could impact application performance.",
        "suggestion": "Remove unused import to reduce bundle size",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { describe, it, expect, vi } from \"vitest\";",
          "description": "Remove unused import to reduce bundle size",
          "content": "import { describe, it, expect, vi } from \"vitest\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 540,
        "column": 7,
        "message": "Performance timing test may be flaky in CI environments",
        "description": "Performance timing test may be flaky in CI environments This implementation could impact application performance.",
        "suggestion": "Consider removing performance timing assertions or using more robust performance testing approaches",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-architecture-4",
        "type": "architecture",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 13,
        "column": 1,
        "message": "Component interface testing without actual component implementation visibility",
        "description": "Component interface testing without actual component implementation visibility This code works but could be improved for better maintainability.",
        "suggestion": "Consider importing types/interfaces explicitly to ensure component API contract testing",
        "rule": "architecture",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 504,
        "column": 22,
        "message": "Creating 50 React elements in loop may impact test performance",
        "description": "Creating 50 React elements in loop may impact test performance This implementation could impact application performance.",
        "suggestion": "Consider reducing the number of test instances or using virtual rendering for performance tests",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-card-refactored/glass-card-refactored.test.tsx",
        "line": 457,
        "column": 7,
        "message": "Accessibility test assumes specific aria-label behavior without testing fallback scenarios",
        "description": "Accessibility test assumes specific aria-label behavior without testing fallback scenarios This code works but could be improved for better maintainability.",
        "suggestion": "Add tests for cases where aria-label might not be automatically generated",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/index.ts",
        "line": 3,
        "column": 4,
        "message": "Unnecessary comment separator after block comment",
        "description": "Unnecessary comment separator after block comment This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant inline comment as the block comment already provides context",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-checkbox Component Export\n */\nexport * from \"./glass-checkbox\";",
          "description": "Remove the redundant inline comment as the block comment already provides context",
          "content": "/**\n * glass-checkbox Component Export\n */\nexport * from \"./glass-checkbox\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx-security-0",
        "type": "security",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx",
        "line": 12,
        "column": 12,
        "message": "Using Math.random() for ID generation creates predictable, non-cryptographically secure identifiers that could lead to security vulnerabilities",
        "description": "Using Math.random() for ID generation creates predictable, non-cryptographically secure identifiers that could lead to security vulnerabilities This could potentially expose your application to security vulnerabilities.",
        "suggestion": "Use crypto.randomUUID() or a proper UUID library for secure ID generation",
        "rule": "security",
        "category": "Security",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      id || `checkbox-${crypto.randomUUID()}`;",
          "description": "Use crypto.randomUUID() or a proper UUID library for secure ID generation",
          "content": "      id || `checkbox-${crypto.randomUUID()}`;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx",
        "line": 32,
        "column": 25,
        "message": "Using special characters like '✓' for checkmarks may not be accessible to screen readers and could cause encoding issues",
        "description": "Using special characters like '✓' for checkmarks may not be accessible to screen readers and could cause encoding issues This code works but could be improved for better maintainability.",
        "suggestion": "Use a proper SVG icon or Unicode checkmark that is screen reader friendly",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              \"checked:after:content-['✔'] checked:after:absolute checked:after:inset-0\",",
          "description": "Use a proper SVG icon or Unicode checkmark that is screen reader friendly",
          "content": "              \"checked:after:content-['✔'] checked:after:absolute checked:after:inset-0\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.tsx",
        "line": 12,
        "column": 12,
        "message": "Math.random().toString(36).slice(2, 11) is called on every render, causing unnecessary computation",
        "description": "Math.random().toString(36).slice(2, 11) is called on every render, causing unnecessary computation This implementation could impact application performance.",
        "suggestion": "Generate ID outside of render or use useId hook from React 18+",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { forwardRef, useId } from \"react\";",
          "description": "Generate ID outside of render or use useId hook from React 18+",
          "content": "import { forwardRef, useId } from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 675,
        "column": 21,
        "message": "Missing import for 'Users' component used in RealWorldExamples story",
        "description": "Missing import for 'Users' component used in RealWorldExamples story This will likely cause errors during execution.",
        "suggestion": "Add import for Users component from lucide-react or replace with an existing icon",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  Bell,\n  File,\n  Globe,\n  Mail,\n  MessageCircle,\n  Settings,\n  Shield,\n  Users,\n} from \"lucide-react\";",
          "description": "Add import for Users component from lucide-react or replace with an existing icon",
          "content": "import {\n  Bell,\n  File,\n  Globe,\n  Mail,\n  MessageCircle,\n  Settings,\n  Shield,\n  Users,\n} from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 231,
        "column": 12,
        "message": "Missing import for 'Card' component used in InteractiveDemo story",
        "description": "Missing import for 'Card' component used in InteractiveDemo story This will likely cause errors during execution.",
        "suggestion": "Import Card component or replace with GlassCard",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <GlassCard className=\"max-w-md p-6\">",
          "description": "Import Card component or replace with GlassCard",
          "content": "      <GlassCard className=\"max-w-md p-6\">"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 282,
        "column": 7,
        "message": "Missing closing tag for Card component - should be GlassCard",
        "description": "Missing closing tag for Card component - should be GlassCard This will likely cause errors during execution.",
        "suggestion": "Replace closing Card tag with GlassCard",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      </GlassCard>",
          "description": "Replace closing Card tag with GlassCard",
          "content": "      </GlassCard>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 224,
        "column": 11,
        "message": "Unused variable '_someChecked' is declared but never used meaningfully",
        "description": "Unused variable '_someChecked' is declared but never used meaningfully This violates code style conventions and may reduce readability.",
        "suggestion": "Remove underscore prefix or use the variable properly for indeterminate state",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const someChecked = Object.values(checkedItems).some(Boolean);",
          "description": "Remove underscore prefix or use the variable properly for indeterminate state",
          "content": "    const someChecked = Object.values(checkedItems).some(Boolean);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 244,
        "column": 23,
        "message": "Checkbox indeterminate state is set via ref but should use the someChecked variable",
        "description": "Checkbox indeterminate state is set via ref but should use the someChecked variable This code works but could be improved for better maintainability.",
        "suggestion": "Use the someChecked variable instead of _someChecked for indeterminate state",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              ref={(el) => {\n                if (el) {\n                  el.indeterminate = someChecked && !allChecked;\n                }\n              }}",
          "description": "Use the someChecked variable instead of _someChecked for indeterminate state",
          "content": "              ref={(el) => {\n                if (el) {\n                  el.indeterminate = someChecked && !allChecked;\n                }\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 306,
        "column": 7,
        "message": "Form submission uses alert() which blocks the UI thread",
        "description": "Form submission uses alert() which blocks the UI thread This implementation could impact application performance.",
        "suggestion": "Use console.log or a proper notification system instead of alert",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      console.log('Form submitted:', formData);",
          "description": "Use console.log or a proper notification system instead of alert",
          "content": "      console.log('Form submitted:', formData);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 778,
        "column": 15,
        "message": "Checkbox with aria-label lacks proper labeling context in accessibility showcase",
        "description": "Checkbox with aria-label lacks proper labeling context in accessibility showcase This code works but could be improved for better maintainability.",
        "suggestion": "Provide more descriptive aria-label or use proper label association",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <GlassCheckbox aria-label=\"Option with hidden visual label for screen readers\" />",
          "description": "Provide more descriptive aria-label or use proper label association",
          "content": "              <GlassCheckbox aria-label=\"Option with hidden visual label for screen readers\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-checkbox/glass-checkbox.stories.tsx",
        "line": 824,
        "column": 19,
        "message": "Error state example uses className for validation styling instead of proper ARIA attributes",
        "description": "Error state example uses className for validation styling instead of proper ARIA attributes This code works but could be improved for better maintainability.",
        "suggestion": "Remove className styling and rely on proper ARIA attributes for error indication",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                <GlassCheckbox\n                  label=\"Accept terms and conditions\"\n                  required\n                  aria-invalid=\"true\"\n                  aria-describedby=\"terms-error\"\n                />",
          "description": "Remove className styling and rely on proper ARIA attributes for error indication",
          "content": "                <GlassCheckbox\n                  label=\"Accept terms and conditions\"\n                  required\n                  aria-invalid=\"true\"\n                  aria-describedby=\"terms-error\"\n                />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/index.ts",
        "line": 6,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing blank line",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-chart Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-chart\";",
          "description": "Remove trailing blank line",
          "content": "/**\n * glass-chart Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-chart\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/index.ts-error-1",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/index.ts",
        "line": 5,
        "column": 1,
        "message": "Re-export statement may fail if './glass-chart' module doesn't exist or has no exports",
        "description": "Re-export statement may fail if './glass-chart' module doesn't exist or has no exports This will likely cause errors during execution.",
        "suggestion": "Verify that './glass-chart' module exists and has exports, or add explicit named exports",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 89,
        "column": 11,
        "message": "SVG elements should have aria-hidden='false' or proper ARIA labels when containing interactive content",
        "description": "SVG elements should have aria-hidden='false' or proper ARIA labels when containing interactive content This code works but could be improved for better maintainability.",
        "suggestion": "Remove aria-hidden='true' since the SVG contains interactive elements (clickable circles)",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          className=\"overflow-visible\"",
          "description": "Remove aria-hidden='true' since the SVG contains interactive elements (clickable circles)",
          "content": "          className=\"overflow-visible\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 166,
        "column": 17,
        "message": "Interactive elements should handle keyboard events, not just mouse events",
        "description": "Interactive elements should handle keyboard events, not just mouse events This code works but could be improved for better maintainability.",
        "suggestion": "Add onKeyDown handler to support keyboard navigation",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    setHoveredPoint(hoveredPoint === index ? null : index);\n                  }\n                }}",
          "description": "Add onKeyDown handler to support keyboard navigation",
          "content": "                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    setHoveredPoint(hoveredPoint === index ? null : index);\n                  }\n                }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 75,
        "column": 23,
        "message": "Math.random() in render can cause unnecessary re-renders and hydration mismatches",
        "description": "Math.random() in render can cause unnecessary re-renders and hydration mismatches This implementation could impact application performance.",
        "suggestion": "Move gradient ID generation to useRef or useMemo to maintain consistency",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const gradientId = useRef(`gradient-${Math.random().toString(36).slice(2, 11)}`).current;",
          "description": "Move gradient ID generation to useRef or useMemo to maintain consistency",
          "content": "  const gradientId = useRef(`gradient-${Math.random().toString(36).slice(2, 11)}`).current;"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 233,
        "column": 11,
        "message": "SVG should not have aria-hidden when it contains meaningful content",
        "description": "SVG should not have aria-hidden when it contains meaningful content This code works but could be improved for better maintainability.",
        "suggestion": "Remove aria-hidden='true' from SVG containing chart data",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          className=\"overflow-visible\"",
          "description": "Remove aria-hidden='true' from SVG containing chart data",
          "content": "          className=\"overflow-visible\""
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 378,
        "column": 35,
        "message": "SVG should not have aria-hidden when it contains meaningful content",
        "description": "SVG should not have aria-hidden when it contains meaningful content This code works but could be improved for better maintainability.",
        "suggestion": "Remove aria-hidden='true' from SVG containing chart data",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <svg width={width} height={height}>",
          "description": "Remove aria-hidden='true' from SVG containing chart data",
          "content": "        <svg width={width} height={height}>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-performance-5",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 41,
        "column": 21,
        "message": "Repeated calculations in render method should be memoized",
        "description": "Repeated calculations in render method should be memoized This implementation could impact application performance.",
        "suggestion": "Use useMemo for expensive calculations like maxValue, minValue, and range",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const { maxValue, minValue, range } = useMemo(() => {\n    const max = Math.max(...data.map((d) => d.value));\n    const min = Math.min(...data.map((d) => d.value));\n    return { maxValue: max, minValue: min, range: max - min || 1 };\n  }, [data]);",
          "description": "Use useMemo for expensive calculations like maxValue, minValue, and range",
          "content": "  const { maxValue, minValue, range } = useMemo(() => {\n    const max = Math.max(...data.map((d) => d.value));\n    const min = Math.min(...data.map((d) => d.value));\n    return { maxValue: max, minValue: min, range: max - min || 1 };\n  }, [data]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-performance-6",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 47,
        "column": 17,
        "message": "Complex calculations in render should be memoized",
        "description": "Complex calculations in render should be memoized This implementation could impact application performance.",
        "suggestion": "Use useMemo for points calculation to avoid recalculating on every render",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const points = useMemo(() => data.map((d, index) => ({\n    x: padding + (index / (data.length - 1)) * chartWidth,\n    y: padding + ((maxValue - d.value) / range) * chartHeight,\n    data: d,\n  })), [data, padding, chartWidth, chartHeight, maxValue, range]);",
          "description": "Use useMemo for points calculation to avoid recalculating on every render",
          "content": "  const points = useMemo(() => data.map((d, index) => ({\n    x: padding + (index / (data.length - 1)) * chartWidth,\n    y: padding + ((maxValue - d.value) / range) * chartHeight,\n    data: d,\n  })), [data, padding, chartWidth, chartHeight, maxValue, range]);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.tsx",
        "line": 48,
        "column": 21,
        "message": "Division by zero potential when data.length is 1",
        "description": "Division by zero potential when data.length is 1 This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Handle case when data.length is 1 to avoid division by zero",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    x: padding + (data.length === 1 ? chartWidth / 2 : (index / (data.length - 1)) * chartWidth),",
          "description": "Handle case when data.length is 1 to avoid division by zero",
          "content": "    x: padding + (data.length === 1 ? chartWidth / 2 : (index / (data.length - 1)) * chartWidth),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx",
        "line": 234,
        "column": 1,
        "message": "React import should be at the top of the file",
        "description": "React import should be at the top of the file This code works but could be improved for better maintainability.",
        "suggestion": "Move React import to the top of the file with other imports",
        "rule": "structure",
        "category": "Architecture & Design Patterns",
        "fix": {
          "type": "move",
          "oldCode": "",
          "newCode": "import React from \"react\";",
          "description": "Move React import to the top of the file with other imports",
          "content": "import React from \"react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx-convention-1",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx",
        "line": 8,
        "column": 7,
        "message": "Missing explicit type annotation for meta object",
        "description": "Missing explicit type annotation for meta object This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type annotation 'Meta<typeof GlassChart>' or similar",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx",
        "line": 47,
        "column": 7,
        "message": "Missing alt text or aria-label for chart components",
        "description": "Missing alt text or aria-label for chart components This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or title props to chart components for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx",
        "line": 213,
        "column": 1,
        "message": "Function generateRealtimeData is recreated on every render",
        "description": "Function generateRealtimeData is recreated on every render This implementation could impact application performance.",
        "suggestion": "Move generateRealtimeData outside the component or wrap with useCallback",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "move",
          "oldCode": "",
          "newCode": "const generateRealtimeData = () => {\n  const now = new Date();\n  return Array.from({ length: 10 }, (_, i) => ({\n    label: `${now.getHours()}:${String(now.getMinutes() - (9 - i)).padStart(2, \"0\")}`,\n    value: Math.floor(Math.random() * 50) + 50,\n  }));\n};",
          "description": "Move generateRealtimeData outside the component or wrap with useCallback",
          "content": "const generateRealtimeData = () => {\n  const now = new Date();\n  return Array.from({ length: 10 }, (_, i) => ({\n    label: `${now.getHours()}:${String(now.getMinutes() - (9 - i)).padStart(2, \"0\")}`,\n    value: Math.floor(Math.random() * 50) + 50,\n  }));\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-chart/glass-chart.stories.tsx",
        "line": 182,
        "column": 13,
        "message": "Inconsistent CSS class usage - 'glass-card' class may not be defined",
        "description": "Inconsistent CSS class usage - 'glass-card' class may not be defined This violates code style conventions and may reduce readability.",
        "suggestion": "Ensure 'glass-card' class is defined in your CSS or use a consistent styling approach",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/index.ts",
        "line": 4,
        "column": 1,
        "message": "Redundant export statement - re-exporting everything makes the named export unnecessary",
        "description": "Redundant export statement - re-exporting everything makes the named export unnecessary This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the named export since 'export * from' already exports everything including GlassButton",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * Refactored Glass Button Component Export\n */\n\n// Export everything from glass-button module\nexport * from \"./glass-button\";",
          "description": "Remove the named export since 'export * from' already exports everything including GlassButton",
          "content": "/**\n * Refactored Glass Button Component Export\n */\n\n// Export everything from glass-button module\nexport * from \"./glass-button\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 77,
        "column": 3,
        "message": "Loading spinner missing proper accessibility attributes for screen readers",
        "description": "Loading spinner missing proper accessibility attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative loading spinner and ensure loading state is announced via aria-live region",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const LoadingSpinner = ({ className }: { className?: string }) => (\n  <svg\n    className={cn(\"animate-spin\", className)}\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    />\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    />\n  </svg>\n);",
          "description": "Add aria-hidden='true' to decorative loading spinner and ensure loading state is announced via aria-live region",
          "content": "const LoadingSpinner = ({ className }: { className?: string }) => (\n  <svg\n    className={cn(\"animate-spin\", className)}\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    />\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    />\n  </svg>\n);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 165,
        "column": 5,
        "message": "Button component missing aria-label or accessible name when iconOnly is true",
        "description": "Button component missing aria-label or accessible name when iconOnly is true This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label prop requirement when iconOnly is true to ensure accessible button name",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 165,
        "column": 5,
        "message": "Loading state not properly announced to screen readers",
        "description": "Loading state not properly announced to screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-busy attribute and aria-live region to announce loading state changes",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    return (\n      <button\n        ref={ref}\n        className={buttonClasses}\n        disabled={disabled || loading}\n        aria-busy={loading}\n        {...props}\n      >\n        {content}\n      </button>\n    );",
          "description": "Add aria-busy attribute and aria-live region to announce loading state changes",
          "content": "    return (\n      <button\n        ref={ref}\n        className={buttonClasses}\n        disabled={disabled || loading}\n        aria-busy={loading}\n        {...props}\n      >\n        {content}\n      </button>\n    );"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 4,
        "column": 28,
        "message": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue",
        "description": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate 'liquid' from comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": " * Implements the signature liquid-glass effect with layered approach,",
          "description": "Remove duplicate 'liquid' from comment",
          "content": " * Implements the signature liquid-glass effect with layered approach,"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 42,
        "column": 32,
        "message": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue",
        "description": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate 'liquid' from comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Size configurations using liquid-glass system",
          "description": "Remove duplicate 'liquid' from comment",
          "content": "// Size configurations using liquid-glass system"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-style-5",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 60,
        "column": 35,
        "message": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue",
        "description": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate 'liquid' from comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "// Variant configurations using liquid-glass system",
          "description": "Remove duplicate 'liquid' from comment",
          "content": "// Variant configurations using liquid-glass system"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-style-6",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 116,
        "column": 12,
        "message": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue",
        "description": "Repetitive 'liquid liquid-glass' in comment suggests typo or formatting issue This violates code style conventions and may reduce readability.",
        "suggestion": "Remove duplicate 'liquid' from comment",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      // Base liquid-glass styles",
          "description": "Remove duplicate 'liquid' from comment",
          "content": "      // Base liquid-glass styles"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx-bug-7",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.tsx",
        "line": 74,
        "column": 10,
        "message": "Inconsistent CSS class naming in destructive variant configuration",
        "description": "Inconsistent CSS class naming in destructive variant configuration This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use consistent naming pattern like other variants (liquid-glass-button-destructive)",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    base: \"liquid-glass-button-destructive bg-gradient-to-b from-red-500 to-red-600\",",
          "description": "Use consistent naming pattern like other variants (liquid-glass-button-destructive)",
          "content": "    base: \"liquid-glass-button-destructive bg-gradient-to-b from-red-500 to-red-600\","
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx",
        "line": 23,
        "column": 5,
        "message": "Redundant class assertions in size test cases - testing same base classes for all sizes",
        "description": "Redundant class assertions in size test cases - testing same base classes for all sizes This implementation could impact application performance.",
        "suggestion": "Focus on size-specific classes (padding, font-size) rather than shared layout classes",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"applies correct size classes\", () => {\n    const { rerender } = render(<GlassButton size=\"sm\">Small</GlassButton>);\n    let button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-3\", \"py-1.5\", \"text-sm\");\n\n    rerender(<GlassButton size=\"md\">Medium</GlassButton>);\n    button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-4\", \"py-2\", \"text-base\");\n\n    rerender(<GlassButton size=\"lg\">Large</GlassButton>);\n    button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-6\", \"py-3\", \"text-lg\");\n  });",
          "description": "Focus on size-specific classes (padding, font-size) rather than shared layout classes",
          "content": "  it(\"applies correct size classes\", () => {\n    const { rerender } = render(<GlassButton size=\"sm\">Small</GlassButton>);\n    let button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-3\", \"py-1.5\", \"text-sm\");\n\n    rerender(<GlassButton size=\"md\">Medium</GlassButton>);\n    button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-4\", \"py-2\", \"text-base\");\n\n    rerender(<GlassButton size=\"lg\">Large</GlassButton>);\n    button = screen.getByRole(\"button\");\n    expect(button).toHaveClass(\"px-6\", \"py-3\", \"text-lg\");\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx-bug-1",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx",
        "line": 46,
        "column": 5,
        "message": "Click handler test uses mutable variable instead of mock function",
        "description": "Click handler test uses mutable variable instead of mock function This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Use vi.fn() mock function for better test isolation and assertions",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"handles click events\", () => {\n    const handleClick = vi.fn();\n\n    render(<GlassButton onClick={handleClick}>Click me</GlassButton>);\n    const button = screen.getByRole(\"button\");\n\n    fireEvent.click(button);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });",
          "description": "Use vi.fn() mock function for better test isolation and assertions",
          "content": "  it(\"handles click events\", () => {\n    const handleClick = vi.fn();\n\n    render(<GlassButton onClick={handleClick}>Click me</GlassButton>);\n    const button = screen.getByRole(\"button\");\n\n    fireEvent.click(button);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing vi import for mock functions",
        "description": "Missing vi import for mock functions This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Import vi from vitest for proper mock function usage",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { describe, expect, it, vi } from \"vitest\";",
          "description": "Import vi from vitest for proper mock function usage",
          "content": "import { describe, expect, it, vi } from \"vitest\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx",
        "line": 80,
        "column": 5,
        "message": "Loading state test should verify aria-busy attribute for screen readers",
        "description": "Loading state test should verify aria-busy attribute for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add assertion for aria-busy=\"true\" when loading state is active",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"renders loading state correctly\", () => {\n    render(<GlassButton loading>Loading</GlassButton>);\n    const button = screen.getByRole(\"button\");\n\n    expect(button).toBeDisabled();\n    expect(button).toHaveClass(\"cursor-wait\");\n    expect(button).toHaveAttribute(\"aria-busy\", \"true\");\n    expect(screen.getByText(\"Loading\")).toBeInTheDocument();\n  });",
          "description": "Add assertion for aria-busy=\"true\" when loading state is active",
          "content": "  it(\"renders loading state correctly\", () => {\n    render(<GlassButton loading>Loading</GlassButton>);\n    const button = screen.getByRole(\"button\");\n\n    expect(button).toBeDisabled();\n    expect(button).toHaveClass(\"cursor-wait\");\n    expect(button).toHaveAttribute(\"aria-busy\", \"true\");\n    expect(screen.getByText(\"Loading\")).toBeInTheDocument();\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.test.tsx",
        "line": 140,
        "column": 5,
        "message": "Icon-only button test should verify aria-label for screen readers",
        "description": "Icon-only button test should verify aria-label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add assertion for aria-label attribute when iconOnly is true",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"renders icon-only button correctly\", () => {\n    const Icon = () => <span data-testid=\"icon\">★</span>;\n    render(\n      <GlassButton iconOnly>\n        <Icon />\n        Hidden Text\n      </GlassButton>,\n    );\n\n    const button = screen.getByRole(\"button\");\n    expect(screen.getByTestId(\"icon\")).toBeInTheDocument();\n    const hiddenText = screen.getByText(\"Hidden Text\");\n    expect(hiddenText).toHaveClass(\"sr-only\");\n    expect(button).toHaveAttribute(\"aria-label\", \"Hidden Text\");\n  });",
          "description": "Add assertion for aria-label attribute when iconOnly is true",
          "content": "  it(\"renders icon-only button correctly\", () => {\n    const Icon = () => <span data-testid=\"icon\">★</span>;\n    render(\n      <GlassButton iconOnly>\n        <Icon />\n        Hidden Text\n      </GlassButton>,\n    );\n\n    const button = screen.getByRole(\"button\");\n    expect(screen.getByTestId(\"icon\")).toBeInTheDocument();\n    const hiddenText = screen.getByText(\"Hidden Text\");\n    expect(hiddenText).toHaveClass(\"sr-only\");\n    expect(button).toHaveAttribute(\"aria-label\", \"Hidden Text\");\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx",
        "line": 131,
        "column": 7,
        "message": "Icon-only buttons may lack accessible labels for screen readers",
        "description": "Icon-only buttons may lack accessible labels for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label attributes to icon-only buttons to provide accessible names for screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const IconOnly: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap gap-4 items-center\">\n      <GlassButton iconOnly size=\"sm\" aria-label=\"Like\">\n        <Heart />\n      </GlassButton>\n      <GlassButton iconOnly size=\"md\" aria-label=\"Download\">\n        <Download />\n      </GlassButton>\n      <GlassButton iconOnly size=\"lg\" aria-label=\"Go forward\">\n        <ArrowRight />\n      </GlassButton>\n      <GlassButton iconOnly size=\"xl\" aria-label=\"Like\">\n        <Heart />\n      </GlassButton>\n    </div>\n  ),",
          "description": "Add aria-label attributes to icon-only buttons to provide accessible names for screen readers",
          "content": "export const IconOnly: Story = {\n  render: () => (\n    <div className=\"flex flex-wrap gap-4 items-center\">\n      <GlassButton iconOnly size=\"sm\" aria-label=\"Like\">\n        <Heart />\n      </GlassButton>\n      <GlassButton iconOnly size=\"md\" aria-label=\"Download\">\n        <Download />\n      </GlassButton>\n      <GlassButton iconOnly size=\"lg\" aria-label=\"Go forward\">\n        <ArrowRight />\n      </GlassButton>\n      <GlassButton iconOnly size=\"xl\" aria-label=\"Like\">\n        <Heart />\n      </GlassButton>\n    </div>\n  ),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx",
        "line": 172,
        "column": 7,
        "message": "Loading button in icon-only mode may lack accessible loading state indication",
        "description": "Loading button in icon-only mode may lack accessible loading state indication This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label to indicate loading state for icon-only loading button",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <GlassButton loading iconOnly aria-label=\"Loading, please wait\">\n        <Heart />\n      </GlassButton>",
          "description": "Add aria-label to indicate loading state for icon-only loading button",
          "content": "      <GlassButton loading iconOnly aria-label=\"Loading, please wait\">\n        <Heart />\n      </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx",
        "line": 8,
        "column": 55,
        "message": "Unused import - Loader2 is imported but never used",
        "description": "Unused import - Loader2 is imported but never used This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused import to keep code clean",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import { Heart, Download, ArrowRight } from \"lucide-react\";",
          "description": "Remove unused import to keep code clean",
          "content": "import { Heart, Download, ArrowRight } from \"lucide-react\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-button-refactored/glass-button.stories.tsx",
        "line": 189,
        "column": 7,
        "message": "Custom hover effects may interfere with screen reader focus indication",
        "description": "Custom hover effects may interfere with screen reader focus indication This code works but could be improved for better maintainability.",
        "suggestion": "Ensure custom hover effects don't interfere with focus visibility for keyboard users",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <GlassButton className=\"hover:scale-110 active:scale-95 focus:outline-offset-2\">\n        Custom Hover\n      </GlassButton>",
          "description": "Ensure custom hover effects don't interfere with focus visibility for keyboard users",
          "content": "      <GlassButton className=\"hover:scale-110 active:scale-95 focus:outline-offset-2\">\n        Custom Hover\n      </GlassButton>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/index.ts",
        "line": 3,
        "column": 1,
        "message": "Unnecessary comment before export statement",
        "description": "Unnecessary comment before export statement This violates code style conventions and may reduce readability.",
        "suggestion": "Remove redundant comment as it doesn't add meaningful information",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-breadcrumbs Component Export\n */\nexport * from \"./glass-breadcrumbs\";",
          "description": "Remove redundant comment as it doesn't add meaningful information",
          "content": "/**\n * glass-breadcrumbs Component Export\n */\nexport * from \"./glass-breadcrumbs\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx",
        "line": 99,
        "column": 19,
        "message": "Home button should have better accessibility support with keyboard navigation",
        "description": "Home button should have better accessibility support with keyboard navigation This code works but could be improved for better maintainability.",
        "suggestion": "Add tabIndex and onKeyDown handler for proper keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                  <motion.button\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={onHomeClick}\n                    tabIndex={0}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        onHomeClick?.();\n                      }\n                    }}\n                    className={cn(\n                      breadcrumbItemVariants({\n                        isActive: \"false\",\n                        isClickable: \"true\",\n                      }),\n                    )}\n                    aria-label=\"Home\"\n                  >\n                    <Home className=\"h-4 w-4\" />\n                  </motion.button>",
          "description": "Add tabIndex and onKeyDown handler for proper keyboard accessibility",
          "content": "                  <motion.button\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={onHomeClick}\n                    tabIndex={0}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        onHomeClick?.();\n                      }\n                    }}\n                    className={cn(\n                      breadcrumbItemVariants({\n                        isActive: \"false\",\n                        isClickable: \"true\",\n                      }),\n                    )}\n                    aria-label=\"Home\"\n                  >\n                    <Home className=\"h-4 w-4\" />\n                  </motion.button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx",
        "line": 128,
        "column": 23,
        "message": "Clickable breadcrumb items should have proper keyboard navigation support",
        "description": "Clickable breadcrumb items should have proper keyboard navigation support This code works but could be improved for better maintainability.",
        "suggestion": "Add tabIndex and onKeyDown handler for keyboard accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      <motion.button\n                        type=\"button\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={handleClick}\n                        tabIndex={0}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter' || e.key === ' ') {\n                            e.preventDefault();\n                            handleClick();\n                          }\n                        }}\n                        className={cn(\n                          breadcrumbItemVariants({\n                            isActive: isLast ? \"true\" : \"false\",\n                            isClickable: \"true\",\n                          }),\n                        )}\n                        aria-current={isLast ? \"page\" : undefined}\n                      >\n                        {item.icon && (\n                          <span className=\"mr-1.5\">{item.icon}</span>\n                        )}\n                        {item.label}\n                      </motion.button>",
          "description": "Add tabIndex and onKeyDown handler for keyboard accessibility",
          "content": "                      <motion.button\n                        type=\"button\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={handleClick}\n                        tabIndex={0}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter' || e.key === ' ') {\n                            e.preventDefault();\n                            handleClick();\n                          }\n                        }}\n                        className={cn(\n                          breadcrumbItemVariants({\n                            isActive: isLast ? \"true\" : \"false\",\n                            isClickable: \"true\",\n                          }),\n                        )}\n                        aria-current={isLast ? \"page\" : undefined}\n                      >\n                        {item.icon && (\n                          <span className=\"mr-1.5\">{item.icon}</span>\n                        )}\n                        {item.label}\n                      </motion.button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx",
        "line": 100,
        "column": 21,
        "message": "Potential null pointer exception when onHomeClick is undefined",
        "description": "Potential null pointer exception when onHomeClick is undefined This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Add optional chaining or null check before calling onHomeClick",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                    onClick={() => onHomeClick?.()}",
          "description": "Add optional chaining or null check before calling onHomeClick",
          "content": "                    onClick={() => onHomeClick?.()}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx",
        "line": 100,
        "column": 21,
        "message": "Inline arrow function in onClick can cause unnecessary re-renders",
        "description": "Inline arrow function in onClick can cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move the onClick handler to a useCallback or create a separate handler function",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const handleHomeClick = useCallback(() => {\n        onHomeClick?.();\n      }, [onHomeClick]);\n\n      return (",
          "description": "Move the onClick handler to a useCallback or create a separate handler function",
          "content": "      const handleHomeClick = useCallback(() => {\n        onHomeClick?.();\n      }, [onHomeClick]);\n\n      return ("
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.tsx",
        "line": 104,
        "column": 25,
        "message": "Inconsistent string literal usage for variant props",
        "description": "Inconsistent string literal usage for variant props This violates code style conventions and may reduce readability.",
        "suggestion": "Use boolean values instead of string literals for better type safety",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "                      breadcrumbItemVariants({\n                        isActive: false,\n                        isClickable: true,\n                      }),",
          "description": "Use boolean values instead of string literals for better type safety",
          "content": "                      breadcrumbItemVariants({\n                        isActive: false,\n                        isClickable: true,\n                      }),"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 62,
        "column": 18,
        "message": "Interactive elements using console.log should provide proper feedback for screen readers",
        "description": "Interactive elements using console.log should provide proper feedback for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Replace console.log with actual navigation or provide aria-live feedback",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 66,
        "column": 18,
        "message": "Interactive elements using console.log should provide proper feedback for screen readers",
        "description": "Interactive elements using console.log should provide proper feedback for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Replace console.log with actual navigation or provide aria-live feedback",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 70,
        "column": 18,
        "message": "Interactive elements using console.log should provide proper feedback for screen readers",
        "description": "Interactive elements using console.log should provide proper feedback for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Replace console.log with actual navigation or provide aria-live feedback",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 73,
        "column": 21,
        "message": "Interactive elements using console.log should provide proper feedback for screen readers",
        "description": "Interactive elements using console.log should provide proper feedback for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Replace console.log with actual navigation or provide aria-live feedback",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 107,
        "column": 37,
        "message": "Hard-coded color values may not respect user's color preferences or high contrast modes",
        "description": "Hard-coded color values may not respect user's color preferences or high contrast modes This code works but could be improved for better maintainability.",
        "suggestion": "Use CSS custom properties or theme variables that can adapt to user preferences",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 120,
        "column": 39,
        "message": "Hard-coded color values may not respect user's color preferences or high contrast modes",
        "description": "Hard-coded color values may not respect user's color preferences or high contrast modes This code works but could be improved for better maintainability.",
        "suggestion": "Use CSS custom properties or theme variables that can adapt to user preferences",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-6",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 133,
        "column": 37,
        "message": "Hard-coded color values may not respect user's color preferences or high contrast modes",
        "description": "Hard-coded color values may not respect user's color preferences or high contrast modes This code works but could be improved for better maintainability.",
        "suggestion": "Use CSS custom properties or theme variables that can adapt to user preferences",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-7",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 518,
        "column": 43,
        "message": "Alert dialogs may not be announced properly to screen readers and can be disruptive",
        "description": "Alert dialogs may not be announced properly to screen readers and can be disruptive This code works but could be improved for better maintainability.",
        "suggestion": "Use toast notifications or aria-live regions for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 522,
        "column": 18,
        "message": "Alert dialogs may not be announced properly to screen readers and can be disruptive",
        "description": "Alert dialogs may not be announced properly to screen readers and can be disruptive This code works but could be improved for better maintainability.",
        "suggestion": "Use toast notifications or aria-live regions for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-accessibility-9",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 525,
        "column": 49,
        "message": "Alert dialogs may not be announced properly to screen readers and can be disruptive",
        "description": "Alert dialogs may not be announced properly to screen readers and can be disruptive This code works but could be improved for better maintainability.",
        "suggestion": "Use toast notifications or aria-live regions for better accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx-performance-10",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-breadcrumbs/glass-breadcrumbs.stories.tsx",
        "line": 484,
        "column": 30,
        "message": "React.useState hook called inside render function could cause unnecessary re-renders",
        "description": "React.useState hook called inside render function could cause unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move state initialization outside of render or use useCallback for handlers",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "insert",
          "oldCode": "",
          "newCode": "// Consider using useMemo or useCallback to prevent unnecessary re-renders",
          "description": "Move state initialization outside of render or use useCallback for handlers",
          "content": "// Consider using useMemo or useCallback to prevent unnecessary re-renders"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/index.ts",
        "line": 4,
        "column": 1,
        "message": "Missing explicit export statement - using wildcard re-export may not preserve type information properly",
        "description": "Missing explicit export statement - using wildcard re-export may not preserve type information properly This violates code style conventions and may reduce readability.",
        "suggestion": "Consider using explicit named exports or adding a default export for better type safety and tree-shaking",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/index.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/index.ts",
        "line": 4,
        "column": 1,
        "message": "File lacks substantive content - index file contains only re-export",
        "description": "File lacks substantive content - index file contains only re-export This code works but could be improved for better maintainability.",
        "suggestion": "Consider consolidating files or adding meaningful exports/documentation",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx-bug-0",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx",
        "line": 56,
        "column": 9,
        "message": "Animation class is checked after component is already hidden, preventing exit animation from being visible",
        "description": "Animation class is checked after component is already hidden, preventing exit animation from being visible This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Remove the early return and use isVisible state in className to control visibility while allowing exit animations",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  return (\n    <div\n      className={cn(\n        \"liquid-glass\",\n        \"relative overflow-hidden rounded-lg border p-4\",\n        getGlassClass(\"default\"),\n        config.className,\n        isVisible ? \"slide-in-from-top-2 animate-in\" : \"slide-out-to-top-2 animate-out\",\n        className,\n      )}\n      role=\"alert\"\n      style={{ display: isVisible ? 'block' : 'none' }}\n      {...props}\n    >",
          "description": "Remove the early return and use isVisible state in className to control visibility while allowing exit animations",
          "content": "  return (\n    <div\n      className={cn(\n        \"liquid-glass\",\n        \"relative overflow-hidden rounded-lg border p-4\",\n        getGlassClass(\"default\"),\n        config.className,\n        isVisible ? \"slide-in-from-top-2 animate-in\" : \"slide-out-to-top-2 animate-out\",\n        className,\n      )}\n      role=\"alert\"\n      style={{ display: isVisible ? 'block' : 'none' }}\n      {...props}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx",
        "line": 54,
        "column": 5,
        "message": "Missing aria-live attribute for dynamic content updates in alert banner",
        "description": "Missing aria-live attribute for dynamic content updates in alert banner This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' or aria-live='assertive' to announce content changes to screen readers",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    <div\n      className={cn(\n        \"liquid-glass\",\n        \"relative overflow-hidden rounded-lg border p-4\",\n        getGlassClass(\"default\"),\n        config.className,\n        \"slide-in-from-top-2 animate-in\",\n        !isVisible && \"slide-out-to-top-2 animate-out\",\n        className,\n      )}\n      role=\"alert\"\n      aria-live=\"polite\"\n      {...props}\n    >",
          "description": "Add aria-live='polite' or aria-live='assertive' to announce content changes to screen readers",
          "content": "    <div\n      className={cn(\n        \"liquid-glass\",\n        \"relative overflow-hidden rounded-lg border p-4\",\n        getGlassClass(\"default\"),\n        config.className,\n        \"slide-in-from-top-2 animate-in\",\n        !isVisible && \"slide-out-to-top-2 animate-out\",\n        className,\n      )}\n      role=\"alert\"\n      aria-live=\"polite\"\n      {...props}\n    >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx",
        "line": 44,
        "column": 5,
        "message": "setTimeout without cleanup could cause memory leaks if component unmounts before timeout completes",
        "description": "setTimeout without cleanup could cause memory leaks if component unmounts before timeout completes This implementation could impact application performance.",
        "suggestion": "Store timeout reference and clear it in useEffect cleanup",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    timeoutRef.current = setTimeout(() => {\n      onDismiss?.();\n    }, 300);\n  };",
          "description": "Store timeout reference and clear it in useEffect cleanup",
          "content": "  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    timeoutRef.current = setTimeout(() => {\n      onDismiss?.();\n    }, 300);\n  };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx",
        "line": 67,
        "column": 17,
        "message": "Icon should have aria-hidden attribute since it's decorative and the semantic meaning is conveyed by the alert role",
        "description": "Icon should have aria-hidden attribute since it's decorative and the semantic meaning is conveyed by the alert role This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to decorative icons",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {icon || <Icon className=\"h-5 w-5 flex-shrink-0\" aria-hidden=\"true\" />}",
          "description": "Add aria-hidden='true' to decorative icons",
          "content": "        {icon || <Icon className=\"h-5 w-5 flex-shrink-0\" aria-hidden=\"true\" />}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-banner/glass-banner.tsx",
        "line": 82,
        "column": 15,
        "message": "Close button icon should have aria-hidden attribute since the semantic meaning is provided by aria-label",
        "description": "Close button icon should have aria-hidden attribute since the semantic meaning is provided by aria-label This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-hidden='true' to the X icon",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <X className=\"h-4 w-4\" aria-hidden=\"true\" />",
          "description": "Add aria-hidden='true' to the X icon",
          "content": "              <X className=\"h-4 w-4\" aria-hidden=\"true\" />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/index.ts",
        "line": 4,
        "column": 1,
        "message": "Unnecessary comment adds no value and should be removed or made more descriptive",
        "description": "Unnecessary comment adds no value and should be removed or made more descriptive This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant comment or make it more descriptive about the component's purpose",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-badge Component Export\n */\nexport * from \"./glass-badge\";",
          "description": "Remove the redundant comment or make it more descriptive about the component's purpose",
          "content": "/**\n * glass-badge Component Export\n */\nexport * from \"./glass-badge\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx",
        "line": 4,
        "column": 3,
        "message": "Interface excludes all ARIA attributes, which may prevent proper accessibility implementation",
        "description": "Interface excludes all ARIA attributes, which may prevent proper accessibility implementation This code works but could be improved for better maintainability.",
        "suggestion": "Remove the exclusion of React.AriaAttributes or be more specific about which ARIA attributes to exclude",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "interface GlassBadgeProps\n  extends React.HTMLAttributes<HTMLSpanElement> {\n  variant?: \"default\" | \"success\" | \"warning\" | \"error\";\n}",
          "description": "Remove the exclusion of React.AriaAttributes or be more specific about which ARIA attributes to exclude",
          "content": "interface GlassBadgeProps\n  extends React.HTMLAttributes<HTMLSpanElement> {\n  variant?: \"default\" | \"success\" | \"warning\" | \"error\";\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx",
        "line": 18,
        "column": 7,
        "message": "Badge component lacks semantic meaning and ARIA attributes for screen readers",
        "description": "Badge component lacks semantic meaning and ARIA attributes for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add role='status' or appropriate ARIA attributes to improve accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <span\n        ref={ref}\n        role=\"status\"\n        aria-live={variant === \"error\" || variant === \"warning\" ? \"polite\" : undefined}\n        className={cn(\n          \"relative inline-flex items-center justify-center\",\n          \"liquid-glass-sm px-3 py-1 font-medium text-xs\",\n          \"transition-all duration-200 will-change-transform\",\n          \"motion-safe:hover:scale-105\",\n          variantClasses[variant],\n          className,\n        )}\n        {...props}\n      >",
          "description": "Add role='status' or appropriate ARIA attributes to improve accessibility",
          "content": "      <span\n        ref={ref}\n        role=\"status\"\n        aria-live={variant === \"error\" || variant === \"warning\" ? \"polite\" : undefined}\n        className={cn(\n          \"relative inline-flex items-center justify-center\",\n          \"liquid-glass-sm px-3 py-1 font-medium text-xs\",\n          \"transition-all duration-200 will-change-transform\",\n          \"motion-safe:hover:scale-105\",\n          variantClasses[variant],\n          className,\n        )}\n        {...props}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.tsx",
        "line": 13,
        "column": 27,
        "message": "Object recreation on every render can impact performance",
        "description": "Object recreation on every render can impact performance This implementation could impact application performance.",
        "suggestion": "Move variantClasses object outside the component or use useMemo to prevent recreation",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const variantClasses = {\n  default: \"liquid-glass text-liquid-primary\",\n  success: \"liquid-glass bg-green-500/20 text-green-300 border-green-400/30\",\n  warning: \"liquid-glass bg-yellow-500/20 text-yellow-300 border-yellow-400/30\",\n  error: \"liquid-glass bg-red-500/20 text-red-300 border-red-400/30\",\n} as const;\n\nconst GlassBadge = forwardRef<HTMLSpanElement, GlassBadgeProps>(\n  ({ className, variant = \"default\", ...props }, ref) => {",
          "description": "Move variantClasses object outside the component or use useMemo to prevent recreation",
          "content": "const variantClasses = {\n  default: \"liquid-glass text-liquid-primary\",\n  success: \"liquid-glass bg-green-500/20 text-green-300 border-green-400/30\",\n  warning: \"liquid-glass bg-yellow-500/20 text-yellow-300 border-yellow-400/30\",\n  error: \"liquid-glass bg-red-500/20 text-red-300 border-red-400/30\",\n} as const;\n\nconst GlassBadge = forwardRef<HTMLSpanElement, GlassBadgeProps>(\n  ({ className, variant = \"default\", ...props }, ref) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 2,
        "column": 10,
        "message": "Unused import 'fireEvent' - it's only used once and could be imported inline or the test could be restructured",
        "description": "Unused import 'fireEvent' - it's only used once and could be imported inline or the test could be restructured This violates code style conventions and may reduce readability.",
        "suggestion": "Consider if fireEvent import is necessary or could be optimized",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 12,
        "column": 5,
        "message": "Multiple rerender calls in single test may impact test performance and readability",
        "description": "Multiple rerender calls in single test may impact test performance and readability This implementation could impact application performance.",
        "suggestion": "Consider splitting this test into separate test cases for better isolation and readability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 85,
        "column": 9,
        "message": "Variable mutation in test - 'clicked' is mutated which could lead to test side effects",
        "description": "Variable mutation in test - 'clicked' is mutated which could lead to test side effects This violates code style conventions and may reduce readability.",
        "suggestion": "Use jest.fn() or a mock function instead of mutable variable",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const handleClick = jest.fn();\n\n    render(<GlassBadge onClick={handleClick}>Clickable Badge</GlassBadge>);\n\n    const badge = screen.getByText(\"Clickable Badge\");\n    fireEvent.click(badge);\n\n    expect(handleClick).toHaveBeenCalledTimes(1);",
          "description": "Use jest.fn() or a mock function instead of mutable variable",
          "content": "    const handleClick = jest.fn();\n\n    render(<GlassBadge onClick={handleClick}>Clickable Badge</GlassBadge>);\n\n    const badge = screen.getByText(\"Clickable Badge\");\n    fireEvent.click(badge);\n\n    expect(handleClick).toHaveBeenCalledTimes(1);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing accessibility tests for keyboard navigation and screen reader compatibility",
        "description": "Missing accessibility tests for keyboard navigation and screen reader compatibility This code works but could be improved for better maintainability.",
        "suggestion": "Add tests for keyboard navigation (Enter/Space key handling) and ARIA attributes for clickable badges",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 117,
        "column": 19,
        "message": "Test uses complex DOM traversal with parentElement which could be fragile",
        "description": "Test uses complex DOM traversal with parentElement which could be fragile This violates code style conventions and may reduce readability.",
        "suggestion": "Use data-testid or more specific queries instead of parentElement traversal",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx-convention-5",
        "type": "convention",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.test.tsx",
        "line": 1,
        "column": 1,
        "message": "Missing edge case tests for empty children, null, or undefined props",
        "description": "Missing edge case tests for empty children, null, or undefined props This code works but could be improved for better maintainability.",
        "suggestion": "Add tests for edge cases like empty string, null children, and invalid variant values",
        "rule": "convention",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 123,
        "column": 9,
        "message": "Interactive buttons lack proper ARIA labels or accessible names for screen readers",
        "description": "Interactive buttons lack proper ARIA labels or accessible names for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to buttons to describe their purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View notifications (3 unread)\"\n        >\n          Notifications\n        </button>",
          "description": "Add aria-label or accessible text to buttons to describe their purpose",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View notifications (3 unread)\"\n        >\n          Notifications\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 133,
        "column": 9,
        "message": "Interactive buttons lack proper ARIA labels or accessible names for screen readers",
        "description": "Interactive buttons lack proper ARIA labels or accessible names for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to buttons to describe their purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View messages (12 unread)\"\n        >\n          Messages\n        </button>",
          "description": "Add aria-label or accessible text to buttons to describe their purpose",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View messages (12 unread)\"\n        >\n          Messages\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 143,
        "column": 9,
        "message": "Interactive buttons lack proper ARIA labels or accessible names for screen readers",
        "description": "Interactive buttons lack proper ARIA labels or accessible names for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or accessible text to buttons to describe their purpose",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View updates (new updates available)\"\n        >\n          Updates\n        </button>",
          "description": "Add aria-label or accessible text to buttons to describe their purpose",
          "content": "        <button\n          type=\"button\"\n          className=\"rounded-lg bg-white/10 px-4 py-2 text-white hover:bg-white/20\"\n          aria-label=\"View updates (new updates available)\"\n        >\n          Updates\n        </button>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 128,
        "column": 9,
        "message": "Badge content may not be accessible to screen readers when used as status indicators",
        "description": "Badge content may not be accessible to screen readers when used as status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or role attributes to badges that convey important status information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"error\"\n          role=\"status\"\n          aria-label=\"3 unread notifications\"\n        >\n          3\n        </GlassBadge>",
          "description": "Add aria-label or role attributes to badges that convey important status information",
          "content": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"error\"\n          role=\"status\"\n          aria-label=\"3 unread notifications\"\n        >\n          3\n        </GlassBadge>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-4",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 138,
        "column": 9,
        "message": "Badge content may not be accessible to screen readers when used as status indicators",
        "description": "Badge content may not be accessible to screen readers when used as status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or role attributes to badges that convey important status information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"default\"\n          role=\"status\"\n          aria-label=\"12 unread messages\"\n        >\n          12\n        </GlassBadge>",
          "description": "Add aria-label or role attributes to badges that convey important status information",
          "content": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"default\"\n          role=\"status\"\n          aria-label=\"12 unread messages\"\n        >\n          12\n        </GlassBadge>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx-accessibility-5",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-badge/glass-badge.stories.tsx",
        "line": 148,
        "column": 9,
        "message": "Badge content may not be accessible to screen readers when used as status indicators",
        "description": "Badge content may not be accessible to screen readers when used as status indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or role attributes to badges that convey important status information",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"success\"\n          role=\"status\"\n          aria-label=\"New updates available\"\n        >\n          New\n        </GlassBadge>",
          "description": "Add aria-label or role attributes to badges that convey important status information",
          "content": "        <GlassBadge \n          className=\"-top-2 -right-2 absolute\" \n          variant=\"success\"\n          role=\"status\"\n          aria-label=\"New updates available\"\n        >\n          New\n        </GlassBadge>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/index.ts",
        "line": 4,
        "column": 15,
        "message": "Missing explicit file extension in import/export statement",
        "description": "Missing explicit file extension in import/export statement This violates code style conventions and may reduce readability.",
        "suggestion": "Add explicit .js extension for better ESM compatibility",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export * from \"./glass-avatar.js\";",
          "description": "Add explicit .js extension for better ESM compatibility",
          "content": "export * from \"./glass-avatar.js\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/index.ts-structure-1",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/index.ts",
        "line": 4,
        "column": 1,
        "message": "Potential missing error handling for non-existent module",
        "description": "Potential missing error handling for non-existent module This code works but could be improved for better maintainability.",
        "suggestion": "Consider adding explicit named exports or error handling for missing dependencies",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx",
        "line": 85,
        "column": 15,
        "message": "Image without proper error handling accessibility - when image fails to load, it becomes invisible but alt text is lost",
        "description": "Image without proper error handling accessibility - when image fails to load, it becomes invisible but alt text is lost This code works but could be improved for better maintainability.",
        "suggestion": "Instead of hiding the image on error, replace it with fallback content while preserving accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              onError={(e) => {\n                // Replace with fallback instead of hiding\n                const img = e.target as HTMLImageElement;\n                img.style.display = 'none';\n                // Fallback will be shown by React state update\n              }}",
          "description": "Instead of hiding the image on error, replace it with fallback content while preserving accessibility",
          "content": "              onError={(e) => {\n                // Replace with fallback instead of hiding\n                const img = e.target as HTMLImageElement;\n                img.style.display = 'none';\n                // Fallback will be shown by React state update\n              }}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx",
        "line": 56,
        "column": 7,
        "message": "getInitials function doesn't handle empty strings or strings with no valid characters",
        "description": "getInitials function doesn't handle empty strings or strings with no valid characters This code works but could be improved for better maintainability.",
        "suggestion": "Add validation to handle edge cases like empty strings, strings with only spaces, or special characters",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      const getInitials = (name: string) => {\n        if (!name || name.trim().length === 0) return \"?\";\n        return name\n          .trim()\n          .split(\" \")\n          .filter(word => word.length > 0)\n          .map((word) => word[0])\n          .join(\"\")\n          .slice(0, 2)\n          .toUpperCase();\n      };",
          "description": "Add validation to handle edge cases like empty strings, strings with only spaces, or special characters",
          "content": "      const getInitials = (name: string) => {\n        if (!name || name.trim().length === 0) return \"?\";\n        return name\n          .trim()\n          .split(\" \")\n          .filter(word => word.length > 0)\n          .map((word) => word[0])\n          .join(\"\")\n          .slice(0, 2)\n          .toUpperCase();\n      };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx",
        "line": 92,
        "column": 15,
        "message": "Conflicting text color classes in fallback span - both 'text-gray-900 dark:text-white' and 'text-white' are applied",
        "description": "Conflicting text color classes in fallback span - both 'text-gray-900 dark:text-white' and 'text-white' are applied This violates code style conventions and may reduce readability.",
        "suggestion": "Remove conflicting classes and use consistent color scheme",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <span\n              className={cn(\n                \"font-medium text-white\",\n                \"bg-gradient-to-br from-blue-500 to-purple-500\",\n              )}\n            >",
          "description": "Remove conflicting classes and use consistent color scheme",
          "content": "            <span\n              className={cn(\n                \"font-medium text-white\",\n                \"bg-gradient-to-br from-blue-500 to-purple-500\",\n              )}\n            >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx",
        "line": 107,
        "column": 13,
        "message": "Status indicator lacks accessible label for screen readers",
        "description": "Status indicator lacks accessible label for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-label or screen reader text to describe the status",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "            <div\n              className={cn(\n                \"absolute right-0 bottom-0 rounded-full border-2 border-white dark:border-gray-900\",\n                statusSizes[size],\n                statusColors[status],\n              )}\n              aria-label={`Status: ${status}`}\n              role=\"img\"\n            />",
          "description": "Add aria-label or screen reader text to describe the status",
          "content": "            <div\n              className={cn(\n                \"absolute right-0 bottom-0 rounded-full border-2 border-white dark:border-gray-900\",\n                statusSizes[size],\n                statusColors[status],\n              )}\n              aria-label={`Status: ${status}`}\n              role=\"img\"\n            />"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.tsx",
        "line": 26,
        "column": 7,
        "message": "Object literals are recreated on every render, causing unnecessary re-renders",
        "description": "Object literals are recreated on every render, causing unnecessary re-renders This implementation could impact application performance.",
        "suggestion": "Move static object literals outside the component or use useMemo for dynamic objects",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const sizeClasses = {\n  xs: \"w-6 h-6 text-xs\",\n  sm: \"w-8 h-8 text-sm\",\n  md: \"w-10 h-10 text-base\",\n  lg: \"w-12 h-12 text-lg\",\n  xl: \"w-16 h-16 text-xl\",\n  \"2xl\": \"w-20 h-20 text-2xl\",\n};\n\nconst variantClasses = {\n  circular: \"rounded-full\",\n  rounded: \"rounded-lg\",\n  square: \"rounded-none\",\n};\n\nconst statusColors = {\n  online: \"bg-green-500\",\n  offline: \"bg-gray-400\",\n  away: \"bg-yellow-500\",\n  busy: \"bg-red-500\",\n};\n\nconst statusSizes = {\n  xs: \"w-1.5 h-1.5\",\n  sm: \"w-2 h-2\",\n  md: \"w-2.5 h-2.5\",\n  lg: \"w-3 h-3\",\n  xl: \"w-3.5 h-3.5\",\n  \"2xl\": \"w-4 h-4\",\n};\n\nexport const GlassAvatar = React.memo(\n  React.forwardRef<HTMLDivElement, GlassAvatarProps>(\n    (\n      {\n        src,\n        alt,\n        size = \"md\",\n        variant = \"circular\",\n        fallback,\n        className,\n        showBorder = false,\n        status,\n        ...props\n      },\n      ref,\n    ) => {",
          "description": "Move static object literals outside the component or use useMemo for dynamic objects",
          "content": "const sizeClasses = {\n  xs: \"w-6 h-6 text-xs\",\n  sm: \"w-8 h-8 text-sm\",\n  md: \"w-10 h-10 text-base\",\n  lg: \"w-12 h-12 text-lg\",\n  xl: \"w-16 h-16 text-xl\",\n  \"2xl\": \"w-20 h-20 text-2xl\",\n};\n\nconst variantClasses = {\n  circular: \"rounded-full\",\n  rounded: \"rounded-lg\",\n  square: \"rounded-none\",\n};\n\nconst statusColors = {\n  online: \"bg-green-500\",\n  offline: \"bg-gray-400\",\n  away: \"bg-yellow-500\",\n  busy: \"bg-red-500\",\n};\n\nconst statusSizes = {\n  xs: \"w-1.5 h-1.5\",\n  sm: \"w-2 h-2\",\n  md: \"w-2.5 h-2.5\",\n  lg: \"w-3 h-3\",\n  xl: \"w-3.5 h-3.5\",\n  \"2xl\": \"w-4 h-4\",\n};\n\nexport const GlassAvatar = React.memo(\n  React.forwardRef<HTMLDivElement, GlassAvatarProps>(\n    (\n      {\n        src,\n        alt,\n        size = \"md\",\n        variant = \"circular\",\n        fallback,\n        className,\n        showBorder = false,\n        status,\n        ...props\n      },\n      ref,\n    ) => {"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 30,
        "column": 21,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 104,
        "column": 25,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 107,
        "column": 21,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 110,
        "column": 21,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 113,
        "column": 21,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 140,
        "column": 25,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-6",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 143,
        "column": 25,
        "message": "Direct DOM querySelector usage in tests is brittle and not following testing best practices",
        "description": "Direct DOM querySelector usage in tests is brittle and not following testing best practices This code works but could be improved for better maintainability.",
        "suggestion": "Use screen queries or data-testid attributes instead of direct DOM queries for more reliable tests",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 151,
        "column": 5,
        "message": "Multiple render calls in single test without proper cleanup could lead to test interference",
        "description": "Multiple render calls in single test without proper cleanup could lead to test interference This code works but could be improved for better maintainability.",
        "suggestion": "Consider separating into individual test cases or ensure proper cleanup between renders",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-accessibility-8",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 101,
        "column": 3,
        "message": "Test assumes specific status indicator colors without checking for ARIA attributes or accessible status indication",
        "description": "Test assumes specific status indicator colors without checking for ARIA attributes or accessible status indication This code works but could be improved for better maintainability.",
        "suggestion": "Add tests for accessible status indication using aria-label, role, or screen reader text",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx-performance-9",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.test.tsx",
        "line": 30,
        "column": 21,
        "message": "querySelector calls are inefficient in tests and could be cached or use more specific queries",
        "description": "querySelector calls are inefficient in tests and could be cached or use more specific queries This implementation could impact application performance.",
        "suggestion": "Use screen.getByRole or other React Testing Library queries for better performance and reliability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx",
        "line": 56,
        "column": 5,
        "message": "Missing alt attribute for avatar images - only some stories include proper alt text",
        "description": "Missing alt attribute for avatar images - only some stories include proper alt text This code works but could be improved for better maintainability.",
        "suggestion": "Add descriptive alt text to all GlassAvatar components with images for screen reader accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export const WithImage: Story = {\n  args: {\n    src: \"https://i.pravatar.cc/150?img=1\",\n    alt: \"User profile avatar\",\n    size: \"md\",\n  },\n};",
          "description": "Add descriptive alt text to all GlassAvatar components with images for screen reader accessibility",
          "content": "export const WithImage: Story = {\n  args: {\n    src: \"https://i.pravatar.cc/150?img=1\",\n    alt: \"User profile avatar\",\n    size: \"md\",\n  },\n};"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx",
        "line": 75,
        "column": 9,
        "message": "Avatar images in Sizes story lack alt text for screen readers",
        "description": "Avatar images in Sizes story lack alt text for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add alt attributes to all GlassAvatar components with images",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div className=\"text-center\">\n        <GlassAvatar size=\"xs\" src=\"https://i.pravatar.cc/150?img=2\" alt=\"Extra small avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">xs</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"sm\" src=\"https://i.pravatar.cc/150?img=3\" alt=\"Small avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">sm</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"md\" src=\"https://i.pravatar.cc/150?img=4\" alt=\"Medium avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">md</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"lg\" src=\"https://i.pravatar.cc/150?img=5\" alt=\"Large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">lg</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"xl\" src=\"https://i.pravatar.cc/150?img=6\" alt=\"Extra large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">xl</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"2xl\" src=\"https://i.pravatar.cc/150?img=7\" alt=\"Double extra large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">2xl</p>\n      </div>",
          "description": "Add alt attributes to all GlassAvatar components with images",
          "content": "      <div className=\"text-center\">\n        <GlassAvatar size=\"xs\" src=\"https://i.pravatar.cc/150?img=2\" alt=\"Extra small avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">xs</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"sm\" src=\"https://i.pravatar.cc/150?img=3\" alt=\"Small avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">sm</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"md\" src=\"https://i.pravatar.cc/150?img=4\" alt=\"Medium avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">md</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"lg\" src=\"https://i.pravatar.cc/150?img=5\" alt=\"Large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">lg</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"xl\" src=\"https://i.pravatar.cc/150?img=6\" alt=\"Extra large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">xl</p>\n      </div>\n      <div className=\"text-center\">\n        <GlassAvatar size=\"2xl\" src=\"https://i.pravatar.cc/150?img=7\" alt=\"Double extra large avatar example\" />\n        <p className=\"mt-2 text-white/60 text-xs\">2xl</p>\n      </div>"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx-performance-2",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx",
        "line": 56,
        "column": 10,
        "message": "Multiple external image requests to pravatar.cc could impact loading performance",
        "description": "Multiple external image requests to pravatar.cc could impact loading performance This implementation could impact application performance.",
        "suggestion": "Consider using a smaller set of cached images or placeholder images for better performance in Storybook",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx-accessibility-3",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-avatar/glass-avatar.stories.tsx",
        "line": 524,
        "column": 11,
        "message": "Interactive button in AccessibilityDemo lacks focus indicators",
        "description": "Interactive button in AccessibilityDemo lacks focus indicators This code works but could be improved for better maintainability.",
        "suggestion": "Add focus-visible styling to interactive elements for keyboard navigation accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            className=\"flex items-center gap-3 rounded-lg p-2 hover:bg-white/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/50\"\n            aria-label=\"Open John Doe's profile\"\n          >",
          "description": "Add focus-visible styling to interactive elements for keyboard navigation accessibility",
          "content": "          <button\n            type=\"button\"\n            className=\"flex items-center gap-3 rounded-lg p-2 hover:bg-white/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/50\"\n            aria-label=\"Open John Doe's profile\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/index.ts-error-0",
        "type": "error",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/index.ts",
        "line": 4,
        "column": 1,
        "message": "Default export from './glass-alert' may not exist, which could cause runtime errors",
        "description": "Default export from './glass-alert' may not exist, which could cause runtime errors This will likely cause errors during execution.",
        "suggestion": "Verify that './glass-alert' has a default export or use named export syntax",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/index.ts",
        "line": 6,
        "column": 1,
        "message": "Redundant re-export pattern - using both default and wildcard exports can cause confusion",
        "description": "Redundant re-export pattern - using both default and wildcard exports can cause confusion This violates code style conventions and may reduce readability.",
        "suggestion": "Choose either default export with specific named exports or use only wildcard export for clarity",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export { default as GlassAlert, type GlassAlertProps } from \"./glass-alert\";",
          "description": "Choose either default export with specific named exports or use only wildcard export for clarity",
          "content": "export { default as GlassAlert, type GlassAlertProps } from \"./glass-alert\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx",
        "line": 19,
        "column": 7,
        "message": "Alert component should include aria-live attribute for screen reader announcements",
        "description": "Alert component should include aria-live attribute for screen reader announcements This code works but could be improved for better maintainability.",
        "suggestion": "Add aria-live='polite' or aria-live='assertive' based on alert urgency to ensure screen readers announce the alert content",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "      <div\n        ref={ref}\n        role=\"alert\"\n        aria-live={variant === \"error\" ? \"assertive\" : \"polite\"}\n        className={cn(\n          \"liquid-glass-effect rounded-lg border p-4\",\n          \"backdrop-blur-md backdrop-saturate-150\",\n          variantStyles[variant],\n          className,\n        )}\n        {...props}\n      >",
          "description": "Add aria-live='polite' or aria-live='assertive' based on alert urgency to ensure screen readers announce the alert content",
          "content": "      <div\n        ref={ref}\n        role=\"alert\"\n        aria-live={variant === \"error\" ? \"assertive\" : \"polite\"}\n        className={cn(\n          \"liquid-glass-effect rounded-lg border p-4\",\n          \"backdrop-blur-md backdrop-saturate-150\",\n          variantStyles[variant],\n          className,\n        )}\n        {...props}\n      >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx",
        "line": 30,
        "column": 18,
        "message": "Alert title should use proper heading hierarchy with aria-level or use div with role='heading'",
        "description": "Alert title should use proper heading hierarchy with aria-level or use div with role='heading' This code works but could be improved for better maintainability.",
        "suggestion": "Replace h4 with div role='heading' aria-level='4' or ensure h4 fits the document's heading hierarchy",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "        {title && <div role=\"heading\" aria-level=\"4\" className=\"mb-1 font-semibold\">{title}</div>}",
          "description": "Replace h4 with div role='heading' aria-level='4' or ensure h4 fits the document's heading hierarchy",
          "content": "        {title && <div role=\"heading\" aria-level=\"4\" className=\"mb-1 font-semibold\">{title}</div>}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx",
        "line": 4,
        "column": 1,
        "message": "Interface should be exported for better reusability and type checking",
        "description": "Interface should be exported for better reusability and type checking This violates code style conventions and may reduce readability.",
        "suggestion": "Export the GlassAlertProps interface to allow consumers to use it for type checking",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export interface GlassAlertProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"info\" | \"success\" | \"warning\" | \"error\";\n  title?: string;\n  children: React.ReactNode;\n}",
          "description": "Export the GlassAlertProps interface to allow consumers to use it for type checking",
          "content": "export interface GlassAlertProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"info\" | \"success\" | \"warning\" | \"error\";\n  title?: string;\n  children: React.ReactNode;\n}"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.tsx",
        "line": 37,
        "column": 1,
        "message": "Component should be exported as named export instead of default export for better tree-shaking and consistency",
        "description": "Component should be exported as named export instead of default export for better tree-shaking and consistency This violates code style conventions and may reduce readability.",
        "suggestion": "Use named export: export { GlassAlert }; instead of export default",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "export { GlassAlert };",
          "description": "Use named export: export { GlassAlert }; instead of export default",
          "content": "export { GlassAlert };"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx-performance-0",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx",
        "line": 19,
        "column": 5,
        "message": "Using let and reassignment instead of const or more descriptive variable names",
        "description": "Using let and reassignment instead of const or more descriptive variable names This implementation could impact application performance.",
        "suggestion": "Use const for variables that are reassigned through DOM queries, or use more descriptive variable names for each variant test",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const infoAlert = screen.getByRole(\"alert\");\n    expect(infoAlert).toHaveClass(\"border-liquid-accent\");\n    expect(infoAlert).toHaveClass(\"liquid-glass\");\n    expect(infoAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"success\">Success alert</GlassAlert>);\n    const successAlert = screen.getByRole(\"alert\");\n    expect(successAlert).toHaveClass(\"border-liquid-accent\");\n    expect(successAlert).toHaveClass(\"liquid-glass-core-success\");\n    expect(successAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"warning\">Warning alert</GlassAlert>);\n    const warningAlert = screen.getByRole(\"alert\");\n    expect(warningAlert).toHaveClass(\"border-liquid-accent\");\n    expect(warningAlert).toHaveClass(\"liquid-glass-core-warning\");\n    expect(warningAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"error\">Error alert</GlassAlert>);\n    const errorAlert = screen.getByRole(\"alert\");\n    expect(errorAlert).toHaveClass(\"border-liquid-accent\");\n    expect(errorAlert).toHaveClass(\"liquid-glass-core-error\");\n    expect(errorAlert).toHaveClass(\"text-liquid-primary\");",
          "description": "Use const for variables that are reassigned through DOM queries, or use more descriptive variable names for each variant test",
          "content": "    const infoAlert = screen.getByRole(\"alert\");\n    expect(infoAlert).toHaveClass(\"border-liquid-accent\");\n    expect(infoAlert).toHaveClass(\"liquid-glass\");\n    expect(infoAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"success\">Success alert</GlassAlert>);\n    const successAlert = screen.getByRole(\"alert\");\n    expect(successAlert).toHaveClass(\"border-liquid-accent\");\n    expect(successAlert).toHaveClass(\"liquid-glass-core-success\");\n    expect(successAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"warning\">Warning alert</GlassAlert>);\n    const warningAlert = screen.getByRole(\"alert\");\n    expect(warningAlert).toHaveClass(\"border-liquid-accent\");\n    expect(warningAlert).toHaveClass(\"liquid-glass-core-warning\");\n    expect(warningAlert).toHaveClass(\"text-liquid-primary\");\n\n    rerender(<GlassAlert variant=\"error\">Error alert</GlassAlert>);\n    const errorAlert = screen.getByRole(\"alert\");\n    expect(errorAlert).toHaveClass(\"border-liquid-accent\");\n    expect(errorAlert).toHaveClass(\"liquid-glass-core-error\");\n    expect(errorAlert).toHaveClass(\"text-liquid-primary\");"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx",
        "line": 43,
        "column": 5,
        "message": "Test is redundant - checking for role='alert' attribute when already querying by role",
        "description": "Test is redundant - checking for role='alert' attribute when already querying by role This code works but could be improved for better maintainability.",
        "suggestion": "Remove redundant role attribute check or test for other ARIA attributes like aria-live, aria-atomic, or aria-describedby",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"has proper ARIA attributes\", () => {\n    render(<GlassAlert>Accessible alert</GlassAlert>);\n    const alert = screen.getByRole(\"alert\");\n\n    // Role is already verified by getByRole, test other ARIA attributes\n    expect(alert).toBeInTheDocument();\n  });",
          "description": "Remove redundant role attribute check or test for other ARIA attributes like aria-live, aria-atomic, or aria-describedby",
          "content": "  it(\"has proper ARIA attributes\", () => {\n    render(<GlassAlert>Accessible alert</GlassAlert>);\n    const alert = screen.getByRole(\"alert\");\n\n    // Role is already verified by getByRole, test other ARIA attributes\n    expect(alert).toBeInTheDocument();\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx-style-2",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx",
        "line": 107,
        "column": 5,
        "message": "Inconsistent test structure - some tests check multiple classes while others don't follow the same pattern",
        "description": "Inconsistent test structure - some tests check multiple classes while others don't follow the same pattern This violates code style conventions and may reduce readability.",
        "suggestion": "Consider combining glass effect styling assertions with other styling tests or make the structure more consistent",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx-performance-3",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-alert/glass-alert.test.tsx",
        "line": 107,
        "column": 5,
        "message": "Inefficient test structure with multiple DOM queries for the same element",
        "description": "Inefficient test structure with multiple DOM queries for the same element This implementation could impact application performance.",
        "suggestion": "Combine related styling assertions into fewer tests to reduce DOM queries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "  it(\"applies default styling and glass effects\", () => {\n    render(<GlassAlert>Styled alert</GlassAlert>);\n    const alert = screen.getByRole(\"alert\");\n\n    // Glass effect styling\n    expect(alert).toHaveClass(\"glass-effect\");\n    expect(alert).toHaveClass(\"backdrop-blur-md\");\n    expect(alert).toHaveClass(\"backdrop-saturate-150\");\n    \n    // Default variant styles\n    expect(alert).toHaveClass(\"border-liquid-accent\");\n    expect(alert).toHaveClass(\"liquid-glass\");\n    expect(alert).toHaveClass(\"text-liquid-primary\");\n    expect(alert).toHaveClass(\"rounded-lg\");\n  });",
          "description": "Combine related styling assertions into fewer tests to reduce DOM queries",
          "content": "  it(\"applies default styling and glass effects\", () => {\n    render(<GlassAlert>Styled alert</GlassAlert>);\n    const alert = screen.getByRole(\"alert\");\n\n    // Glass effect styling\n    expect(alert).toHaveClass(\"glass-effect\");\n    expect(alert).toHaveClass(\"backdrop-blur-md\");\n    expect(alert).toHaveClass(\"backdrop-saturate-150\");\n    \n    // Default variant styles\n    expect(alert).toHaveClass(\"border-liquid-accent\");\n    expect(alert).toHaveClass(\"liquid-glass\");\n    expect(alert).toHaveClass(\"text-liquid-primary\");\n    expect(alert).toHaveClass(\"rounded-lg\");\n  });"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/index.ts-style-0",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/index.ts",
        "line": 3,
        "column": 1,
        "message": "Unnecessary comment after block comment, creating redundant documentation",
        "description": "Unnecessary comment after block comment, creating redundant documentation This violates code style conventions and may reduce readability.",
        "suggestion": "Remove the redundant inline comment as the block comment above already describes the purpose",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-accordion Component Export\n */\nexport * from \"./glass-accordion\";",
          "description": "Remove the redundant inline comment as the block comment above already describes the purpose",
          "content": "/**\n * glass-accordion Component Export\n */\nexport * from \"./glass-accordion\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/index.ts-formatting-1",
        "type": "formatting",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/index.ts",
        "line": 5,
        "column": 1,
        "message": "Unnecessary blank line at end of file",
        "description": "Unnecessary blank line at end of file This code works but could be improved for better maintainability.",
        "suggestion": "Remove trailing blank line",
        "rule": "formatting",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-accordion Component Export\n */\nexport * from \"./glass-accordion\";",
          "description": "Remove trailing blank line",
          "content": "/**\n * glass-accordion Component Export\n */\nexport * from \"./glass-accordion\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx",
        "line": 144,
        "column": 1,
        "message": "Missing ARIA attributes for accordion components. Accordion components should include proper ARIA labeling for screen readers",
        "description": "Missing ARIA attributes for accordion components. Accordion components should include proper ARIA labeling for screen readers This code works but could be improved for better maintainability.",
        "suggestion": "Add ARIA attributes like aria-expanded, aria-controls, and aria-labelledby to improve accessibility",
        "rule": "accessibility",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx-performance-1",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx",
        "line": 175,
        "column": 5,
        "message": "Framer Motion animations in accordion content may cause performance issues with frequent open/close operations",
        "description": "Framer Motion animations in accordion content may cause performance issues with frequent open/close operations This implementation could impact application performance.",
        "suggestion": "Consider using CSS transitions instead of Framer Motion for simple animations, or add animation controls to prevent unnecessary re-renders",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx-bug-2",
        "type": "bug",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx",
        "line": 144,
        "column": 3,
        "message": "Accordion item structure nests AccordionPrimitive.Item inside a div wrapper, which may break Radix UI's internal logic",
        "description": "Accordion item structure nests AccordionPrimitive.Item inside a div wrapper, which may break Radix UI's internal logic This code pattern may cause runtime errors or unexpected behavior.",
        "suggestion": "Move the glass styling classes directly to AccordionPrimitive.Item instead of wrapping it in a div",
        "rule": "bug",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "const GlassAccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  GlassAccordionItemProps\n>(({ className, size, ...props }, ref) => (\n  <AccordionPrimitive.Item \n    ref={ref} \n    className={cn(accordionItemVariants({ size }), \"relative\", className)}\n    {...props}\n  >\n    <div className=\"liquid-glass-filter\" />\n    <div className=\"liquid-glass-overlay\" />\n    <div className=\"liquid-glass-specular\" />\n    <div className=\"liquid-glass-content p-0\">{props.children}</div>\n  </AccordionPrimitive.Item>\n));",
          "description": "Move the glass styling classes directly to AccordionPrimitive.Item instead of wrapping it in a div",
          "content": "const GlassAccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  GlassAccordionItemProps\n>(({ className, size, ...props }, ref) => (\n  <AccordionPrimitive.Item \n    ref={ref} \n    className={cn(accordionItemVariants({ size }), \"relative\", className)}\n    {...props}\n  >\n    <div className=\"liquid-glass-filter\" />\n    <div className=\"liquid-glass-overlay\" />\n    <div className=\"liquid-glass-specular\" />\n    <div className=\"liquid-glass-content p-0\">{props.children}</div>\n  </AccordionPrimitive.Item>\n));"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx-naming-3",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx",
        "line": 8,
        "column": 3,
        "message": "Inconsistent naming pattern: variant-system imports use aliases that don't match common conventions",
        "description": "Inconsistent naming pattern: variant-system imports use aliases that don't match common conventions This code works but could be improved for better maintainability.",
        "suggestion": "Use conventional naming for cva imports: 'cva' and 'VariantProps' without aliases",
        "rule": "naming",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "import {\n  createVariants as cva,\n  type InferVariantProps as VariantProps,\n} from \"../../lib/variant-system\";",
          "description": "Use conventional naming for cva imports: 'cva' and 'VariantProps' without aliases",
          "content": "import {\n  createVariants as cva,\n  type InferVariantProps as VariantProps,\n} from \"../../lib/variant-system\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx-style-4",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.tsx",
        "line": 19,
        "column": 7,
        "message": "Unused variant options in accordionVariants - 'enhanced' and 'ghost' variants have empty implementations",
        "description": "Unused variant options in accordionVariants - 'enhanced' and 'ghost' variants have empty implementations This violates code style conventions and may reduce readability.",
        "suggestion": "Either implement the variant styles or remove unused variants to avoid confusion",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-0",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 64,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-1",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 67,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-2",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 70,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-3",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 96,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-4",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 105,
        "column": 34,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-5",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 140,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-6",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 141,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 145,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-8",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 146,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-9",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 171,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-10",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 172,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-11",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 176,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-12",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 177,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-error-handling-13",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 200,
        "column": 5,
        "message": "Missing null checks when accessing DOM element properties",
        "description": "Missing null checks when accessing DOM element properties This code works but could be improved for better maintainability.",
        "suggestion": "Add null checks when accessing parentElement or provide fallback assertions",
        "rule": "error-handling",
        "category": "Error Handling & Logging"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-naming-14",
        "type": "naming",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 266,
        "column": 9,
        "message": "Variable names could be more descriptive in ref callback tests",
        "description": "Variable names could be more descriptive in ref callback tests This code works but could be improved for better maintainability.",
        "suggestion": "Consider using more descriptive names like 'accordionElement' instead of 'accordionRef'",
        "rule": "naming",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-performance-15",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 317,
        "column": 5,
        "message": "Multiple DOM queries for the same element could be optimized",
        "description": "Multiple DOM queries for the same element could be optimized This implementation could impact application performance.",
        "suggestion": "Store DOM query results in variables to avoid repeated queries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const triggerParent = screen.getByText(\"With Icon\").parentElement;\n    const iconElement = triggerParent?.querySelector(\"svg\");\n    expect(iconElement).toBeInTheDocument();",
          "description": "Store DOM query results in variables to avoid repeated queries",
          "content": "    const triggerParent = screen.getByText(\"With Icon\").parentElement;\n    const iconElement = triggerParent?.querySelector(\"svg\");\n    expect(iconElement).toBeInTheDocument();"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx-performance-16",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.test.tsx",
        "line": 331,
        "column": 5,
        "message": "Multiple DOM queries for the same element could be optimized",
        "description": "Multiple DOM queries for the same element could be optimized This implementation could impact application performance.",
        "suggestion": "Store DOM query results in variables to avoid repeated queries",
        "rule": "performance",
        "category": "Performance Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    const triggerParent = screen.getByText(\"Without Icon\").parentElement;\n    const iconElement = triggerParent?.querySelector(\"svg\");\n    expect(iconElement).toBe(null);",
          "description": "Store DOM query results in variables to avoid repeated queries",
          "content": "    const triggerParent = screen.getByText(\"Without Icon\").parentElement;\n    const iconElement = triggerParent?.querySelector(\"svg\");\n    expect(iconElement).toBe(null);"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx-accessibility-0",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx",
        "line": 267,
        "column": 11,
        "message": "Button elements should have explicit type attribute for clarity and to prevent form submission",
        "description": "Button elements should have explicit type attribute for clarity and to prevent form submission This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to prevent unintended form submission",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-1\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >",
          "description": "Add explicit type='button' attribute to prevent unintended form submission",
          "content": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-1\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx-accessibility-1",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx",
        "line": 275,
        "column": 11,
        "message": "Button elements should have explicit type attribute for clarity and to prevent form submission",
        "description": "Button elements should have explicit type attribute for clarity and to prevent form submission This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to prevent unintended form submission",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-2\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >",
          "description": "Add explicit type='button' attribute to prevent unintended form submission",
          "content": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-2\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx-accessibility-2",
        "type": "accessibility",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx",
        "line": 283,
        "column": 11,
        "message": "Button elements should have explicit type attribute for clarity and to prevent form submission",
        "description": "Button elements should have explicit type attribute for clarity and to prevent form submission This code works but could be improved for better maintainability.",
        "suggestion": "Add explicit type='button' attribute to prevent unintended form submission",
        "rule": "accessibility",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-3\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >",
          "description": "Add explicit type='button' attribute to prevent unintended form submission",
          "content": "          <button\n            type=\"button\"\n            onClick={() => setValue(\"item-3\")}\n            className=\"rounded-lg bg-white/10 px-3 py-1 text-sm text-white hover:bg-white/20\"\n          >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx-style-3",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx",
        "line": 4,
        "column": 3,
        "message": "Unused import 'Accordion' - this component is only used in the CompoundPattern story but imported at the top level",
        "description": "Unused import 'Accordion' - this component is only used in the CompoundPattern story but imported at the top level This violates code style conventions and may reduce readability.",
        "suggestion": "Remove unused import or ensure it's properly used throughout the file",
        "rule": "style",
        "category": "Style & Formatting"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx-performance-4",
        "type": "performance",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accordion/glass-accordion.stories.tsx",
        "line": 85,
        "column": 1,
        "message": "Multiple similar accordion examples could be extracted into reusable helper functions to reduce code duplication",
        "description": "Multiple similar accordion examples could be extracted into reusable helper functions to reduce code duplication This implementation could impact application performance.",
        "suggestion": "Consider extracting common accordion patterns into helper functions to reduce bundle size and improve maintainability",
        "rule": "performance",
        "category": "Performance Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/index.ts-structure-0",
        "type": "structure",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/index.ts",
        "line": 4,
        "column": 1,
        "message": "Potential missing file dependency - re-exporting from './glass-accessible-demo' but the actual file may not exist",
        "description": "Potential missing file dependency - re-exporting from './glass-accessible-demo' but the actual file may not exist This code works but could be improved for better maintainability.",
        "suggestion": "Verify that the './glass-accessible-demo' file exists and exports the expected members. Consider adding explicit exports for better documentation.",
        "rule": "structure",
        "category": "Architecture & Design Patterns"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/index.ts-style-1",
        "type": "style",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/index.ts",
        "line": 5,
        "column": 1,
        "message": "Trailing empty line at end of file should be removed or standardized",
        "description": "Trailing empty line at end of file should be removed or standardized This violates code style conventions and may reduce readability.",
        "suggestion": "Remove trailing empty line or ensure consistent file ending format",
        "rule": "style",
        "category": "Style & Formatting",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "/**\n * glass-accessible-demo Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-accessible-demo\";",
          "description": "Remove trailing empty line or ensure consistent file ending format",
          "content": "/**\n * glass-accessible-demo Component Export\n */\n// Re-export everything for compatibility\nexport * from \"./glass-accessible-demo\";"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-0",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 47,
        "column": 23,
        "message": "Reference to undefined variable 'accessibilityManager'",
        "description": "Reference to undefined variable 'accessibilityManager' This will likely cause errors during execution.",
        "suggestion": "Import or define the accessibilityManager before using it",
        "rule": "error",
        "category": "Bugs & Errors",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    if (demoRef) {\n      if (!demoRef.current) {\n    }",
          "description": "Import or define the accessibilityManager before using it",
          "content": "    if (demoRef) {\n      if (!demoRef.current) {\n    }"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-1",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 59,
        "column": 7,
        "message": "Reference to undefined variable 'accessibilityManager'",
        "description": "Reference to undefined variable 'accessibilityManager' This will likely cause errors during execution.",
        "suggestion": "Import or define the accessibilityManager before using it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-2",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 68,
        "column": 19,
        "message": "Reference to undefined variable 'accessibilityManager'",
        "description": "Reference to undefined variable 'accessibilityManager' This will likely cause errors during execution.",
        "suggestion": "Import or define the accessibilityManager before using it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-3",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 75,
        "column": 7,
        "message": "Reference to undefined variable 'accessibilityManager'",
        "description": "Reference to undefined variable 'accessibilityManager' This will likely cause errors during execution.",
        "suggestion": "Import or define the accessibilityManager before using it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-4",
        "type": "error",
        "severity": "error",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 79,
        "column": 7,
        "message": "Reference to undefined variable 'accessibilityManager'",
        "description": "Reference to undefined variable 'accessibilityManager' This will likely cause errors during execution.",
        "suggestion": "Import or define the accessibilityManager before using it",
        "rule": "error",
        "category": "Bugs & Errors"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-a11y-5",
        "type": "a11y",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 259,
        "column": 15,
        "message": "Button uses aria-pressed but doesn't handle the pressed state change",
        "description": "Button uses aria-pressed but doesn't handle the pressed state change This code works but could be improved for better maintainability.",
        "suggestion": "Implement onClick handler to toggle aria-pressed value or remove the attribute if not needed",
        "rule": "a11y",
        "category": "Accessibility Issues"
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-a11y-6",
        "type": "a11y",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 271,
        "column": 15,
        "message": "Misleading aria-expanded attribute on button that doesn't expand/collapse content",
        "description": "Misleading aria-expanded attribute on button that doesn't expand/collapse content This code works but could be improved for better maintainability.",
        "suggestion": "Remove aria-expanded or implement actual expand/collapse functionality",
        "rule": "a11y",
        "category": "Accessibility Issues",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "              <button\n                type=\"button\"\n                className=\"rounded bg-red-500/20 px-4 py-2\"\n              >",
          "description": "Remove aria-expanded or implement actual expand/collapse functionality",
          "content": "              <button\n                type=\"button\"\n                className=\"rounded bg-red-500/20 px-4 py-2\"\n              >"
        }
      },
      {
        "id": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx-error-handling-7",
        "type": "error-handling",
        "severity": "warning",
        "file": "/Users/tuliopinheirocunha/LiqUIdify/libs/components/src/components/glass-accessible-demo/glass-accessible-demo.tsx",
        "line": 62,
        "column": 14,
        "message": "Empty catch block suppresses all errors without proper handling",
        "description": "Empty catch block suppresses all errors without proper handling This code works but could be improved for better maintainability.",
        "suggestion": "Add proper error handling, logging, or user feedback for validation failures",
        "rule": "error-handling",
        "category": "Error Handling & Logging",
        "fix": {
          "type": "replace",
          "oldCode": "",
          "newCode": "    } catch (error) {\n      // Handle validation error\n      accessibilityManager.announce(\n        \"Accessibility validation failed. Please try again.\",\n        \"assertive\"\n      );\n    }",
          "description": "Add proper error handling, logging, or user feedback for validation failures",
          "content": "    } catch (error) {\n      // Handle validation error\n      accessibilityManager.announce(\n        \"Accessibility validation failed. Please try again.\",\n        \"assertive\"\n      );\n    }"
        }
      }
    ],
    "options": {
      "path": ".",
      "issueTypes": [
        "bug",
        "error",
        "exception",
        "error-handling",
        "security",
        "vulnerability",
        "authentication",
        "authorization",
        "performance",
        "optimization",
        "memory",
        "memory-leak",
        "style",
        "formatting",
        "naming",
        "convention",
        "architecture",
        "design-pattern",
        "structure",
        "accessibility",
        "a11y",
        "aria",
        "wcag"
      ],
      "minSeverity": "warning",
      "generateFixes": true
    }
  }
]
